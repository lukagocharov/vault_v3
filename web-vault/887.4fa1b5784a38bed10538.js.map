{
	"version": 3,
	"file": "887.4fa1b5784a38bed10538.js",
	"mappings": "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",
	"sources": ["webpack://@bitwarden/web-vault/./src/app/tools/reports/pages/exposed-passwords-report.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/tools/exposed-passwords-report.component.ts", "webpack://@bitwarden/web-vault/./src/app/tools/reports/pages/inactive-two-factor-report.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/tools/inactive-two-factor-report.component.ts", "webpack://@bitwarden/web-vault/./src/app/tools/reports/pages/reused-passwords-report.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/tools/reused-passwords-report.component.ts", "webpack://@bitwarden/web-vault/./src/app/tools/reports/pages/unsecured-websites-report.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/tools/unsecured-websites-report.component.ts", "webpack://@bitwarden/web-vault/./src/app/tools/reports/pages/weak-passwords-report.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/tools/weak-passwords-report.component.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/guards/is-paid-org.guard.ts", "webpack://@bitwarden/web-vault/./src/app/tools/event-export/event.export.ts", "webpack://@bitwarden/web-vault/./src/app/tools/event-export/event-export.service.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/common/base.events.component.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/events.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/events.component.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/reporting/reports-home.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/reporting/reports-home.component.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/reporting/organization-reporting-routing.module.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/reporting/organization-reporting.module.ts"],
	"sourcesContent": ["<app-header></app-header>\n\n<bit-container>\n  <p>{{ \"exposedPasswordsReportDesc\" | i18n }}</p>\n  <button type=\"submit\" buttonType=\"primary\" bitButton [loading]=\"loading\" (click)=\"load()\">\n    {{ \"checkExposedPasswords\" | i18n }}\n  </button>\n  <div class=\"tw-mt-4\" *ngIf=\"hasLoaded\">\n    <bit-callout type=\"success\" title=\"{{ 'goodNews' | i18n }}\" *ngIf=\"!ciphers.length\">\n      {{ \"noExposedPasswords\" | i18n }}\n    </bit-callout>\n    <ng-container *ngIf=\"ciphers.length\">\n      <bit-callout type=\"danger\" title=\"{{ 'exposedPasswordsFound' | i18n }}\" [useAlertRole]=\"true\">\n        {{ \"exposedPasswordsFoundReportDesc\" | i18n: (ciphers.length | number) : vaultMsg }}\n      </bit-callout>\n      <bit-toggle-group\n        *ngIf=\"showFilterToggle && !isAdminConsoleActive\"\n        [selected]=\"filterOrgStatus$ | async\"\n        (selectedChange)=\"filterOrgToggle($event)\"\n        [attr.aria-label]=\"'addAccessFilter' | i18n\"\n      >\n        <ng-container *ngFor=\"let status of filterStatus\">\n          <bit-toggle [value]=\"status\">\n            {{ getName(status) }}\n            <span bitBadge variant=\"info\"> {{ getCount(status) }} </span>\n          </bit-toggle>\n        </ng-container>\n      </bit-toggle-group>\n      <bit-table [dataSource]=\"dataSource\">\n        <ng-container header>\n          <tr bitRow>\n            <th bitCell></th>\n            <th bitCell bitSortable=\"name\">{{ \"name\" | i18n }}</th>\n            <th bitCell bitSortable=\"organizationId\" *ngIf=\"!isAdminConsoleActive\">\n              {{ \"owner\" | i18n }}\n            </th>\n            <th bitCell class=\"tw-text-right\" bitSortable=\"exposedXTimes\">\n              {{ \"timesExposed\" | i18n }}\n            </th>\n          </tr>\n        </ng-container>\n        <ng-template body let-rows$>\n          <tr bitRow *ngFor=\"let r of rows$ | async\">\n            <td bitCell>\n              <app-vault-icon [cipher]=\"r\"></app-vault-icon>\n            </td>\n            <td bitCell>\n              <ng-container *ngIf=\"!organization || canManageCipher(r); else cantManage\">\n                <a\n                  bitLink\n                  href=\"#\"\n                  appStopClick\n                  (click)=\"selectCipher(r)\"\n                  title=\"{{ 'editItemWithName' | i18n: r.name }}\"\n                  >{{ r.name }}</a\n                >\n              </ng-container>\n              <ng-template #cantManage>\n                <span>{{ r.name }}</span>\n              </ng-template>\n              <ng-container *ngIf=\"!organization && r.organizationId\">\n                <i\n                  class=\"bwi bwi-collection\"\n                  appStopProp\n                  title=\"{{ 'shared' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"shared\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"r.hasAttachments\">\n                <i\n                  class=\"bwi bwi-paperclip\"\n                  appStopProp\n                  title=\"{{ 'attachments' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"attachments\" | i18n }}</span>\n              </ng-container>\n              <br />\n              <small>{{ r.subTitle }}</small>\n            </td>\n            <td bitCell *ngIf=\"!isAdminConsoleActive\">\n              <app-org-badge\n                *ngIf=\"!organization\"\n                [disabled]=\"disabled\"\n                [organizationId]=\"r.organizationId\"\n                [organizationName]=\"r.organizationId | orgNameFromId: (organizations$ | async)\"\n                appStopProp\n              >\n              </app-org-badge>\n            </td>\n            <td bitCell class=\"tw-text-right\">\n              <span bitBadge variant=\"warning\">\n                {{ \"exposedXTimes\" | i18n: (r.exposedXTimes | number) }}\n              </span>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </div>\n  <ng-template #cipherAddEdit></ng-template>\n</bit-container>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { AuditService } from \"@bitwarden/common/abstractions/audit.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\n// eslint-disable-next-line no-restricted-imports\nimport { ExposedPasswordsReportComponent as BaseExposedPasswordsReportComponent } from \"../../../tools/reports/pages/exposed-passwords-report.component\";\n\n@Component({\n  selector: \"app-org-exposed-passwords-report\",\n  templateUrl: \"../../../tools/reports/pages/exposed-passwords-report.component.html\",\n})\n// eslint-disable-next-line rxjs-angular/prefer-takeuntil\nexport class ExposedPasswordsReportComponent\n  extends BaseExposedPasswordsReportComponent\n  implements OnInit\n{\n  manageableCiphers: Cipher[];\n\n  constructor(\n    cipherService: CipherService,\n    auditService: AuditService,\n    modalService: ModalService,\n    organizationService: OrganizationService,\n    private route: ActivatedRoute,\n    passwordRepromptService: PasswordRepromptService,\n    i18nService: I18nService,\n    syncService: SyncService,\n  ) {\n    super(\n      cipherService,\n      auditService,\n      organizationService,\n      modalService,\n      passwordRepromptService,\n      i18nService,\n      syncService,\n    );\n  }\n\n  async ngOnInit() {\n    this.isAdminConsoleActive = true;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil, rxjs/no-async-subscribe\n    this.route.parent.parent.params.subscribe(async (params) => {\n      this.organization = await this.organizationService.get(params.organizationId);\n      this.manageableCiphers = await this.cipherService.getAll();\n    });\n  }\n\n  getAllCiphers(): Promise<CipherView[]> {\n    return this.cipherService.getAllFromApiForOrganization(this.organization.id);\n  }\n\n  canManageCipher(c: CipherView): boolean {\n    return this.manageableCiphers.some((x) => x.id === c.id);\n  }\n}\n", "<app-header></app-header>\n\n<bit-container>\n  <p>{{ \"inactive2faReportDesc\" | i18n }}</p>\n  <div *ngIf=\"!hasLoaded && loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin tw-text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n  </div>\n  <div class=\"tw-mt-4\" *ngIf=\"hasLoaded\">\n    <bit-callout type=\"success\" title=\"{{ 'goodNews' | i18n }}\" *ngIf=\"!ciphers.length\">\n      {{ \"noInactive2fa\" | i18n }}\n    </bit-callout>\n    <ng-container *ngIf=\"ciphers.length\">\n      <bit-callout type=\"danger\" title=\"{{ 'inactive2faFound' | i18n }}\">\n        {{ \"inactive2faFoundReportDesc\" | i18n: (ciphers.length | number) : vaultMsg }}\n      </bit-callout>\n      <bit-toggle-group\n        *ngIf=\"showFilterToggle && !isAdminConsoleActive\"\n        [selected]=\"filterOrgStatus$ | async\"\n        (selectedChange)=\"filterOrgToggle($event)\"\n        [attr.aria-label]=\"'addAccessFilter' | i18n\"\n      >\n        <ng-container *ngFor=\"let status of filterStatus\">\n          <bit-toggle [value]=\"status\">\n            {{ getName(status) }}\n            <span bitBadge variant=\"info\"> {{ getCount(status) }} </span>\n          </bit-toggle>\n        </ng-container>\n      </bit-toggle-group>\n      <bit-table [dataSource]=\"dataSource\">\n        <ng-container header *ngIf=\"!isAdminConsoleActive\">\n          <tr bitRow>\n            <th bitCell></th>\n            <th bitCell>{{ \"name\" | i18n }}</th>\n            <th bitCell>{{ \"owner\" | i18n }}</th>\n            <th bitCell></th>\n          </tr>\n        </ng-container>\n        <tbody>\n          <ng-template body let-rows$>\n            <tr bitRow *ngFor=\"let r of rows$ | async\">\n              <td bitCell>\n                <app-vault-icon [cipher]=\"r\"></app-vault-icon>\n              </td>\n              <td bitCell>\n                <a\n                  bitLink\n                  href=\"#\"\n                  appStopClick\n                  (click)=\"selectCipher(r)\"\n                  title=\"{{ 'editItemWithName' | i18n: r.name }}\"\n                  >{{ r.name }}</a\n                >\n                <ng-container *ngIf=\"!organization && r.organizationId\">\n                  <i\n                    class=\"bwi bwi-collection\"\n                    appStopProp\n                    title=\"{{ 'shared' | i18n }}\"\n                    aria-hidden=\"true\"\n                  ></i>\n                  <span class=\"tw-sr-only\">{{ \"shared\" | i18n }}</span>\n                </ng-container>\n                <ng-container *ngIf=\"r.hasAttachments\">\n                  <i\n                    class=\"bwi bwi-paperclip\"\n                    appStopProp\n                    title=\"{{ 'attachments' | i18n }}\"\n                    aria-hidden=\"true\"\n                  ></i>\n                  <span class=\"tw-sr-only\">{{ \"attachments\" | i18n }}</span>\n                </ng-container>\n                <br />\n                <small>{{ r.subTitle }}</small>\n              </td>\n              <td bitCell>\n                <app-org-badge\n                  *ngIf=\"!organization\"\n                  [disabled]=\"disabled\"\n                  [organizationId]=\"r.organizationId\"\n                  [organizationName]=\"r.organizationId | orgNameFromId: (organizations$ | async)\"\n                  appStopProp\n                >\n                </app-org-badge>\n              </td>\n              <td bitCell class=\"tw-text-right\">\n                <a\n                  bitBadge\n                  href=\"{{ cipherDocs.get(r.id) }}\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  *ngIf=\"cipherDocs.has(r.id)\"\n                >\n                  {{ \"instructions\" | i18n }}</a\n                >\n              </td>\n            </tr>\n          </ng-template>\n        </tbody></bit-table\n      >\n    </ng-container>\n  </div>\n  <ng-template #cipherAddEdit></ng-template>\n</bit-container>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\n// eslint-disable-next-line no-restricted-imports\nimport { InactiveTwoFactorReportComponent as BaseInactiveTwoFactorReportComponent } from \"../../../tools/reports/pages/inactive-two-factor-report.component\";\n\n@Component({\n  selector: \"app-inactive-two-factor-report\",\n  templateUrl: \"../../../tools/reports/pages/inactive-two-factor-report.component.html\",\n})\n// eslint-disable-next-line rxjs-angular/prefer-takeuntil\nexport class InactiveTwoFactorReportComponent\n  extends BaseInactiveTwoFactorReportComponent\n  implements OnInit\n{\n  constructor(\n    cipherService: CipherService,\n    modalService: ModalService,\n    private route: ActivatedRoute,\n    logService: LogService,\n    passwordRepromptService: PasswordRepromptService,\n    organizationService: OrganizationService,\n    i18nService: I18nService,\n    syncService: SyncService,\n  ) {\n    super(\n      cipherService,\n      organizationService,\n      modalService,\n      logService,\n      passwordRepromptService,\n      i18nService,\n      syncService,\n    );\n  }\n\n  async ngOnInit() {\n    this.isAdminConsoleActive = true;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil, rxjs/no-async-subscribe\n    this.route.parent.parent.params.subscribe(async (params) => {\n      this.organization = await this.organizationService.get(params.organizationId);\n      await super.ngOnInit();\n    });\n  }\n\n  getAllCiphers(): Promise<CipherView[]> {\n    return this.cipherService.getAllFromApiForOrganization(this.organization.id);\n  }\n}\n", "<app-header></app-header>\n\n<bit-container>\n  <p>{{ \"reusedPasswordsReportDesc\" | i18n }}</p>\n  <div *ngIf=\"!hasLoaded && loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin tw-text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n  </div>\n  <div class=\"tw-mt-4\" *ngIf=\"hasLoaded\">\n    <bit-callout type=\"success\" title=\"{{ 'goodNews' | i18n }}\" *ngIf=\"!ciphers.length\">\n      {{ \"noReusedPasswords\" | i18n }}\n    </bit-callout>\n    <ng-container *ngIf=\"ciphers.length\">\n      <bit-callout type=\"danger\" title=\"{{ 'reusedPasswordsFound' | i18n }}\">\n        {{ \"reusedPasswordsFoundReportDesc\" | i18n: (ciphers.length | number) : vaultMsg }}\n      </bit-callout>\n\n      <bit-toggle-group\n        *ngIf=\"showFilterToggle && !isAdminConsoleActive\"\n        [selected]=\"filterOrgStatus$ | async\"\n        (selectedChange)=\"filterOrgToggle($event)\"\n        [attr.aria-label]=\"'addAccessFilter' | i18n\"\n      >\n        <ng-container *ngFor=\"let status of filterStatus\">\n          <bit-toggle [value]=\"status\">\n            {{ getName(status) }}\n            <span bitBadge variant=\"info\"> {{ getCount(status) }} </span>\n          </bit-toggle>\n        </ng-container>\n      </bit-toggle-group>\n\n      <bit-table [dataSource]=\"dataSource\">\n        <ng-container header *ngIf=\"!isAdminConsoleActive\">\n          <tr bitRow>\n            <th bitCell></th>\n            <th bitCell>{{ \"name\" | i18n }}</th>\n            <th bitCell>{{ \"owner\" | i18n }}</th>\n            <th bitCell class=\"tw-text-right\">{{ \"timesReused\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body let-rows$>\n          <tr bitRow *ngFor=\"let r of rows$ | async\">\n            <td bitCell>\n              <app-vault-icon [cipher]=\"r\"></app-vault-icon>\n            </td>\n            <td bitCell>\n              <ng-container *ngIf=\"!organization || canManageCipher(r); else cantManage\">\n                <a\n                  bitLink\n                  href=\"#\"\n                  appStopClick\n                  (click)=\"selectCipher(r)\"\n                  title=\"{{ 'editItemWithName' | i18n: r.name }}\"\n                  >{{ r.name }}</a\n                >\n              </ng-container>\n              <ng-template #cantManage>\n                <span>{{ r.name }}</span>\n              </ng-template>\n              <ng-container *ngIf=\"!organization && r.organizationId\">\n                <i\n                  class=\"bwi bwi-collection\"\n                  appStopProp\n                  title=\"{{ 'shared' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"shared\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"r.hasAttachments\">\n                <i\n                  class=\"bwi bwi-paperclip\"\n                  appStopProp\n                  title=\"{{ 'attachments' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"attachments\" | i18n }}</span>\n              </ng-container>\n              <br />\n              <small>{{ r.subTitle }}</small>\n            </td>\n            <td bitCell>\n              <app-org-badge\n                *ngIf=\"!organization\"\n                [disabled]=\"disabled\"\n                [organizationId]=\"r.organizationId\"\n                [organizationName]=\"r.organizationId | orgNameFromId: (organizations$ | async)\"\n                appStopProp\n              >\n              </app-org-badge>\n            </td>\n            <td bitCell class=\"tw-text-right\">\n              <span bitBadge variant=\"warning\">\n                {{ \"reusedXTimes\" | i18n: passwordUseMap.get(r.login.password) }}\n              </span>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </div>\n  <ng-template #cipherAddEdit></ng-template>\n</bit-container>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\n// eslint-disable-next-line no-restricted-imports\nimport { ReusedPasswordsReportComponent as BaseReusedPasswordsReportComponent } from \"../../../tools/reports/pages/reused-passwords-report.component\";\n\n@Component({\n  selector: \"app-reused-passwords-report\",\n  templateUrl: \"../../../tools/reports/pages/reused-passwords-report.component.html\",\n})\n// eslint-disable-next-line rxjs-angular/prefer-takeuntil\nexport class ReusedPasswordsReportComponent\n  extends BaseReusedPasswordsReportComponent\n  implements OnInit\n{\n  manageableCiphers: Cipher[];\n\n  constructor(\n    cipherService: CipherService,\n    modalService: ModalService,\n    private route: ActivatedRoute,\n    organizationService: OrganizationService,\n    passwordRepromptService: PasswordRepromptService,\n    i18nService: I18nService,\n    syncService: SyncService,\n  ) {\n    super(\n      cipherService,\n      organizationService,\n      modalService,\n      passwordRepromptService,\n      i18nService,\n      syncService,\n    );\n  }\n\n  async ngOnInit() {\n    this.isAdminConsoleActive = true;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil, rxjs/no-async-subscribe\n    this.route.parent.parent.params.subscribe(async (params) => {\n      this.organization = await this.organizationService.get(params.organizationId);\n      this.manageableCiphers = await this.cipherService.getAll();\n      await super.ngOnInit();\n    });\n  }\n\n  getAllCiphers(): Promise<CipherView[]> {\n    return this.cipherService.getAllFromApiForOrganization(this.organization.id);\n  }\n\n  canManageCipher(c: CipherView): boolean {\n    return this.manageableCiphers.some((x) => x.id === c.id);\n  }\n}\n", "<app-header></app-header>\n\n<bit-container>\n  <p>{{ \"unsecuredWebsitesReportDesc\" | i18n }}</p>\n  <div *ngIf=\"!hasLoaded && loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin tw-text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n  </div>\n  <div class=\"tw-mt-4\" *ngIf=\"hasLoaded\">\n    <bit-callout type=\"success\" title=\"{{ 'goodNews' | i18n }}\" *ngIf=\"!ciphers.length\">\n      {{ \"noUnsecuredWebsites\" | i18n }}\n    </bit-callout>\n    <ng-container *ngIf=\"ciphers.length\">\n      <bit-callout type=\"danger\" title=\"{{ 'unsecuredWebsitesFound' | i18n }}\">\n        {{ \"unsecuredWebsitesFoundReportDesc\" | i18n: (ciphers.length | number) : vaultMsg }}\n      </bit-callout>\n\n      <bit-toggle-group\n        *ngIf=\"showFilterToggle && !isAdminConsoleActive\"\n        [selected]=\"filterOrgStatus$ | async\"\n        (selectedChange)=\"filterOrgToggle($event)\"\n        [attr.aria-label]=\"'addAccessFilter' | i18n\"\n      >\n        <ng-container *ngFor=\"let status of filterStatus\">\n          <bit-toggle [value]=\"status\">\n            {{ getName(status) }}\n            <span bitBadge variant=\"info\"> {{ getCount(status) }} </span>\n          </bit-toggle>\n        </ng-container>\n      </bit-toggle-group>\n      <bit-table [dataSource]=\"dataSource\">\n        <ng-container header *ngIf=\"!isAdminConsoleActive\">\n          <tr bitRow>\n            <th bitCell></th>\n            <th bitCell>{{ \"name\" | i18n }}</th>\n            <th bitCell>{{ \"owner\" | i18n }}</th>\n            <th bitCell></th>\n          </tr>\n        </ng-container>\n        <ng-template body let-rows$>\n          <tr bitRow *ngFor=\"let r of rows$ | async\">\n            <td bitCell>\n              <app-vault-icon [cipher]=\"r\"></app-vault-icon>\n            </td>\n            <td bitCell>\n              <a\n                bitLink\n                href=\"#\"\n                appStopClick\n                (click)=\"selectCipher(r)\"\n                title=\"{{ 'editItemWithName' | i18n: r.name }}\"\n              >\n                {{ r.name }}\n              </a>\n              <ng-container *ngIf=\"!organization && r.organizationId\">\n                <i\n                  class=\"bwi bwi-collection\"\n                  appStopProp\n                  title=\"{{ 'shared' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"shared\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"r.hasAttachments\">\n                <i\n                  class=\"bwi bwi-paperclip\"\n                  appStopProp\n                  title=\"{{ 'attachments' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"attachments\" | i18n }}</span>\n              </ng-container>\n              <br />\n              <small>{{ r.subTitle }}</small>\n            </td>\n            <td bitCell>\n              <app-org-badge\n                *ngIf=\"!organization\"\n                [disabled]=\"disabled\"\n                [organizationId]=\"r.organizationId\"\n                [organizationName]=\"r.organizationId | orgNameFromId: (organizations$ | async)\"\n                appStopProp\n              >\n              </app-org-badge>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </div>\n  <ng-template #cipherAddEdit></ng-template>\n</bit-container>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { CollectionService } from \"@bitwarden/admin-console/common\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\n// eslint-disable-next-line no-restricted-imports\nimport { UnsecuredWebsitesReportComponent as BaseUnsecuredWebsitesReportComponent } from \"../../../tools/reports/pages/unsecured-websites-report.component\";\n\n@Component({\n  selector: \"app-unsecured-websites-report\",\n  templateUrl: \"../../../tools/reports/pages/unsecured-websites-report.component.html\",\n})\n// eslint-disable-next-line rxjs-angular/prefer-takeuntil\nexport class UnsecuredWebsitesReportComponent\n  extends BaseUnsecuredWebsitesReportComponent\n  implements OnInit\n{\n  constructor(\n    cipherService: CipherService,\n    modalService: ModalService,\n    private route: ActivatedRoute,\n    organizationService: OrganizationService,\n    passwordRepromptService: PasswordRepromptService,\n    i18nService: I18nService,\n    syncService: SyncService,\n    collectionService: CollectionService,\n  ) {\n    super(\n      cipherService,\n      organizationService,\n      modalService,\n      passwordRepromptService,\n      i18nService,\n      syncService,\n      collectionService,\n    );\n  }\n\n  async ngOnInit() {\n    this.isAdminConsoleActive = true;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil, rxjs/no-async-subscribe\n    this.route.parent.parent.params.subscribe(async (params) => {\n      this.organization = await this.organizationService.get(params.organizationId);\n      await super.ngOnInit();\n    });\n  }\n\n  getAllCiphers(): Promise<CipherView[]> {\n    return this.cipherService.getAllFromApiForOrganization(this.organization.id);\n  }\n}\n", "<app-header></app-header>\n\n<bit-container>\n  <p>{{ \"weakPasswordsReportDesc\" | i18n }}</p>\n  <div *ngIf=\"!hasLoaded && loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin tw-text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n  </div>\n  <div class=\"tw-mt-4\" *ngIf=\"hasLoaded\">\n    <bit-callout type=\"success\" title=\"{{ 'goodNews' | i18n }}\" *ngIf=\"!ciphers.length\">\n      {{ \"noWeakPasswords\" | i18n }}\n    </bit-callout>\n    <ng-container *ngIf=\"ciphers.length\">\n      <bit-callout type=\"danger\" title=\"{{ 'weakPasswordsFound' | i18n }}\">\n        {{ \"weakPasswordsFoundReportDesc\" | i18n: (ciphers.length | number) : vaultMsg }}\n      </bit-callout>\n      <bit-toggle-group\n        *ngIf=\"showFilterToggle && !isAdminConsoleActive\"\n        [selected]=\"filterOrgStatus$ | async\"\n        (selectedChange)=\"filterOrgToggle($event)\"\n        [attr.aria-label]=\"'addAccessFilter' | i18n\"\n      >\n        <ng-container *ngFor=\"let status of filterStatus\">\n          <bit-toggle [value]=\"status\">\n            {{ getName(status) }}\n            <span bitBadge variant=\"info\"> {{ getCount(status) }} </span>\n          </bit-toggle>\n        </ng-container>\n      </bit-toggle-group>\n      <bit-table [dataSource]=\"dataSource\">\n        <ng-container header>\n          <tr bitRow>\n            <th bitCell></th>\n            <th bitCell bitSortable=\"name\">{{ \"name\" | i18n }}</th>\n            <th bitCell bitSortable=\"organizationId\" *ngIf=\"!isAdminConsoleActive\">\n              {{ \"owner\" | i18n }}\n            </th>\n            <th bitCell class=\"tw-text-right\" bitSortable=\"score\" default>\n              {{ \"weakness\" | i18n }}\n            </th>\n          </tr>\n        </ng-container>\n        <ng-template body let-rows$>\n          <tr bitRow *ngFor=\"let r of rows$ | async\">\n            <td bitCell>\n              <app-vault-icon [cipher]=\"r\"></app-vault-icon>\n            </td>\n            <td bitCell>\n              <ng-container *ngIf=\"!organization || canManageCipher(r); else cantManage\">\n                <a\n                  bitLink\n                  href=\"#\"\n                  appStopClick\n                  (click)=\"selectCipher(r)\"\n                  title=\"{{ 'editItemWithName' | i18n: r.name }}\"\n                  >{{ r.name }}</a\n                >\n              </ng-container>\n              <ng-template #cantManage>\n                <span>{{ r.name }}</span>\n              </ng-template>\n              <ng-container *ngIf=\"!organization && r.organizationId\">\n                <i\n                  class=\"bwi bwi-collection\"\n                  appStopProp\n                  title=\"{{ 'shared' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"shared\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"r.hasAttachments\">\n                <i\n                  class=\"bwi bwi-paperclip\"\n                  appStopProp\n                  title=\"{{ 'attachments' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"attachments\" | i18n }}</span>\n              </ng-container>\n              <br />\n              <small>{{ r.subTitle }}</small>\n            </td>\n            <td bitCell *ngIf=\"!isAdminConsoleActive\">\n              <app-org-badge\n                *ngIf=\"!organization\"\n                [disabled]=\"disabled\"\n                [organizationId]=\"r.organizationId\"\n                [organizationName]=\"r.organizationId | orgNameFromId: (organizations$ | async)\"\n                appStopProp\n              >\n              </app-org-badge>\n            </td>\n            <td bitCell class=\"tw-text-right\">\n              <span bitBadge [variant]=\"r.reportValue.badgeVariant\">\n                {{ r.reportValue.label | i18n }}\n              </span>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </div>\n  <ng-template #cipherAddEdit></ng-template>\n</bit-container>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PasswordStrengthServiceAbstraction } from \"@bitwarden/common/tools/password-strength\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\n// eslint-disable-next-line no-restricted-imports\nimport { WeakPasswordsReportComponent as BaseWeakPasswordsReportComponent } from \"../../../tools/reports/pages/weak-passwords-report.component\";\n\n@Component({\n  selector: \"app-weak-passwords-report\",\n  templateUrl: \"../../../tools/reports/pages/weak-passwords-report.component.html\",\n})\n// eslint-disable-next-line rxjs-angular/prefer-takeuntil\nexport class WeakPasswordsReportComponent\n  extends BaseWeakPasswordsReportComponent\n  implements OnInit\n{\n  manageableCiphers: Cipher[];\n\n  constructor(\n    cipherService: CipherService,\n    passwordStrengthService: PasswordStrengthServiceAbstraction,\n    modalService: ModalService,\n    private route: ActivatedRoute,\n    organizationService: OrganizationService,\n    passwordRepromptService: PasswordRepromptService,\n    i18nService: I18nService,\n    syncService: SyncService,\n  ) {\n    super(\n      cipherService,\n      passwordStrengthService,\n      organizationService,\n      modalService,\n      passwordRepromptService,\n      i18nService,\n      syncService,\n    );\n  }\n\n  async ngOnInit() {\n    this.isAdminConsoleActive = true;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil, rxjs/no-async-subscribe\n    this.route.parent.parent.params.subscribe(async (params) => {\n      this.organization = await this.organizationService.get(params.organizationId);\n      this.manageableCiphers = await this.cipherService.getAll();\n      await super.ngOnInit();\n    });\n  }\n\n  getAllCiphers(): Promise<CipherView[]> {\n    return this.cipherService.getAllFromApiForOrganization(this.organization.id);\n  }\n\n  canManageCipher(c: CipherView): boolean {\n    return this.manageableCiphers.some((x) => x.id === c.id);\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { inject } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n} from \"@angular/router\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { DialogService } from \"@bitwarden/components\";\n\n/**\n * `CanActivateFn` that checks if the organization matching the id in the URL\n * parameters is paid or free. If the organization is free instructions are\n * provided on how to upgrade a free organization, and the user is redirected\n * if they have access to upgrade the organization. If the organization is\n * paid routing proceeds.\"\n */\nexport function isPaidOrgGuard(): CanActivateFn {\n  return async (route: ActivatedRouteSnapshot, _state: RouterStateSnapshot) => {\n    const router = inject(Router);\n    const organizationService = inject(OrganizationService);\n    const dialogService = inject(DialogService);\n\n    const org = await organizationService.get(route.params.organizationId);\n\n    if (org == null) {\n      return router.createUrlTree([\"/\"]);\n    }\n\n    if (org.isFreeOrg) {\n      // Users without billing permission can't access billing\n      if (!org.canEditSubscription) {\n        await dialogService.openSimpleDialog({\n          title: { key: \"upgradeOrganizationCloseSecurityGaps\" },\n          content: { key: \"upgradeOrganizationCloseSecurityGapsDesc\" },\n          acceptButtonText: { key: \"ok\" },\n          cancelButtonText: null,\n          type: \"info\",\n        });\n        return false;\n      } else {\n        const upgradeConfirmed = await dialogService.openSimpleDialog({\n          title: { key: \"upgradeOrganizationCloseSecurityGaps\" },\n          content: { key: \"upgradeOrganizationCloseSecurityGapsDesc\" },\n          acceptButtonText: { key: \"upgradeOrganization\" },\n          type: \"info\",\n          icon: \"bwi-arrow-circle-up\",\n        });\n        if (upgradeConfirmed) {\n          await router.navigate([\"organizations\", org.id, \"billing\", \"subscription\"], {\n            queryParams: { upgrade: true },\n          });\n        }\n      }\n    }\n\n    return !org.isFreeOrg;\n  };\n}\n", "import { EventType } from \"@bitwarden/common/enums\";\nimport { EventView } from \"@bitwarden/common/models/view/event.view\";\n\nexport class EventExport {\n  message: string;\n  appIcon: string;\n  appName: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  date: string;\n  ip: string;\n  type: string;\n  installationId: string;\n\n  constructor(event: EventView) {\n    this.message = event.humanReadableMessage;\n    this.appIcon = event.appIcon;\n    this.appName = event.appName;\n    this.userId = event.userId;\n    this.userName = event.userName;\n    this.userEmail = event.userEmail;\n    this.date = event.date;\n    this.ip = event.ip;\n    this.type = EventType[event.type];\n    this.installationId = event.installationId;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Injectable } from \"@angular/core\";\nimport * as papa from \"papaparse\";\n\nimport { EventView } from \"@bitwarden/common/models/view/event.view\";\n\nimport { EventExport } from \"./event.export\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class EventExportService {\n  async getEventExport(events: EventView[]): Promise<string> {\n    return papa.unparse(events.map((e) => new EventExport(e)));\n  }\n\n  getFileName(prefix: string = null, extension = \"csv\"): string {\n    const now = new Date();\n    const dateString =\n      now.getFullYear() +\n      \"\" +\n      this.padNumber(now.getMonth() + 1, 2) +\n      \"\" +\n      this.padNumber(now.getDate(), 2) +\n      this.padNumber(now.getHours(), 2) +\n      \"\" +\n      this.padNumber(now.getMinutes(), 2) +\n      this.padNumber(now.getSeconds(), 2);\n\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n\n  private padNumber(num: number, width: number, padCharacter = \"0\"): string {\n    const numString = num.toString();\n    return numString.length >= width\n      ? numString\n      : new Array(width - numString.length + 1).join(padCharacter) + numString;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Directive } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\n\nimport { EventResponse } from \"@bitwarden/common/models/response/event.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { EventView } from \"@bitwarden/common/models/view/event.view\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { ToastService } from \"@bitwarden/components\";\n\nimport { EventService } from \"../../core\";\nimport { EventExportService } from \"../../tools/event-export\";\n\n@Directive()\nexport abstract class BaseEventsComponent {\n  loading = true;\n  loaded = false;\n  events: EventView[];\n  dirtyDates = true;\n  continuationToken: string;\n\n  abstract readonly exportFileName: string;\n\n  protected eventsForm = new FormGroup({\n    start: new FormControl(null),\n    end: new FormControl(null),\n  });\n\n  constructor(\n    protected eventService: EventService,\n    protected i18nService: I18nService,\n    protected exportService: EventExportService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected logService: LogService,\n    protected fileDownloadService: FileDownloadService,\n    private toastService: ToastService,\n  ) {\n    const defaultDates = this.eventService.getDefaultDateFilters();\n    this.start = defaultDates[0];\n    this.end = defaultDates[1];\n  }\n\n  get start(): string {\n    return this.eventsForm.value.start;\n  }\n\n  set start(val: string) {\n    this.eventsForm.get(\"start\").setValue(val);\n  }\n\n  get end(): string {\n    return this.eventsForm.value.end;\n  }\n\n  set end(val: string) {\n    this.eventsForm.get(\"end\").setValue(val);\n  }\n\n  loadMoreEvents = async () => {\n    await this.loadEvents(false);\n  };\n\n  refreshEvents = async () => {\n    await this.loadEvents(true);\n  };\n\n  exportEvents = async () => {\n    if (this.dirtyDates) {\n      return;\n    }\n\n    this.loading = true;\n\n    const dates = this.parseDates();\n    if (dates == null) {\n      return;\n    }\n\n    let promise: Promise<any>;\n    try {\n      promise = this.export(dates[0], dates[1]);\n      await promise;\n    } catch (e) {\n      this.logService.error(`Handled exception: ${e}`);\n    }\n\n    promise = null;\n    this.loading = false;\n  };\n\n  loadEvents = async (clearExisting: boolean) => {\n    const dates = this.parseDates();\n    if (dates == null) {\n      return;\n    }\n\n    this.loading = true;\n    let events: EventView[] = [];\n    let promise: Promise<any>;\n    promise = this.loadAndParseEvents(\n      dates[0],\n      dates[1],\n      clearExisting ? null : this.continuationToken,\n    );\n\n    const result = await promise;\n    this.continuationToken = result.continuationToken;\n    events = result.events;\n\n    if (!clearExisting && this.events != null && this.events.length > 0) {\n      this.events = this.events.concat(events);\n    } else {\n      this.events = events;\n    }\n\n    this.dirtyDates = false;\n    this.loading = false;\n    promise = null;\n  };\n\n  protected abstract requestEvents(\n    startDate: string,\n    endDate: string,\n    continuationToken: string,\n  ): Promise<ListResponse<EventResponse>>;\n  protected abstract getUserName(r: EventResponse, userId: string): { name: string; email: string };\n\n  protected async loadAndParseEvents(\n    startDate: string,\n    endDate: string,\n    continuationToken: string,\n  ) {\n    const response = await this.requestEvents(startDate, endDate, continuationToken);\n\n    const events = await Promise.all(\n      response.data.map(async (r) => {\n        const userId = r.actingUserId == null ? r.userId : r.actingUserId;\n        const eventInfo = await this.eventService.getEventInfo(r);\n        const user = this.getUserName(r, userId);\n        const userName = user != null ? user.name : this.i18nService.t(\"unknown\");\n\n        return new EventView({\n          message: eventInfo.message,\n          humanReadableMessage: eventInfo.humanReadableMessage,\n          appIcon: eventInfo.appIcon,\n          appName: eventInfo.appName,\n          userId: userId,\n          userName: userName,\n          userEmail: user != null ? user.email : \"\",\n          date: r.date,\n          ip: r.ipAddress,\n          type: r.type,\n          installationId: r.installationId,\n          systemUser: r.systemUser,\n          serviceAccountId: r.serviceAccountId,\n        });\n      }),\n    );\n    return { continuationToken: response.continuationToken, events: events };\n  }\n\n  protected parseDates() {\n    let dates: string[] = null;\n    try {\n      dates = this.eventService.formatDateFilters(this.start, this.end);\n    } catch (e) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: this.i18nService.t(\"errorOccurred\"),\n        message: this.i18nService.t(\"invalidDateRange\"),\n      });\n      return null;\n    }\n    return dates;\n  }\n\n  private async export(start: string, end: string) {\n    let continuationToken = this.continuationToken;\n    let events = [].concat(this.events);\n\n    while (continuationToken != null) {\n      const result = await this.loadAndParseEvents(start, end, continuationToken);\n      continuationToken = result.continuationToken;\n      events = events.concat(result.events);\n    }\n\n    const data = await this.exportService.getEventExport(events);\n    const fileName = this.exportService.getFileName(this.exportFileName, \"csv\");\n    this.fileDownloadService.download({\n      fileName,\n      blobData: data,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n", "<app-header></app-header>\n\n<div class=\"tw-mb-4\" [formGroup]=\"eventsForm\">\n  <div class=\"tw-mt-4 tw-flex tw-items-center\">\n    <bit-form-field>\n      <bit-label>{{ \"from\" | i18n }}</bit-label>\n      <input\n        bitInput\n        type=\"datetime-local\"\n        placeholder=\"{{ 'startDate' | i18n }}\"\n        formControlName=\"start\"\n        (change)=\"dirtyDates = true\"\n      />\n    </bit-form-field>\n    <span class=\"tw-mx-2\">-</span>\n    <bit-form-field>\n      <bit-label>{{ \"to\" | i18n }}</bit-label>\n      <input\n        bitInput\n        type=\"datetime-local\"\n        placeholder=\"{{ 'endDate' | i18n }}\"\n        formControlName=\"end\"\n        (change)=\"dirtyDates = true\"\n      />\n    </bit-form-field>\n    <form>\n      <button\n        class=\"tw-mx-3 tw-mt-1\"\n        type=\"button\"\n        bitButton\n        bitFormButton\n        buttonType=\"primary\"\n        [bitAction]=\"refreshEvents\"\n      >\n        {{ \"update\" | i18n }}\n      </button>\n    </form>\n    <form>\n      <button\n        type=\"button\"\n        class=\"tw-mt-1\"\n        bitButton\n        bitFormButton\n        [bitAction]=\"exportEvents\"\n        [disabled]=\"dirtyDates\"\n      >\n        <span>{{ \"export\" | i18n }}</span>\n        <i class=\"bwi bwi-fw bwi-sign-in\" aria-hidden=\"true\"></i>\n      </button>\n    </form>\n  </div>\n</div>\n<ng-container *ngIf=\"!loaded\">\n  <i\n    class=\"bwi bwi-spinner bwi-spin tw-text-muted\"\n    title=\"{{ 'loading' | i18n }}\"\n    aria-hidden=\"true\"\n  ></i>\n  <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n</ng-container>\n<ng-container *ngIf=\"loaded\">\n  <p *ngIf=\"!events || !events.length\">{{ \"noEventsInList\" | i18n }}</p>\n  <bit-table *ngIf=\"events && events.length\">\n    <ng-container header>\n      <tr>\n        <th bitCell>{{ \"timestamp\" | i18n }}</th>\n        <th bitCell>{{ \"client\" | i18n }}</th>\n        <th bitCell>{{ \"member\" | i18n }}</th>\n        <th bitCell>{{ \"event\" | i18n }}</th>\n      </tr>\n    </ng-container>\n    <ng-template body>\n      <tr bitRow *ngFor=\"let e of events\" alignContent=\"top\">\n        <td bitCell class=\"tw-whitespace-nowrap\">{{ e.date | date: \"medium\" }}</td>\n        <td bitCell>\n          <span title=\"{{ e.appName }}, {{ e.ip }}\">{{ e.appName }}</span>\n        </td>\n        <td bitCell>\n          <span title=\"{{ e.userEmail }}\">{{ e.userName }}</span>\n        </td>\n        <td bitCell [innerHTML]=\"e.message\"></td>\n      </tr>\n    </ng-template>\n  </bit-table>\n  <button\n    type=\"button\"\n    bitButton\n    buttonType=\"primary\"\n    [bitAction]=\"loadMoreEvents\"\n    *ngIf=\"continuationToken\"\n  >\n    {{ \"loadMore\" | i18n }}\n  </button>\n</ng-container>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { concatMap, Subject, takeUntil } from \"rxjs\";\n\nimport { OrganizationUserApiService } from \"@bitwarden/admin-console/common\";\nimport { UserNamePipe } from \"@bitwarden/angular/pipes/user-name.pipe\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { ProviderService } from \"@bitwarden/common/admin-console/abstractions/provider.service\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { EventSystemUser } from \"@bitwarden/common/enums\";\nimport { EventResponse } from \"@bitwarden/common/models/response/event.response\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { ToastService } from \"@bitwarden/components\";\n\nimport { EventService } from \"../../../core\";\nimport { EventExportService } from \"../../../tools/event-export\";\nimport { BaseEventsComponent } from \"../../common/base.events.component\";\n\nconst EVENT_SYSTEM_USER_TO_TRANSLATION: Record<EventSystemUser, string> = {\n  [EventSystemUser.SCIM]: null, // SCIM acronym not able to be translated so just display SCIM\n  [EventSystemUser.DomainVerification]: \"domainVerification\",\n  [EventSystemUser.PublicApi]: \"publicApi\",\n};\n\n@Component({\n  selector: \"app-org-events\",\n  templateUrl: \"events.component.html\",\n})\nexport class EventsComponent extends BaseEventsComponent implements OnInit, OnDestroy {\n  exportFileName = \"org-events\";\n  organizationId: string;\n  organization: Organization;\n\n  private orgUsersUserIdMap = new Map<string, any>();\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private apiService: ApiService,\n    private route: ActivatedRoute,\n    eventService: EventService,\n    i18nService: I18nService,\n    exportService: EventExportService,\n    platformUtilsService: PlatformUtilsService,\n    private router: Router,\n    logService: LogService,\n    private userNamePipe: UserNamePipe,\n    private organizationService: OrganizationService,\n    private organizationUserApiService: OrganizationUserApiService,\n    private providerService: ProviderService,\n    fileDownloadService: FileDownloadService,\n    toastService: ToastService,\n  ) {\n    super(\n      eventService,\n      i18nService,\n      exportService,\n      platformUtilsService,\n      logService,\n      fileDownloadService,\n      toastService,\n    );\n  }\n\n  async ngOnInit() {\n    this.route.params\n      .pipe(\n        concatMap(async (params) => {\n          this.organizationId = params.organizationId;\n          this.organization = await this.organizationService.get(this.organizationId);\n          if (this.organization == null || !this.organization.useEvents) {\n            await this.router.navigate([\"/organizations\", this.organizationId]);\n            return;\n          }\n          await this.load();\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe();\n  }\n\n  async load() {\n    const response = await this.organizationUserApiService.getAllMiniUserDetails(\n      this.organizationId,\n    );\n    response.data.forEach((u) => {\n      const name = this.userNamePipe.transform(u);\n      this.orgUsersUserIdMap.set(u.userId, { name: name, email: u.email });\n    });\n\n    if (this.organization.providerId != null) {\n      try {\n        const provider = await this.providerService.get(this.organization.providerId);\n        if (\n          provider != null &&\n          (await this.providerService.get(this.organization.providerId)).canManageUsers\n        ) {\n          const providerUsersResponse = await this.apiService.getProviderUsers(\n            this.organization.providerId,\n          );\n          providerUsersResponse.data.forEach((u) => {\n            const name = this.userNamePipe.transform(u);\n            this.orgUsersUserIdMap.set(u.userId, {\n              name: `${name} (${this.organization.providerName})`,\n              email: u.email,\n            });\n          });\n        }\n      } catch (e) {\n        this.logService.warning(e);\n      }\n    }\n\n    await this.refreshEvents();\n    this.loaded = true;\n  }\n\n  protected requestEvents(startDate: string, endDate: string, continuationToken: string) {\n    return this.apiService.getEventsOrganization(\n      this.organizationId,\n      startDate,\n      endDate,\n      continuationToken,\n    );\n  }\n\n  protected getUserName(r: EventResponse, userId: string) {\n    if (r.installationId != null) {\n      return {\n        name: `Installation: ${r.installationId}`,\n      };\n    }\n\n    if (userId != null) {\n      if (this.orgUsersUserIdMap.has(userId)) {\n        return this.orgUsersUserIdMap.get(userId);\n      }\n\n      if (r.providerId != null && r.providerId === this.organization.providerId) {\n        return {\n          name: this.organization.providerName,\n        };\n      }\n    }\n\n    if (r.systemUser != null) {\n      const systemUserI18nKey: string = EVENT_SYSTEM_USER_TO_TRANSLATION[r.systemUser];\n\n      if (systemUserI18nKey) {\n        return {\n          name: this.i18nService.t(systemUserI18nKey),\n        };\n      } else {\n        return {\n          name: EventSystemUser[r.systemUser],\n        };\n      }\n    }\n\n    if (r.serviceAccountId) {\n      return {\n        name: this.i18nService.t(\"machineAccount\") + \" \" + this.getShortId(r.serviceAccountId),\n      };\n    }\n\n    return null;\n  }\n\n  private getShortId(id: string) {\n    return id?.substring(0, 8);\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n", "<ng-container *ngIf=\"homepage$ | async\">\n  <app-header></app-header>\n\n  <p bitTypography=\"body1\">{{ \"orgsReportsDesc\" | i18n }}</p>\n\n  <app-report-list [reports]=\"reports$ | async\"></app-report-list>\n</ng-container>\n\n<router-outlet></router-outlet>\n\n<div class=\"tw-mt-4\">\n  <a bitButton routerLink=\"./\" *ngIf=\"!(homepage$ | async)\">\n    <i class=\"bwi bwi-angle-left\" aria-hidden=\"true\"></i>\n    {{ \"backToReports\" | i18n }}\n  </a>\n</div>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, NavigationEnd, Router } from \"@angular/router\";\nimport { filter, map, Observable, startWith, concatMap } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { ProductTierType } from \"@bitwarden/common/billing/enums\";\n\nimport { ReportVariant, reports, ReportType, ReportEntry } from \"../../../tools/reports\";\n\n@Component({\n  selector: \"app-org-reports-home\",\n  templateUrl: \"reports-home.component.html\",\n})\nexport class ReportsHomeComponent implements OnInit {\n  reports$: Observable<ReportEntry[]>;\n  homepage$: Observable<boolean>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private organizationService: OrganizationService,\n    private router: Router,\n  ) {}\n\n  async ngOnInit() {\n    this.homepage$ = this.router.events.pipe(\n      filter((event) => event instanceof NavigationEnd),\n      map((event) => this.isReportsHomepageRouteUrl((event as NavigationEnd).urlAfterRedirects)),\n      startWith(this.isReportsHomepageRouteUrl(this.router.url)),\n    );\n\n    this.reports$ = this.route.params.pipe(\n      concatMap((params) => this.organizationService.get$(params.organizationId)),\n      map((org) => this.buildReports(org.productTierType)),\n    );\n  }\n\n  private buildReports(productType: ProductTierType): ReportEntry[] {\n    const reportRequiresUpgrade =\n      productType == ProductTierType.Free ? ReportVariant.RequiresUpgrade : ReportVariant.Enabled;\n\n    const reportsArray = [\n      {\n        ...reports[ReportType.ExposedPasswords],\n        variant: reportRequiresUpgrade,\n      },\n      {\n        ...reports[ReportType.ReusedPasswords],\n        variant: reportRequiresUpgrade,\n      },\n      {\n        ...reports[ReportType.WeakPasswords],\n        variant: reportRequiresUpgrade,\n      },\n      {\n        ...reports[ReportType.UnsecuredWebsites],\n        variant: reportRequiresUpgrade,\n      },\n      {\n        ...reports[ReportType.Inactive2fa],\n        variant: reportRequiresUpgrade,\n      },\n      {\n        ...reports[ReportType.MemberAccessReport],\n        variant:\n          productType == ProductTierType.Enterprise\n            ? ReportVariant.Enabled\n            : ReportVariant.RequiresEnterprise,\n      },\n    ];\n\n    return reportsArray;\n  }\n\n  private isReportsHomepageRouteUrl(url: string): boolean {\n    return url.endsWith(\"/reports\");\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { canAccessReportingTab } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\nimport { ExposedPasswordsReportComponent } from \"../../../admin-console/organizations/tools/exposed-passwords-report.component\";\nimport { InactiveTwoFactorReportComponent } from \"../../../admin-console/organizations/tools/inactive-two-factor-report.component\";\nimport { ReusedPasswordsReportComponent } from \"../../../admin-console/organizations/tools/reused-passwords-report.component\";\nimport { UnsecuredWebsitesReportComponent } from \"../../../admin-console/organizations/tools/unsecured-websites-report.component\";\nimport { WeakPasswordsReportComponent } from \"../../../admin-console/organizations/tools/weak-passwords-report.component\";\nimport { isPaidOrgGuard } from \"../guards/is-paid-org.guard\";\nimport { organizationPermissionsGuard } from \"../guards/org-permissions.guard\";\nimport { organizationRedirectGuard } from \"../guards/org-redirect.guard\";\nimport { EventsComponent } from \"../manage/events.component\";\n\nimport { ReportsHomeComponent } from \"./reports-home.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    canActivate: [organizationPermissionsGuard(canAccessReportingTab)],\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        canActivate: [organizationRedirectGuard(getReportRoute)],\n        children: [], // This is required to make the auto redirect work,\n      },\n      {\n        path: \"reports\",\n        component: ReportsHomeComponent,\n        canActivate: [organizationPermissionsGuard()],\n        data: {\n          titleId: \"reports\",\n        },\n        children: [\n          {\n            path: \"exposed-passwords-report\",\n            component: ExposedPasswordsReportComponent,\n            data: {\n              titleId: \"exposedPasswordsReport\",\n            },\n            canActivate: [isPaidOrgGuard()],\n          },\n          {\n            path: \"inactive-two-factor-report\",\n            component: InactiveTwoFactorReportComponent,\n            data: {\n              titleId: \"inactive2faReport\",\n            },\n            canActivate: [isPaidOrgGuard()],\n          },\n          {\n            path: \"reused-passwords-report\",\n            component: ReusedPasswordsReportComponent,\n            data: {\n              titleId: \"reusedPasswordsReport\",\n            },\n            canActivate: [isPaidOrgGuard()],\n          },\n          {\n            path: \"unsecured-websites-report\",\n            component: UnsecuredWebsitesReportComponent,\n            data: {\n              titleId: \"unsecuredWebsitesReport\",\n            },\n            canActivate: [isPaidOrgGuard()],\n          },\n          {\n            path: \"weak-passwords-report\",\n            component: WeakPasswordsReportComponent,\n            data: {\n              titleId: \"weakPasswordsReport\",\n            },\n            canActivate: [isPaidOrgGuard()],\n          },\n        ],\n      },\n      {\n        path: \"events\",\n        component: EventsComponent,\n        canActivate: [organizationPermissionsGuard((org) => org.canAccessEventLogs)],\n        data: {\n          titleId: \"eventLogs\",\n        },\n      },\n    ],\n  },\n];\n\nfunction getReportRoute(organization: Organization): string {\n  if (organization.canAccessEventLogs) {\n    return \"events\";\n  }\n  if (organization.canAccessReports) {\n    return \"reports\";\n  }\n  return undefined;\n}\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OrganizationReportingRoutingModule {}\n", "import { NgModule } from \"@angular/core\";\n\nimport { LooseComponentsModule } from \"../../../shared\";\nimport { SharedModule } from \"../../../shared/shared.module\";\nimport { ReportsSharedModule } from \"../../../tools/reports\";\n\nimport { OrganizationReportingRoutingModule } from \"./organization-reporting-routing.module\";\nimport { ReportsHomeComponent } from \"./reports-home.component\";\n\n@NgModule({\n  imports: [\n    SharedModule,\n    ReportsSharedModule,\n    OrganizationReportingRoutingModule,\n    LooseComponentsModule,\n  ],\n  declarations: [ReportsHomeComponent],\n})\nexport class OrganizationReportingModule {}\n"],
	"names": ["filterOrgToggle", "selectCipher", "ExposedPasswordsReportComponent", "constructor", "cipherService", "auditService", "modalService", "organizationService", "route", "passwordRepromptService", "i18nService", "syncService", "super", "ngOnInit", "this", "isAdminConsoleActive", "parent", "params", "subscribe", "organization", "get", "organizationId", "manageableCiphers", "getAll", "getAllCiphers", "getAllFromApiForOrganization", "id", "canManageCipher", "c", "some", "x", "load", "InactiveTwoFactorReportComponent", "logService", "ReusedPasswordsReportComponent", "UnsecuredWebsitesReportComponent", "collectionService", "WeakPasswordsReportComponent", "passwordStrengthService", "isPaidOrgGuard", "_state", "router", "dialogService", "org", "createUrlTree", "isFreeOrg", "canEditSubscription", "openSimpleDialog", "title", "key", "content", "acceptButtonText", "cancelButtonText", "type", "icon", "navigate", "queryParams", "upgrade", "EventExport", "event", "message", "humanReadableMessage", "appIcon", "appName", "userId", "userName", "userEmail", "date", "ip", "installationId", "EventExportService", "getEventExport", "events", "map", "e", "getFileName", "prefix", "extension", "now", "Date", "getFullYear", "padNumber", "getMonth", "getDate", "getHours", "getMinutes", "getSeconds", "num", "width", "padCharacter", "numString", "toString", "length", "Array", "join", "BaseEventsComponent", "eventService", "exportService", "platformUtilsService", "fileDownloadService", "toastService", "loading", "loaded", "dirtyDates", "eventsForm", "start", "end", "loadMoreEvents", "loadEvents", "refreshEvents", "exportEvents", "dates", "parseDates", "promise", "export", "error", "clearExisting", "loadAndParseEvents", "continuationToken", "result", "concat", "defaultDates", "getDefaultDateFilters", "value", "val", "setValue", "startDate", "endDate", "response", "requestEvents", "Promise", "all", "data", "r", "actingUserId", "eventInfo", "getEventInfo", "user", "getUserName", "name", "t", "email", "ipAddress", "systemUser", "serviceAccountId", "formatDateFilters", "showToast", "variant", "fileName", "exportFileName", "download", "blobData", "blobOptions", "EVENT_SYSTEM_USER_TO_TRANSLATION", "SCIM", "DomainVerification", "PublicApi", "EventsComponent", "apiService", "userNamePipe", "organizationUserApiService", "providerService", "orgUsersUserIdMap", "Map", "destroy$", "Subject", "pipe", "concatMap", "useEvents", "takeUntil", "getAllMiniUserDetails", "forEach", "u", "transform", "set", "providerId", "canManageUsers", "getProviderUsers", "providerName", "warning", "getEventsOrganization", "has", "systemUserI18nKey", "getShortId", "substring", "ngOnDestroy", "next", "complete", "ReportsHomeComponent", "homepage$", "filter", "isReportsHomepageRouteUrl", "urlAfterRedirects", "startWith", "url", "reports$", "get$", "buildReports", "productTierType", "productType", "reportRequiresUpgrade", "Free", "RequiresUpgrade", "Enabled", "reports", "ExposedPasswords", "ReusedPasswords", "WeakPasswords", "UnsecuredWebsites", "Inactive2fa", "MemberAccessReport", "Enterprise", "RequiresEnterprise", "endsWith", "routes", "path", "canActivate", "children", "pathMatch", "canAccessEventLogs", "canAccessReports", "component", "titleId", "OrganizationReportingRoutingModule", "forChild", "OrganizationReportingModule"],
	"sourceRoot": ""
}