{
	"version": 3,
	"file": "encrypt-worker.6f09472bb5c19382e0d4.js",
	"mappings": "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",
	"sources": ["webpack://@bitwarden/web-vault/webpack/runtime/chunk loaded", "webpack://@bitwarden/web-vault/webpack/runtime/create fake namespace object", "webpack://@bitwarden/web-vault/webpack/runtime/startup chunk dependencies", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/misc/utils.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/enums/encryption-type.enum.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/enums/file-upload-type.enum.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/enums/hash-purpose.enum.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/enums/html-storage-location.enum.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/enums/key-suffix-options.enum.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/enums/log-level-type.enum.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/enums/storage-location.enum.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/enums/theme-type.enum.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/models/domain/symmetric-crypto-key.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/services/console-log.service.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/services/container.service.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/services/web-crypto-function.service.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/models/domain/enc-array-buffer.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/models/domain/enc-string.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/models/domain/encrypted-object.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/services/cryptography/encrypt.service.implementation.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/services/cryptography/initializer-key.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/enums/cipher-type.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/enums/cipher-reprompt-type.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/enums/field-type.enum.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/enums/linked-id-type.enum.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/enums/secure-note-type.enum.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/models/domain/domain-base.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/data/attachment.data.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/data/card.data.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/data/field.data.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/data/identity.data.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/data/fido2-credential.data.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/data/login-uri.data.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/data/login.data.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/data/password-history.data.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/data/secure-note.data.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/data/ssh-key.data.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/data/cipher.data.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/attachment.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/autofill/constants/match-patterns.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/autofill/utils.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/linked-field-option.decorator.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/item.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/card.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/field.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/identity.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/fido2-credential.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/models/domain/domain-service.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/misc/safe-urls.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/login-uri.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/login.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/password-history.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/secure-note.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/ssh-key.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/view/cipher.view.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/domain/attachment.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/domain/card.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/domain/field.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/domain/identity.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/domain/fido2-credential.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/domain/login-uri.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/domain/login.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/domain/password.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/domain/secure-note.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/domain/ssh-key.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/domain/cipher.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/services/cryptography/get-class-initializer.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/platform/services/cryptography/encrypt.worker.ts", "webpack://@bitwarden/web-vault/webpack/bootstrap", "webpack://@bitwarden/web-vault/webpack/runtime/define property getters", "webpack://@bitwarden/web-vault/webpack/runtime/ensure chunk", "webpack://@bitwarden/web-vault/webpack/runtime/get javascript chunk filename", "webpack://@bitwarden/web-vault/webpack/runtime/get mini-css chunk filename", "webpack://@bitwarden/web-vault/webpack/runtime/global", "webpack://@bitwarden/web-vault/webpack/runtime/hasOwnProperty shorthand", "webpack://@bitwarden/web-vault/webpack/runtime/make namespace object", "webpack://@bitwarden/web-vault/webpack/runtime/publicPath", "webpack://@bitwarden/web-vault/webpack/runtime/importScripts chunk loading", "webpack://@bitwarden/web-vault/webpack/startup"],
	"sourcesContent": ["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};", "var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};", "var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(972).then(next);\n};", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\n/* eslint-disable no-useless-escape */\nimport * as path from \"path\";\n\nimport { Buffer as BufferLib } from \"buffer/\";\nimport { Observable, of, switchMap } from \"rxjs\";\nimport { getHostname, parse } from \"tldts\";\nimport { Merge } from \"type-fest\";\n\n// FIXME: remove `src` and fix import\n// eslint-disable-next-line no-restricted-imports\nimport { KeyService } from \"../../../../key-management/src/abstractions/key.service\";\nimport { EncryptService } from \"../abstractions/encrypt.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\n\nconst nodeURL = typeof self === \"undefined\" ? require(\"url\") : null;\n\ndeclare global {\n  /* eslint-disable-next-line no-var */\n  var bitwardenContainerService: BitwardenContainerService;\n}\n\ninterface BitwardenContainerService {\n  getKeyService: () => KeyService;\n  getEncryptService: () => EncryptService;\n}\n\nexport class Utils {\n  static inited = false;\n  static isNode = false;\n  static isBrowser = true;\n  static isMobileBrowser = false;\n  static isAppleMobileBrowser = false;\n  static global: typeof global = null;\n  // Transpiled version of /\\p{Emoji_Presentation}/gu using https://mothereff.in/regexpu. Used for compatability in older browsers.\n  static regexpEmojiPresentation =\n    /(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])/g;\n  static readonly validHosts: string[] = [\"localhost\"];\n  static readonly originalMinimumPasswordLength = 8;\n  static readonly minimumPasswordLength = 12;\n  static readonly DomainMatchBlacklist = new Map<string, Set<string>>([\n    [\"google.com\", new Set([\"script.google.com\"])],\n  ]);\n\n  static init() {\n    if (Utils.inited) {\n      return;\n    }\n\n    Utils.inited = true;\n    Utils.isNode =\n      typeof process !== \"undefined\" &&\n      (process as any).release != null &&\n      (process as any).release.name === \"node\";\n    Utils.isBrowser = typeof window !== \"undefined\";\n\n    Utils.isMobileBrowser = Utils.isBrowser && this.isMobile(window);\n    Utils.isAppleMobileBrowser = Utils.isBrowser && this.isAppleMobile(window);\n\n    if (Utils.isNode) {\n      Utils.global = global;\n    } else if (Utils.isBrowser) {\n      Utils.global = window;\n    } else {\n      // If it's not browser or node then it must be a service worker\n      Utils.global = self;\n    }\n  }\n\n  static fromB64ToArray(str: string): Uint8Array {\n    if (str == null) {\n      return null;\n    }\n\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"base64\"));\n    } else {\n      const binaryString = Utils.global.atob(str);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUrlB64ToArray(str: string): Uint8Array {\n    return Utils.fromB64ToArray(Utils.fromUrlB64ToB64(str));\n  }\n\n  static fromHexToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"hex\"));\n    } else {\n      const bytes = new Uint8Array(str.length / 2);\n      for (let i = 0; i < str.length; i += 2) {\n        bytes[i / 2] = parseInt(str.substr(i, 2), 16);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUtf8ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"utf8\"));\n    } else {\n      const strUtf8 = unescape(encodeURIComponent(str));\n      const arr = new Uint8Array(strUtf8.length);\n      for (let i = 0; i < strUtf8.length; i++) {\n        arr[i] = strUtf8.charCodeAt(i);\n      }\n      return arr;\n    }\n  }\n\n  static fromByteStringToArray(str: string): Uint8Array {\n    if (str == null) {\n      return null;\n    }\n    const arr = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      arr[i] = str.charCodeAt(i);\n    }\n    return arr;\n  }\n\n  static fromBufferToB64(buffer: ArrayBuffer): string {\n    if (buffer == null) {\n      return null;\n    }\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"base64\");\n    } else {\n      let binary = \"\";\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return Utils.global.btoa(binary);\n    }\n  }\n\n  static fromBufferToUrlB64(buffer: ArrayBuffer): string {\n    return Utils.fromB64toUrlB64(Utils.fromBufferToB64(buffer));\n  }\n\n  static fromB64toUrlB64(b64Str: string) {\n    return b64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  static fromBufferToUtf8(buffer: ArrayBuffer): string {\n    return BufferLib.from(buffer).toString(\"utf8\");\n  }\n\n  static fromBufferToByteString(buffer: ArrayBuffer): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buffer));\n  }\n\n  // ref: https://stackoverflow.com/a/40031979/1090359\n  static fromBufferToHex(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"hex\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      return Array.prototype.map\n        .call(bytes, (x: number) => (\"00\" + x.toString(16)).slice(-2))\n        .join(\"\");\n    }\n  }\n\n  /**\n   * Converts a hex string to an ArrayBuffer.\n   * Note: this doesn't need any Node specific code as parseInt() / ArrayBuffer / Uint8Array\n   * work the same in Node and the browser.\n   * @param {string} hexString - A string of hexadecimal characters.\n   * @returns {ArrayBuffer} The ArrayBuffer representation of the hex string.\n   */\n  static hexStringToArrayBuffer(hexString: string): ArrayBuffer {\n    // Check if the hexString has an even length, as each hex digit represents half a byte (4 bits),\n    // and it takes two hex digits to represent a full byte (8 bits).\n    if (hexString.length % 2 !== 0) {\n      throw \"HexString has to be an even length\";\n    }\n\n    // Create an ArrayBuffer with a length that is half the length of the hex string,\n    // because each pair of hex digits will become a single byte.\n    const arrayBuffer = new ArrayBuffer(hexString.length / 2);\n\n    // Create a Uint8Array view on top of the ArrayBuffer (each position represents a byte)\n    // as ArrayBuffers cannot be edited directly.\n    const uint8Array = new Uint8Array(arrayBuffer);\n\n    // Loop through the bytes\n    for (let i = 0; i < uint8Array.length; i++) {\n      // Extract two hex characters (1 byte)\n      const hexByte = hexString.substr(i * 2, 2);\n\n      // Convert hexByte into a decimal value from base 16. (ex: ff --> 255)\n      const byteValue = parseInt(hexByte, 16);\n\n      // Place the byte value into the uint8Array\n      uint8Array[i] = byteValue;\n    }\n\n    return arrayBuffer;\n  }\n\n  static fromUrlB64ToB64(urlB64Str: string): string {\n    let output = urlB64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += \"==\";\n        break;\n      case 3:\n        output += \"=\";\n        break;\n      default:\n        throw new Error(\"Illegal base64url string!\");\n    }\n\n    return output;\n  }\n\n  static fromUrlB64ToUtf8(urlB64Str: string): string {\n    return Utils.fromB64ToUtf8(Utils.fromUrlB64ToB64(urlB64Str));\n  }\n\n  static fromUtf8ToB64(utfStr: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(utfStr, \"utf8\").toString(\"base64\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.btoa(utfStr)));\n    }\n  }\n\n  static fromUtf8ToUrlB64(utfStr: string): string {\n    return Utils.fromBufferToUrlB64(Utils.fromUtf8ToArray(utfStr));\n  }\n\n  static fromB64ToUtf8(b64Str: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(b64Str, \"base64\").toString(\"utf8\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.atob(b64Str)));\n    }\n  }\n\n  // ref: http://stackoverflow.com/a/2117523/1090359\n  static newGuid(): string {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  static guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n\n  static isGuid(id: string) {\n    return RegExp(Utils.guidRegex, \"i\").test(id);\n  }\n\n  static getHostname(uriString: string): string {\n    if (Utils.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"about:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"file:\")) {\n      return null;\n    }\n\n    // Does uriString contain invalid characters\n    // TODO Needs to possibly be extended, although '!' is a reserved character\n    if (uriString.indexOf(\"!\") > 0) {\n      return null;\n    }\n\n    try {\n      const hostname = getHostname(uriString, { validHosts: this.validHosts });\n      if (hostname != null) {\n        return hostname;\n      }\n    } catch {\n      return null;\n    }\n    return null;\n  }\n\n  static getHost(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.host !== \"\" ? url.host : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getDomain(uriString: string): string {\n    if (Utils.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"about:\")) {\n      return null;\n    }\n\n    try {\n      const parseResult = parse(uriString, {\n        validHosts: this.validHosts,\n        allowPrivateDomains: true,\n      });\n      if (parseResult != null && parseResult.hostname != null) {\n        if (parseResult.hostname === \"localhost\" || parseResult.isIp) {\n          return parseResult.hostname;\n        }\n\n        if (parseResult.domain != null) {\n          return parseResult.domain;\n        }\n        return null;\n      }\n    } catch {\n      return null;\n    }\n    return null;\n  }\n\n  static getQueryParams(uriString: string): Map<string, string> {\n    const url = Utils.getUrl(uriString);\n    if (url == null || url.search == null || url.search === \"\") {\n      return null;\n    }\n    const map = new Map<string, string>();\n    const pairs = (url.search[0] === \"?\" ? url.search.substr(1) : url.search).split(\"&\");\n    pairs.forEach((pair) => {\n      const parts = pair.split(\"=\");\n      if (parts.length < 1) {\n        return;\n      }\n      map.set(\n        decodeURIComponent(parts[0]).toLowerCase(),\n        parts[1] == null ? \"\" : decodeURIComponent(parts[1]),\n      );\n    });\n    return map;\n  }\n\n  static getSortFunction<T>(\n    i18nService: I18nService,\n    prop: { [K in keyof T]: T[K] extends string ? K : never }[keyof T],\n  ): (a: T, b: T) => number {\n    return (a, b) => {\n      if (a[prop] == null && b[prop] != null) {\n        return -1;\n      }\n      if (a[prop] != null && b[prop] == null) {\n        return 1;\n      }\n      if (a[prop] == null && b[prop] == null) {\n        return 0;\n      }\n\n      // The `as unknown as string` here is unfortunate because typescript doesn't property understand that the return of T[prop] will be a string\n      return i18nService.collator\n        ? i18nService.collator.compare(a[prop] as unknown as string, b[prop] as unknown as string)\n        : (a[prop] as unknown as string).localeCompare(b[prop] as unknown as string);\n    };\n  }\n\n  static isNullOrWhitespace(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str.trim() === \"\";\n  }\n\n  static isNullOrEmpty(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str == \"\";\n  }\n\n  static isPromise(obj: any): obj is Promise<unknown> {\n    return (\n      obj != undefined && typeof obj[\"then\"] === \"function\" && typeof obj[\"catch\"] === \"function\"\n    );\n  }\n\n  static nameOf<T>(name: string & keyof T) {\n    return name;\n  }\n\n  static assign<T>(target: T, source: Partial<T>): T {\n    return Object.assign(target, source);\n  }\n\n  static iterateEnum<O extends object, K extends keyof O = keyof O>(obj: O) {\n    return (Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[]).map((k) => obj[k]);\n  }\n\n  static getUrl(uriString: string): URL {\n    if (this.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    return Utils.getUrlObject(uriString);\n  }\n\n  static camelToPascalCase(s: string) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  /**\n   * There are a few ways to calculate text color for contrast, this one seems to fit accessibility guidelines best.\n   * https://stackoverflow.com/a/3943023/6869691\n   *\n   * @param {string} bgColor\n   * @param {number} [threshold] see stackoverflow link above\n   * @param {boolean} [svgTextFill]\n   * Indicates if this method is performed on an SVG <text> 'fill' attribute (e.g. <text fill=\"black\"></text>).\n   * This check is necessary because the '!important' tag cannot be used in a 'fill' attribute.\n   */\n  static pickTextColorBasedOnBgColor(bgColor: string, threshold = 186, svgTextFill = false) {\n    const bgColorHexNums = bgColor.charAt(0) === \"#\" ? bgColor.substring(1, 7) : bgColor;\n    const r = parseInt(bgColorHexNums.substring(0, 2), 16); // hexToR\n    const g = parseInt(bgColorHexNums.substring(2, 4), 16); // hexToG\n    const b = parseInt(bgColorHexNums.substring(4, 6), 16); // hexToB\n    const blackColor = svgTextFill ? \"black\" : \"black !important\";\n    const whiteColor = svgTextFill ? \"white\" : \"white !important\";\n    return r * 0.299 + g * 0.587 + b * 0.114 > threshold ? blackColor : whiteColor;\n  }\n\n  static stringToColor(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n      const value = (hash >> (i * 8)) & 0xff;\n      color += (\"00\" + value.toString(16)).substr(-2);\n    }\n    return color;\n  }\n\n  /**\n   * @throws Will throw an error if the ContainerService has not been attached to the window object\n   */\n  static getContainerService(): BitwardenContainerService {\n    if (this.global.bitwardenContainerService == null) {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n    return this.global.bitwardenContainerService;\n  }\n\n  static validateHexColor(color: string) {\n    return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(color);\n  }\n\n  /**\n   * Converts map to a Record<string, V> with the same data. Inverse of recordToMap\n   * Useful in toJSON methods, since Maps are not serializable\n   * @param map\n   * @returns\n   */\n  static mapToRecord<K extends string | number, V>(map: Map<K, V>): Record<string, V> {\n    if (map == null) {\n      return null;\n    }\n    if (!(map instanceof Map)) {\n      return map;\n    }\n    return Object.fromEntries(map);\n  }\n\n  /**\n   * Converts record to a Map<string, V> with the same data. Inverse of mapToRecord\n   * Useful in fromJSON methods, since Maps are not serializable\n   *\n   * Warning: If the record has string keys that are numbers, they will be converted to numbers in the map\n   * @param record\n   * @returns\n   */\n  static recordToMap<K extends string | number, V>(record: Record<K, V>): Map<K, V> {\n    if (record == null) {\n      return null;\n    } else if (record instanceof Map) {\n      return record;\n    }\n\n    const entries = Object.entries(record);\n    if (entries.length === 0) {\n      return new Map();\n    }\n\n    if (isNaN(Number(entries[0][0]))) {\n      return new Map(entries) as Map<K, V>;\n    } else {\n      return new Map(entries.map((e) => [Number(e[0]), e[1]])) as Map<K, V>;\n    }\n  }\n\n  /** Applies Object.assign, but converts the type nicely using Type-Fest Merge<Destination, Source> */\n  static merge<Destination, Source>(\n    destination: Destination,\n    source: Source,\n  ): Merge<Destination, Source> {\n    return Object.assign(destination, source) as unknown as Merge<Destination, Source>;\n  }\n\n  /**\n   * encodeURIComponent escapes all characters except the following:\n   * alphabetic, decimal digits, - _ . ! ~ * ' ( )\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#encoding_for_rfc3986\n   */\n  static encodeRFC3986URIComponent(str: string): string {\n    return encodeURIComponent(str).replace(\n      /[!'()*]/g,\n      (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n    );\n  }\n\n  /**\n   * Normalizes a path for defense against attacks like traversals\n   * @param denormalizedPath\n   * @returns\n   */\n  static normalizePath(denormalizedPath: string): string {\n    return path.normalize(decodeURIComponent(denormalizedPath)).replace(/^(\\.\\.(\\/|\\\\|$))+/, \"\");\n  }\n\n  private static isMobile(win: Window) {\n    let mobile = false;\n    ((a) => {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n          a,\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n          a.substr(0, 4),\n        )\n      ) {\n        mobile = true;\n      }\n    })(win.navigator.userAgent || win.navigator.vendor || (win as any).opera);\n    return mobile || win.navigator.userAgent.match(/iPad/i) != null;\n  }\n\n  static delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Generate an observable from a function that returns a promise.\n   * Similar to the rxjs function {@link from} with one big exception:\n   * {@link from} will not re-execute the function when observers resubscribe.\n   * {@link Util.asyncToObservable} will execute `generator` for every\n   * subscribe, making it ideal if the value ever needs to be refreshed.\n   * */\n  static asyncToObservable<T>(generator: () => Promise<T>): Observable<T> {\n    return of(undefined).pipe(switchMap(() => generator()));\n  }\n\n  /**\n   * Return the number of days remaining before a target date arrives.\n   * Returns 0 if the day has already passed.\n   */\n  static daysRemaining(targetDate: Date): number {\n    const diffTime = targetDate.getTime() - Date.now();\n    const msPerDay = 86400000;\n    return Math.max(0, Math.floor(diffTime / msPerDay));\n  }\n\n  private static isAppleMobile(win: Window) {\n    return (\n      win.navigator.userAgent.match(/iPhone/i) != null ||\n      win.navigator.userAgent.match(/iPad/i) != null\n    );\n  }\n\n  private static getUrlObject(uriString: string): URL {\n    // All the methods below require a protocol to properly parse a URL string\n    // Assume http if no other protocol is present\n    const hasProtocol = uriString.indexOf(\"://\") > -1;\n    if (!hasProtocol && uriString.indexOf(\".\") > -1) {\n      uriString = \"http://\" + uriString;\n    } else if (!hasProtocol) {\n      return null;\n    }\n\n    try {\n      if (nodeURL != null) {\n        return new nodeURL.URL(uriString);\n      }\n\n      return new URL(uriString);\n    } catch (e) {\n      // Ignore error\n    }\n\n    return null;\n  }\n}\n\nUtils.init();\n", "export enum EncryptionType {\n  AesCbc256_B64 = 0,\n  AesCbc128_HmacSha256_B64 = 1,\n  AesCbc256_HmacSha256_B64 = 2,\n  Rsa2048_OaepSha256_B64 = 3,\n  Rsa2048_OaepSha1_B64 = 4,\n  Rsa2048_OaepSha256_HmacSha256_B64 = 5,\n  Rsa2048_OaepSha1_HmacSha256_B64 = 6,\n}\n\nexport function encryptionTypeToString(encryptionType: EncryptionType): string {\n  if (encryptionType in EncryptionType) {\n    return EncryptionType[encryptionType];\n  } else {\n    return \"Unknown encryption type \" + encryptionType;\n  }\n}\n\n/** The expected number of parts to a serialized EncString of the given encryption type.\n * For example, an EncString of type AesCbc256_B64 will have 2 parts, and an EncString of type\n * AesCbc128_HmacSha256_B64 will have 3 parts.\n *\n * Example of annotated serialized EncStrings:\n * 0.iv|data\n * 1.iv|data|mac\n * 2.iv|data|mac\n * 3.data\n * 4.data\n *\n * @see EncString\n * @see EncryptionType\n * @see EncString.parseEncryptedString\n */\nexport const EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE = {\n  [EncryptionType.AesCbc256_B64]: 2,\n  [EncryptionType.AesCbc128_HmacSha256_B64]: 3,\n  [EncryptionType.AesCbc256_HmacSha256_B64]: 3,\n  [EncryptionType.Rsa2048_OaepSha256_B64]: 1,\n  [EncryptionType.Rsa2048_OaepSha1_B64]: 1,\n  [EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64]: 2,\n  [EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64]: 2,\n};\n", "export enum FileUploadType {\n  Direct = 0,\n  Azure = 1,\n}\n", "export enum HashPurpose {\n  ServerAuthorization = 1,\n  LocalAuthorization = 2,\n}\n", "export enum HtmlStorageLocation {\n  Local = \"local\",\n  Memory = \"memory\",\n  Session = \"session\",\n}\n", "export enum KeySuffixOptions {\n  Auto = \"auto\",\n  Pin = \"pin\",\n}\n", "export enum LogLevelType {\n  Debug,\n  Info,\n  Warning,\n  Error,\n}\n", "export enum StorageLocation {\n  Both = \"both\",\n  Disk = \"disk\",\n  Memory = \"memory\",\n}\n", "/**\n * @deprecated prefer the `ThemeTypes` constants and `Theme` type over unsafe enum types\n **/\nexport enum ThemeType {\n  System = \"system\",\n  Light = \"light\",\n  Dark = \"dark\",\n  Nord = \"nord\",\n  SolarizedDark = \"solarizedDark\",\n}\n\nexport const ThemeTypes = {\n  System: \"system\",\n  Light: \"light\",\n  Dark: \"dark\",\n  Nord: \"nord\",\n  SolarizedDark: \"solarizedDark\",\n} as const;\n\nexport type Theme = (typeof ThemeTypes)[keyof typeof ThemeTypes];\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncryptionType } from \"../../enums\";\n\nexport class SymmetricCryptoKey {\n  key: Uint8Array;\n  encKey: Uint8Array;\n  macKey?: Uint8Array;\n  encType: EncryptionType;\n\n  keyB64: string;\n  encKeyB64: string;\n  macKeyB64: string;\n\n  meta: any;\n\n  constructor(key: Uint8Array, encType?: EncryptionType) {\n    if (key == null) {\n      throw new Error(\"Must provide key\");\n    }\n\n    if (encType == null) {\n      if (key.byteLength === 32) {\n        encType = EncryptionType.AesCbc256_B64;\n      } else if (key.byteLength === 64) {\n        encType = EncryptionType.AesCbc256_HmacSha256_B64;\n      } else {\n        throw new Error(\"Unable to determine encType.\");\n      }\n    }\n\n    this.key = key;\n    this.encType = encType;\n\n    if (encType === EncryptionType.AesCbc256_B64 && key.byteLength === 32) {\n      this.encKey = key;\n      this.macKey = null;\n    } else if (encType === EncryptionType.AesCbc128_HmacSha256_B64 && key.byteLength === 32) {\n      this.encKey = key.slice(0, 16);\n      this.macKey = key.slice(16, 32);\n    } else if (encType === EncryptionType.AesCbc256_HmacSha256_B64 && key.byteLength === 64) {\n      this.encKey = key.slice(0, 32);\n      this.macKey = key.slice(32, 64);\n    } else {\n      throw new Error(\"Unsupported encType/key length.\");\n    }\n\n    this.keyB64 = Utils.fromBufferToB64(this.key);\n    this.encKeyB64 = Utils.fromBufferToB64(this.encKey);\n    if (this.macKey != null) {\n      this.macKeyB64 = Utils.fromBufferToB64(this.macKey);\n    }\n  }\n\n  toJSON() {\n    // The whole object is constructed from the initial key, so just store the B64 key\n    return { keyB64: this.keyB64 };\n  }\n\n  static fromString(s: string): SymmetricCryptoKey {\n    if (s == null) {\n      return null;\n    }\n\n    const arrayBuffer = Utils.fromB64ToArray(s);\n    return new SymmetricCryptoKey(arrayBuffer);\n  }\n\n  static fromJSON(obj: Jsonify<SymmetricCryptoKey>): SymmetricCryptoKey {\n    return SymmetricCryptoKey.fromString(obj?.keyB64);\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { LogService as LogServiceAbstraction } from \"../abstractions/log.service\";\nimport { LogLevelType } from \"../enums/log-level-type.enum\";\n\nexport class ConsoleLogService implements LogServiceAbstraction {\n  protected timersMap: Map<string, [number, number]> = new Map();\n\n  constructor(\n    protected isDev: boolean,\n    protected filter: (level: LogLevelType) => boolean = null,\n  ) {}\n\n  debug(message?: any, ...optionalParams: any[]) {\n    if (!this.isDev) {\n      return;\n    }\n    this.write(LogLevelType.Debug, message, ...optionalParams);\n  }\n\n  info(message?: any, ...optionalParams: any[]) {\n    this.write(LogLevelType.Info, message, ...optionalParams);\n  }\n\n  warning(message?: any, ...optionalParams: any[]) {\n    this.write(LogLevelType.Warning, message, ...optionalParams);\n  }\n\n  error(message?: any, ...optionalParams: any[]) {\n    this.write(LogLevelType.Error, message, ...optionalParams);\n  }\n\n  write(level: LogLevelType, message?: any, ...optionalParams: any[]) {\n    if (this.filter != null && this.filter(level)) {\n      return;\n    }\n\n    switch (level) {\n      case LogLevelType.Debug:\n        // eslint-disable-next-line\n        console.log(message, ...optionalParams);\n        break;\n      case LogLevelType.Info:\n        // eslint-disable-next-line\n        console.log(message, ...optionalParams);\n        break;\n      case LogLevelType.Warning:\n        // eslint-disable-next-line\n        console.warn(message, ...optionalParams);\n        break;\n      case LogLevelType.Error:\n        // eslint-disable-next-line\n        console.error(message, ...optionalParams);\n        break;\n      default:\n        break;\n    }\n  }\n}\n", "// FIXME: remove `src` and fix import\n// eslint-disable-next-line no-restricted-imports\nimport { KeyService } from \"../../../../key-management/src/abstractions/key.service\";\nimport { EncryptService } from \"../abstractions/encrypt.service\";\n\nexport class ContainerService {\n  constructor(\n    private keyService: KeyService,\n    private encryptService: EncryptService,\n  ) {}\n\n  attachToGlobal(global: any) {\n    if (!global.bitwardenContainerService) {\n      global.bitwardenContainerService = this;\n    }\n  }\n\n  /**\n   * @throws Will throw if KeyService was not instantiated and provided to the ContainerService constructor\n   */\n  getKeyService(): KeyService {\n    if (this.keyService == null) {\n      throw new Error(\"ContainerService.keyService not initialized.\");\n    }\n    return this.keyService;\n  }\n\n  /**\n   * @throws Will throw if EncryptService was not instantiated and provided to the ContainerService constructor\n   */\n  getEncryptService(): EncryptService {\n    if (this.encryptService == null) {\n      throw new Error(\"ContainerService.encryptService not initialized.\");\n    }\n    return this.encryptService;\n  }\n}\n", "import * as argon2 from \"argon2-browser\";\nimport * as forge from \"node-forge\";\n\nimport { Utils } from \"../../platform/misc/utils\";\nimport { CsprngArray } from \"../../types/csprng\";\nimport { CryptoFunctionService } from \"../abstractions/crypto-function.service\";\nimport { CbcDecryptParameters, EcbDecryptParameters } from \"../models/domain/decrypt-parameters\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\n\nexport class WebCryptoFunctionService implements CryptoFunctionService {\n  private crypto: Crypto;\n  private subtle: SubtleCrypto;\n  private wasmSupported: boolean;\n\n  constructor(globalContext: { crypto: Crypto }) {\n    if (globalContext?.crypto?.subtle == null) {\n      throw new Error(\n        \"Could not instantiate WebCryptoFunctionService. Could not locate Subtle crypto.\",\n      );\n    }\n    this.crypto = globalContext.crypto;\n    this.subtle = this.crypto.subtle;\n    this.wasmSupported = this.checkIfWasmSupported();\n  }\n\n  async pbkdf2(\n    password: string | Uint8Array,\n    salt: string | Uint8Array,\n    algorithm: \"sha256\" | \"sha512\",\n    iterations: number,\n  ): Promise<Uint8Array> {\n    const wcLen = algorithm === \"sha256\" ? 256 : 512;\n    const passwordBuf = this.toBuf(password);\n    const saltBuf = this.toBuf(salt);\n\n    const pbkdf2Params: Pbkdf2Params = {\n      name: \"PBKDF2\",\n      salt: saltBuf,\n      iterations: iterations,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\n      \"raw\",\n      passwordBuf,\n      { name: \"PBKDF2\" } as any,\n      false,\n      [\"deriveBits\"],\n    );\n    const buffer = await this.subtle.deriveBits(pbkdf2Params as any, impKey, wcLen);\n    return new Uint8Array(buffer);\n  }\n\n  async argon2(\n    password: string | Uint8Array,\n    salt: string | Uint8Array,\n    iterations: number,\n    memory: number,\n    parallelism: number,\n  ): Promise<Uint8Array> {\n    if (!this.wasmSupported) {\n      throw \"Webassembly support is required for the Argon2 KDF feature.\";\n    }\n\n    const passwordArr = new Uint8Array(this.toBuf(password));\n    const saltArr = new Uint8Array(this.toBuf(salt));\n\n    const result = await argon2.hash({\n      pass: passwordArr,\n      salt: saltArr,\n      time: iterations,\n      mem: memory,\n      parallelism: parallelism,\n      hashLen: 32,\n      type: argon2.ArgonType.Argon2id,\n    });\n    argon2.unloadRuntime();\n    return result.hash;\n  }\n\n  async hkdf(\n    ikm: Uint8Array,\n    salt: string | Uint8Array,\n    info: string | Uint8Array,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\",\n  ): Promise<Uint8Array> {\n    const saltBuf = this.toBuf(salt);\n    const infoBuf = this.toBuf(info);\n\n    const hkdfParams: HkdfParams = {\n      name: \"HKDF\",\n      salt: saltBuf,\n      info: infoBuf,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", ikm, { name: \"HKDF\" } as any, false, [\n      \"deriveBits\",\n    ]);\n    const buffer = await this.subtle.deriveBits(hkdfParams as any, impKey, outputByteSize * 8);\n    return new Uint8Array(buffer);\n  }\n\n  // ref: https://tools.ietf.org/html/rfc5869\n  async hkdfExpand(\n    prk: Uint8Array,\n    info: string | Uint8Array,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\",\n  ): Promise<Uint8Array> {\n    const hashLen = algorithm === \"sha256\" ? 32 : 64;\n    if (outputByteSize > 255 * hashLen) {\n      throw new Error(\"outputByteSize is too large.\");\n    }\n    const prkArr = new Uint8Array(prk);\n    if (prkArr.length < hashLen) {\n      throw new Error(\"prk is too small.\");\n    }\n    const infoBuf = this.toBuf(info);\n    const infoArr = new Uint8Array(infoBuf);\n    let runningOkmLength = 0;\n    let previousT = new Uint8Array(0);\n    const n = Math.ceil(outputByteSize / hashLen);\n    const okm = new Uint8Array(n * hashLen);\n    for (let i = 0; i < n; i++) {\n      const t = new Uint8Array(previousT.length + infoArr.length + 1);\n      t.set(previousT);\n      t.set(infoArr, previousT.length);\n      t.set([i + 1], t.length - 1);\n      previousT = new Uint8Array(await this.hmac(t, prk, algorithm));\n      okm.set(previousT, runningOkmLength);\n      runningOkmLength += previousT.length;\n      if (runningOkmLength >= outputByteSize) {\n        break;\n      }\n    }\n    return okm.slice(0, outputByteSize);\n  }\n\n  async hash(\n    value: string | Uint8Array,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\",\n  ): Promise<Uint8Array> {\n    if (algorithm === \"md5\") {\n      const md = forge.md.md5.create();\n      const valueBytes = this.toByteString(value);\n      md.update(valueBytes, \"raw\");\n      return Utils.fromByteStringToArray(md.digest().data);\n    }\n\n    const valueBuf = this.toBuf(value);\n    const buffer = await this.subtle.digest(\n      { name: this.toWebCryptoAlgorithm(algorithm) },\n      valueBuf,\n    );\n    return new Uint8Array(buffer);\n  }\n\n  async hmac(\n    value: Uint8Array,\n    key: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\",\n  ): Promise<Uint8Array> {\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", key, signingAlgorithm, false, [\"sign\"]);\n    const buffer = await this.subtle.sign(signingAlgorithm, impKey, value);\n    return new Uint8Array(buffer);\n  }\n\n  // Safely compare two values in a way that protects against timing attacks (Double HMAC Verification).\n  // ref: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\n  // ref: https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy\n  async compare(a: Uint8Array, b: Uint8Array): Promise<boolean> {\n    const macKey = await this.randomBytes(32);\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    };\n    const impKey = await this.subtle.importKey(\"raw\", macKey, signingAlgorithm, false, [\"sign\"]);\n    const mac1 = await this.subtle.sign(signingAlgorithm, impKey, a);\n    const mac2 = await this.subtle.sign(signingAlgorithm, impKey, b);\n\n    if (mac1.byteLength !== mac2.byteLength) {\n      return false;\n    }\n\n    const arr1 = new Uint8Array(mac1);\n    const arr2 = new Uint8Array(mac2);\n    for (let i = 0; i < arr2.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  hmacFast(value: string, key: string, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hmac = forge.hmac.create();\n    hmac.start(algorithm, key);\n    hmac.update(value);\n    const bytes = hmac.digest().getBytes();\n    return Promise.resolve(bytes);\n  }\n\n  async compareFast(a: string, b: string): Promise<boolean> {\n    const rand = await this.randomBytes(32);\n    const bytes = new Uint32Array(rand);\n    const buffer = forge.util.createBuffer();\n    for (let i = 0; i < bytes.length; i++) {\n      buffer.putInt32(bytes[i]);\n    }\n    const macKey = buffer.getBytes();\n\n    const hmac = forge.hmac.create();\n    hmac.start(\"sha256\", macKey);\n    hmac.update(a);\n    const mac1 = hmac.digest().getBytes();\n\n    hmac.start(\"sha256\", null);\n    hmac.update(b);\n    const mac2 = hmac.digest().getBytes();\n\n    const equals = mac1 === mac2;\n    return equals;\n  }\n\n  async aesEncrypt(data: Uint8Array, iv: Uint8Array, key: Uint8Array): Promise<Uint8Array> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"encrypt\",\n    ]);\n    const buffer = await this.subtle.encrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  aesDecryptFastParameters(\n    data: string,\n    iv: string,\n    mac: string | null,\n    key: SymmetricCryptoKey,\n  ): CbcDecryptParameters<string> {\n    const p = {} as CbcDecryptParameters<string>;\n    if (key.meta != null) {\n      p.encKey = key.meta.encKeyByteString;\n      p.macKey = key.meta.macKeyByteString;\n    }\n\n    if (p.encKey == null) {\n      p.encKey = forge.util.decode64(key.encKeyB64);\n    }\n    p.data = forge.util.decode64(data);\n    p.iv = forge.util.decode64(iv);\n    p.macData = p.iv + p.data;\n    if (p.macKey == null && key.macKeyB64 != null) {\n      p.macKey = forge.util.decode64(key.macKeyB64);\n    }\n    if (mac != null) {\n      p.mac = forge.util.decode64(mac);\n    }\n\n    // cache byte string keys for later\n    if (key.meta == null) {\n      key.meta = {};\n    }\n    if (key.meta.encKeyByteString == null) {\n      key.meta.encKeyByteString = p.encKey;\n    }\n    if (p.macKey != null && key.meta.macKeyByteString == null) {\n      key.meta.macKeyByteString = p.macKey;\n    }\n\n    return p;\n  }\n\n  aesDecryptFast({\n    mode,\n    parameters,\n  }:\n    | { mode: \"cbc\"; parameters: CbcDecryptParameters<string> }\n    | { mode: \"ecb\"; parameters: EcbDecryptParameters<string> }): Promise<string> {\n    const decipher = (forge as any).cipher.createDecipher(\n      this.toWebCryptoAesMode(mode),\n      parameters.encKey,\n    );\n    const options = {} as any;\n    if (mode === \"cbc\") {\n      options.iv = parameters.iv;\n    }\n    const dataBuffer = (forge as any).util.createBuffer(parameters.data);\n    decipher.start(options);\n    decipher.update(dataBuffer);\n    decipher.finish();\n    const val = decipher.output.toString();\n    return Promise.resolve(val);\n  }\n\n  async aesDecrypt(\n    data: Uint8Array,\n    iv: Uint8Array | null,\n    key: Uint8Array,\n    mode: \"cbc\" | \"ecb\",\n  ): Promise<Uint8Array> {\n    if (mode === \"ecb\") {\n      // Web crypto does not support AES-ECB mode, so we need to do this in forge.\n      const parameters: EcbDecryptParameters<string> = {\n        data: this.toByteString(data),\n        encKey: this.toByteString(key),\n      };\n      const result = await this.aesDecryptFast({ mode: \"ecb\", parameters });\n      return Utils.fromByteStringToArray(result);\n    }\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"decrypt\",\n    ]);\n\n    // CBC\n    if (iv == null) {\n      throw new Error(\"IV is required for CBC mode.\");\n    }\n    const buffer = await this.subtle.decrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaEncrypt(\n    data: Uint8Array,\n    publicKey: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\",\n  ): Promise<Uint8Array> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"spki\", publicKey, rsaParams, false, [\"encrypt\"]);\n    const buffer = await this.subtle.encrypt(rsaParams, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaDecrypt(\n    data: Uint8Array,\n    privateKey: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\",\n  ): Promise<Uint8Array> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, false, [\"decrypt\"]);\n    const buffer = await this.subtle.decrypt(rsaParams, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaExtractPublicKey(privateKey: Uint8Array): Promise<Uint8Array> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const impPrivateKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, true, [\n      \"decrypt\",\n    ]);\n    const jwkPrivateKey = await this.subtle.exportKey(\"jwk\", impPrivateKey);\n    const jwkPublicKeyParams = {\n      kty: \"RSA\",\n      e: jwkPrivateKey.e,\n      n: jwkPrivateKey.n,\n      alg: \"RSA-OAEP\",\n      ext: true,\n    };\n    const impPublicKey = await this.subtle.importKey(\"jwk\", jwkPublicKeyParams, rsaParams, true, [\n      \"encrypt\",\n    ]);\n    const buffer = await this.subtle.exportKey(\"spki\", impPublicKey);\n    return new Uint8Array(buffer);\n  }\n\n  async aesGenerateKey(bitLength = 128 | 192 | 256 | 512): Promise<CsprngArray> {\n    if (bitLength === 512) {\n      // 512 bit keys are not supported in WebCrypto, so we concat two 256 bit keys\n      const key1 = await this.aesGenerateKey(256);\n      const key2 = await this.aesGenerateKey(256);\n      return new Uint8Array([...key1, ...key2]) as CsprngArray;\n    }\n    const aesParams = {\n      name: \"AES-CBC\",\n      length: bitLength,\n    };\n\n    const key = await this.subtle.generateKey(aesParams, true, [\"encrypt\", \"decrypt\"]);\n    const rawKey = await this.subtle.exportKey(\"raw\", key);\n    return new Uint8Array(rawKey) as CsprngArray;\n  }\n\n  async rsaGenerateKeyPair(length: 1024 | 2048 | 4096): Promise<[Uint8Array, Uint8Array]> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      modulusLength: length,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const keyPair = await this.subtle.generateKey(rsaParams, true, [\"encrypt\", \"decrypt\"]);\n    const publicKey = await this.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const privateKey = await this.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    return [new Uint8Array(publicKey), new Uint8Array(privateKey)];\n  }\n\n  randomBytes(length: number): Promise<CsprngArray> {\n    const arr = new Uint8Array(length);\n    this.crypto.getRandomValues(arr);\n    return Promise.resolve(arr as CsprngArray);\n  }\n\n  private toBuf(value: string | Uint8Array): Uint8Array {\n    let buf: Uint8Array;\n    if (typeof value === \"string\") {\n      buf = Utils.fromUtf8ToArray(value);\n    } else {\n      buf = value;\n    }\n    return buf;\n  }\n\n  private toByteString(value: string | Uint8Array): string {\n    let bytes: string;\n    if (typeof value === \"string\") {\n      bytes = forge.util.encodeUtf8(value);\n    } else {\n      bytes = Utils.fromBufferToByteString(value);\n    }\n    return bytes;\n  }\n\n  private toWebCryptoAlgorithm(algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"): string {\n    if (algorithm === \"md5\") {\n      throw new Error(\"MD5 is not supported in WebCrypto.\");\n    }\n    return algorithm === \"sha1\" ? \"SHA-1\" : algorithm === \"sha256\" ? \"SHA-256\" : \"SHA-512\";\n  }\n\n  private toWebCryptoAesMode(mode: \"cbc\" | \"ecb\"): string {\n    return mode === \"cbc\" ? \"AES-CBC\" : \"AES-ECB\";\n  }\n\n  // ref: https://stackoverflow.com/a/47880734/1090359\n  private checkIfWasmSupported(): boolean {\n    try {\n      if (typeof WebAssembly === \"object\" && typeof WebAssembly.instantiate === \"function\") {\n        const module = new WebAssembly.Module(\n          Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00),\n        );\n        if (module instanceof WebAssembly.Module) {\n          return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;\n        }\n      }\n    } catch {\n      return false;\n    }\n    return false;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncryptionType } from \"../../enums\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\n\nconst ENC_TYPE_LENGTH = 1;\nconst IV_LENGTH = 16;\nconst MAC_LENGTH = 32;\nconst MIN_DATA_LENGTH = 1;\n\nexport class EncArrayBuffer implements Encrypted {\n  readonly encryptionType: EncryptionType = null;\n  readonly dataBytes: Uint8Array = null;\n  readonly ivBytes: Uint8Array = null;\n  readonly macBytes: Uint8Array = null;\n\n  constructor(readonly buffer: Uint8Array) {\n    const encBytes = buffer;\n    const encType = encBytes[0];\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH);\n        this.macBytes = encBytes.slice(\n          ENC_TYPE_LENGTH + IV_LENGTH,\n          ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH,\n        );\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH);\n        break;\n      }\n      case EncryptionType.AesCbc256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH);\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH);\n        break;\n      }\n      default:\n        this.throwDecryptionError();\n    }\n\n    this.encryptionType = encType;\n  }\n\n  private throwDecryptionError() {\n    throw new Error(\n      \"Error parsing encrypted ArrayBuffer: data is corrupted or has an invalid format.\",\n    );\n  }\n\n  static async fromResponse(response: {\n    arrayBuffer: () => Promise<ArrayBuffer>;\n  }): Promise<EncArrayBuffer> {\n    const buffer = await response.arrayBuffer();\n    if (buffer == null) {\n      throw new Error(\"Cannot create EncArrayBuffer from Response - Response is empty\");\n    }\n    return new EncArrayBuffer(new Uint8Array(buffer));\n  }\n\n  static fromB64(b64: string) {\n    const buffer = Utils.fromB64ToArray(b64);\n    return new EncArrayBuffer(buffer);\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify, Opaque } from \"type-fest\";\n\nimport { EncryptService } from \"../../abstractions/encrypt.service\";\nimport { EncryptionType, EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE } from \"../../enums\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { SymmetricCryptoKey } from \"./symmetric-crypto-key\";\n\nexport const DECRYPT_ERROR = \"[error: cannot decrypt]\";\n\nexport class EncString implements Encrypted {\n  encryptedString?: EncryptedString;\n  encryptionType?: EncryptionType;\n  decryptedValue?: string;\n  data?: string;\n  iv?: string;\n  mac?: string;\n\n  constructor(\n    encryptedStringOrType: string | EncryptionType,\n    data?: string,\n    iv?: string,\n    mac?: string,\n  ) {\n    if (data != null) {\n      this.initFromData(encryptedStringOrType as EncryptionType, data, iv, mac);\n    } else {\n      this.initFromEncryptedString(encryptedStringOrType as string);\n    }\n  }\n\n  get ivBytes(): Uint8Array {\n    return this.iv == null ? null : Utils.fromB64ToArray(this.iv);\n  }\n\n  get macBytes(): Uint8Array {\n    return this.mac == null ? null : Utils.fromB64ToArray(this.mac);\n  }\n\n  get dataBytes(): Uint8Array {\n    return this.data == null ? null : Utils.fromB64ToArray(this.data);\n  }\n\n  toJSON() {\n    return this.encryptedString as string;\n  }\n\n  static fromJSON(obj: Jsonify<EncString>): EncString {\n    if (obj == null) {\n      return null;\n    }\n\n    return new EncString(obj);\n  }\n\n  private initFromData(encType: EncryptionType, data: string, iv: string, mac: string) {\n    if (iv != null) {\n      this.encryptedString = (encType + \".\" + iv + \"|\" + data) as EncryptedString;\n    } else {\n      this.encryptedString = (encType + \".\" + data) as EncryptedString;\n    }\n\n    // mac\n    if (mac != null) {\n      this.encryptedString = (this.encryptedString + \"|\" + mac) as EncryptedString;\n    }\n\n    this.encryptionType = encType;\n    this.data = data;\n    this.iv = iv;\n    this.mac = mac;\n  }\n\n  private initFromEncryptedString(encryptedString: string) {\n    this.encryptedString = encryptedString as EncryptedString;\n    if (!this.encryptedString) {\n      return;\n    }\n\n    const { encType, encPieces } = EncString.parseEncryptedString(this.encryptedString);\n\n    this.encryptionType = encType;\n\n    if (encPieces.length !== EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE[encType]) {\n      return;\n    }\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        this.mac = encPieces[2];\n        break;\n      case EncryptionType.AesCbc256_B64:\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n        this.data = encPieces[0];\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        this.data = encPieces[0];\n        this.mac = encPieces[1];\n        break;\n      default:\n        return;\n    }\n  }\n\n  private static parseEncryptedString(encryptedString: string): {\n    encType: EncryptionType;\n    encPieces: string[];\n  } {\n    const headerPieces = encryptedString.split(\".\");\n    let encType: EncryptionType;\n    let encPieces: string[] = null;\n\n    if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        return { encType: NaN, encPieces: [] };\n      }\n    } else {\n      encPieces = encryptedString.split(\"|\");\n      encType =\n        encPieces.length === 3\n          ? EncryptionType.AesCbc128_HmacSha256_B64\n          : EncryptionType.AesCbc256_B64;\n    }\n\n    return {\n      encType,\n      encPieces,\n    };\n  }\n\n  static isSerializedEncString(s: string): boolean {\n    if (s == null) {\n      return false;\n    }\n\n    const { encType, encPieces } = this.parseEncryptedString(s);\n\n    if (isNaN(encType) || encPieces.length === 0) {\n      return false;\n    }\n\n    return EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE[encType] === encPieces.length;\n  }\n\n  async decrypt(orgId: string, key: SymmetricCryptoKey = null, context?: string): Promise<string> {\n    if (this.decryptedValue != null) {\n      return this.decryptedValue;\n    }\n\n    let decryptTrace = \"provided-key\";\n    try {\n      if (key == null) {\n        key = await this.getKeyForDecryption(orgId);\n        decryptTrace = orgId == null ? `domain-orgkey-${orgId}` : \"domain-userkey|masterkey\";\n        if (orgId != null) {\n          decryptTrace = `domain-orgkey-${orgId}`;\n        } else {\n          const cryptoService = Utils.getContainerService().getKeyService();\n          decryptTrace =\n            (await cryptoService.getUserKey()) == null\n              ? \"domain-withlegacysupport-masterkey\"\n              : \"domain-withlegacysupport-userkey\";\n        }\n      }\n      if (key == null) {\n        throw new Error(\"No key to decrypt EncString with orgId \" + orgId);\n      }\n\n      const encryptService = Utils.getContainerService().getEncryptService();\n      this.decryptedValue = await encryptService.decryptToUtf8(\n        this,\n        key,\n        decryptTrace == null ? context : `${decryptTrace}${context || \"\"}`,\n      );\n    } catch (e) {\n      this.decryptedValue = DECRYPT_ERROR;\n    }\n    return this.decryptedValue;\n  }\n\n  async decryptWithKey(\n    key: SymmetricCryptoKey,\n    encryptService: EncryptService,\n    decryptTrace: string = \"domain-withkey\",\n  ): Promise<string> {\n    try {\n      if (key == null) {\n        throw new Error(\"No key to decrypt EncString\");\n      }\n\n      this.decryptedValue = await encryptService.decryptToUtf8(this, key, decryptTrace);\n    } catch (e) {\n      this.decryptedValue = DECRYPT_ERROR;\n    }\n\n    return this.decryptedValue;\n  }\n  private async getKeyForDecryption(orgId: string) {\n    const keyService = Utils.getContainerService().getKeyService();\n    return orgId != null\n      ? await keyService.getOrgKey(orgId)\n      : await keyService.getUserKeyWithLegacySupport();\n  }\n}\n\nexport type EncryptedString = Opaque<string, \"EncString\">;\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\n\nexport class EncryptedObject {\n  iv: Uint8Array;\n  data: Uint8Array;\n  mac: Uint8Array;\n  key: SymmetricCryptoKey;\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { CryptoFunctionService } from \"../../abstractions/crypto-function.service\";\nimport { EncryptService } from \"../../abstractions/encrypt.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { EncryptionType, encryptionTypeToString as encryptionTypeName } from \"../../enums\";\nimport { Decryptable } from \"../../interfaces/decryptable.interface\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\nimport { EncString } from \"../../models/domain/enc-string\";\nimport { EncryptedObject } from \"../../models/domain/encrypted-object\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\n\nexport class EncryptServiceImplementation implements EncryptService {\n  constructor(\n    protected cryptoFunctionService: CryptoFunctionService,\n    protected logService: LogService,\n    protected logMacFailures: boolean,\n  ) {}\n\n  async encrypt(plainValue: string | Uint8Array, key: SymmetricCryptoKey): Promise<EncString> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (plainValue == null) {\n      return Promise.resolve(null);\n    }\n\n    let plainBuf: Uint8Array;\n    if (typeof plainValue === \"string\") {\n      plainBuf = Utils.fromUtf8ToArray(plainValue);\n    } else {\n      plainBuf = plainValue;\n    }\n\n    const encObj = await this.aesEncrypt(plainBuf, key);\n    const iv = Utils.fromBufferToB64(encObj.iv);\n    const data = Utils.fromBufferToB64(encObj.data);\n    const mac = encObj.mac != null ? Utils.fromBufferToB64(encObj.mac) : null;\n    return new EncString(encObj.key.encType, data, iv, mac);\n  }\n\n  async encryptToBytes(plainValue: Uint8Array, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    const encValue = await this.aesEncrypt(plainValue, key);\n    let macLen = 0;\n    if (encValue.mac != null) {\n      macLen = encValue.mac.byteLength;\n    }\n\n    const encBytes = new Uint8Array(1 + encValue.iv.byteLength + macLen + encValue.data.byteLength);\n    encBytes.set([encValue.key.encType]);\n    encBytes.set(new Uint8Array(encValue.iv), 1);\n    if (encValue.mac != null) {\n      encBytes.set(new Uint8Array(encValue.mac), 1 + encValue.iv.byteLength);\n    }\n\n    encBytes.set(new Uint8Array(encValue.data), 1 + encValue.iv.byteLength + macLen);\n    return new EncArrayBuffer(encBytes);\n  }\n\n  async decryptToUtf8(\n    encString: EncString,\n    key: SymmetricCryptoKey,\n    decryptContext: string = \"no context\",\n  ): Promise<string> {\n    if (key == null) {\n      throw new Error(\"No key provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encString);\n\n    // DO NOT REMOVE OR MOVE. This prevents downgrade to mac-less CBC, which would compromise integrity and confidentiality.\n    if (key.macKey != null && encString?.mac == null) {\n      this.logService.error(\n        \"[Encrypt service] Key has mac key but payload is missing mac bytes. Key type \" +\n          encryptionTypeName(key.encType) +\n          \"Payload type \" +\n          encryptionTypeName(encString.encryptionType),\n        \"Decrypt context: \" + decryptContext,\n      );\n      return null;\n    }\n\n    if (key.encType !== encString.encryptionType) {\n      this.logService.error(\n        \"[Encrypt service] Key encryption type does not match payload encryption type. Key type \" +\n          encryptionTypeName(key.encType) +\n          \"Payload type \" +\n          encryptionTypeName(encString.encryptionType),\n        \"Decrypt context: \" + decryptContext,\n      );\n      return null;\n    }\n\n    const fastParams = this.cryptoFunctionService.aesDecryptFastParameters(\n      encString.data,\n      encString.iv,\n      encString.mac,\n      key,\n    );\n    if (fastParams.macKey != null && fastParams.mac != null) {\n      const computedMac = await this.cryptoFunctionService.hmacFast(\n        fastParams.macData,\n        fastParams.macKey,\n        \"sha256\",\n      );\n      const macsEqual = await this.cryptoFunctionService.compareFast(fastParams.mac, computedMac);\n      if (!macsEqual) {\n        this.logMacFailed(\n          \"[Encrypt service] decryptToUtf8 MAC comparison failed. Key or payload has changed. Key type \" +\n            encryptionTypeName(key.encType) +\n            \"Payload type \" +\n            encryptionTypeName(encString.encryptionType) +\n            \" Decrypt context: \" +\n            decryptContext,\n        );\n        return null;\n      }\n    }\n\n    return await this.cryptoFunctionService.aesDecryptFast({ mode: \"cbc\", parameters: fastParams });\n  }\n\n  async decryptToBytes(\n    encThing: Encrypted,\n    key: SymmetricCryptoKey,\n    decryptContext: string = \"no context\",\n  ): Promise<Uint8Array> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (encThing == null) {\n      throw new Error(\"Nothing provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encThing);\n\n    // DO NOT REMOVE OR MOVE. This prevents downgrade to mac-less CBC, which would compromise integrity and confidentiality.\n    if (key.macKey != null && encThing.macBytes == null) {\n      this.logService.error(\n        \"[Encrypt service] Key has mac key but payload is missing mac bytes. Key type \" +\n          encryptionTypeName(key.encType) +\n          \" Payload type \" +\n          encryptionTypeName(encThing.encryptionType) +\n          \" Decrypt context: \" +\n          decryptContext,\n      );\n      return null;\n    }\n\n    if (key.encType !== encThing.encryptionType) {\n      this.logService.error(\n        \"[Encrypt service] Key encryption type does not match payload encryption type. Key type \" +\n          encryptionTypeName(key.encType) +\n          \" Payload type \" +\n          encryptionTypeName(encThing.encryptionType) +\n          \" Decrypt context: \" +\n          decryptContext,\n      );\n      return null;\n    }\n\n    if (key.macKey != null && encThing.macBytes != null) {\n      const macData = new Uint8Array(encThing.ivBytes.byteLength + encThing.dataBytes.byteLength);\n      macData.set(new Uint8Array(encThing.ivBytes), 0);\n      macData.set(new Uint8Array(encThing.dataBytes), encThing.ivBytes.byteLength);\n      const computedMac = await this.cryptoFunctionService.hmac(macData, key.macKey, \"sha256\");\n      if (computedMac === null) {\n        this.logMacFailed(\n          \"[Encrypt service#decryptToBytes] Failed to compute MAC.\" +\n            \" Key type \" +\n            encryptionTypeName(key.encType) +\n            \" Payload type \" +\n            encryptionTypeName(encThing.encryptionType) +\n            \" Decrypt context: \" +\n            decryptContext,\n        );\n        return null;\n      }\n\n      const macsMatch = await this.cryptoFunctionService.compare(encThing.macBytes, computedMac);\n      if (!macsMatch) {\n        this.logMacFailed(\n          \"[Encrypt service#decryptToBytes]: MAC comparison failed. Key or payload has changed.\" +\n            \" Key type \" +\n            encryptionTypeName(key.encType) +\n            \" Payload type \" +\n            encryptionTypeName(encThing.encryptionType) +\n            \" Decrypt context: \" +\n            decryptContext,\n        );\n        return null;\n      }\n    }\n\n    const result = await this.cryptoFunctionService.aesDecrypt(\n      encThing.dataBytes,\n      encThing.ivBytes,\n      key.encKey,\n      \"cbc\",\n    );\n\n    return result ?? null;\n  }\n\n  async rsaEncrypt(data: Uint8Array, publicKey: Uint8Array): Promise<EncString> {\n    if (data == null) {\n      throw new Error(\"No data provided for encryption.\");\n    }\n\n    if (publicKey == null) {\n      throw new Error(\"No public key provided for encryption.\");\n    }\n    const encrypted = await this.cryptoFunctionService.rsaEncrypt(data, publicKey, \"sha1\");\n    return new EncString(EncryptionType.Rsa2048_OaepSha1_B64, Utils.fromBufferToB64(encrypted));\n  }\n\n  async rsaDecrypt(data: EncString, privateKey: Uint8Array): Promise<Uint8Array> {\n    if (data == null) {\n      throw new Error(\"[Encrypt service] rsaDecrypt: No data provided for decryption.\");\n    }\n\n    let algorithm: \"sha1\" | \"sha256\";\n    switch (data.encryptionType) {\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        algorithm = \"sha1\";\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n        algorithm = \"sha256\";\n        break;\n      default:\n        throw new Error(\"Invalid encryption type.\");\n    }\n\n    if (privateKey == null) {\n      throw new Error(\"[Encrypt service] rsaDecrypt: No private key provided for decryption.\");\n    }\n\n    return this.cryptoFunctionService.rsaDecrypt(data.dataBytes, privateKey, algorithm);\n  }\n\n  /**\n   * @deprecated Replaced by BulkEncryptService (PM-4154)\n   */\n  async decryptItems<T extends InitializerMetadata>(\n    items: Decryptable<T>[],\n    key: SymmetricCryptoKey,\n  ): Promise<T[]> {\n    if (items == null || items.length < 1) {\n      return [];\n    }\n\n    // don't use promise.all because this task is not io bound\n    const results = [];\n    for (let i = 0; i < items.length; i++) {\n      results.push(await items[i].decrypt(key));\n    }\n    return results;\n  }\n\n  async hash(value: string | Uint8Array, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hashArray = await this.cryptoFunctionService.hash(value, algorithm);\n    return Utils.fromBufferToB64(hashArray);\n  }\n\n  private async aesEncrypt(data: Uint8Array, key: SymmetricCryptoKey): Promise<EncryptedObject> {\n    const obj = new EncryptedObject();\n    obj.key = key;\n    obj.iv = await this.cryptoFunctionService.randomBytes(16);\n    obj.data = await this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);\n\n    if (obj.key.macKey != null) {\n      const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);\n      macData.set(new Uint8Array(obj.iv), 0);\n      macData.set(new Uint8Array(obj.data), obj.iv.byteLength);\n      obj.mac = await this.cryptoFunctionService.hmac(macData, obj.key.macKey, \"sha256\");\n    }\n\n    return obj;\n  }\n\n  private logMacFailed(msg: string) {\n    if (this.logMacFailures) {\n      this.logService.error(msg);\n    }\n  }\n\n  /**\n   * Transform into new key for the old encrypt-then-mac scheme if required, otherwise return the current key unchanged\n   * @param encThing The encrypted object (e.g. encString or encArrayBuffer) that you want to decrypt\n   */\n  resolveLegacyKey(key: SymmetricCryptoKey, encThing: Encrypted): SymmetricCryptoKey {\n    if (\n      encThing.encryptionType === EncryptionType.AesCbc128_HmacSha256_B64 &&\n      key.encType === EncryptionType.AesCbc256_B64\n    ) {\n      return new SymmetricCryptoKey(key.key, EncryptionType.AesCbc128_HmacSha256_B64);\n    }\n\n    return key;\n  }\n}\n", "export enum InitializerKey {\n  Cipher = 0,\n  CipherView = 1,\n}\n", "export enum CipherType {\n  Login = 1,\n  SecureNote = 2,\n  Card = 3,\n  Identity = 4,\n  SshKey = 5,\n}\n", "export enum CipherRepromptType {\n  None = 0,\n  Password = 1,\n}\n", "export enum FieldType {\n  Text = 0,\n  Hidden = 1,\n  Boolean = 2,\n  Linked = 3,\n}\n", "export type LinkedIdType = LoginLinkedId | CardLinkedId | IdentityLinkedId;\n\n// LoginView\nexport enum LoginLinkedId {\n  Username = 100,\n  Password = 101,\n}\n\n// CardView\nexport enum CardLinkedId {\n  CardholderName = 300,\n  ExpMonth = 301,\n  ExpYear = 302,\n  Code = 303,\n  Brand = 304,\n  Number = 305,\n}\n\n// IdentityView\nexport enum IdentityLinkedId {\n  Title = 400,\n  MiddleName = 401,\n  Address1 = 402,\n  Address2 = 403,\n  Address3 = 404,\n  City = 405,\n  State = 406,\n  PostalCode = 407,\n  Country = 408,\n  Company = 409,\n  Email = 410,\n  Phone = 411,\n  Ssn = 412,\n  Username = 413,\n  PassportNumber = 414,\n  LicenseNumber = 415,\n  FirstName = 416,\n  LastName = 417,\n  FullName = 418,\n}\n", "export enum SecureNoteType {\n  Generic = 0,\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { ConditionalExcept, ConditionalKeys, Constructor } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { EncryptService } from \"../../abstractions/encrypt.service\";\n\nimport { EncString } from \"./enc-string\";\nimport { SymmetricCryptoKey } from \"./symmetric-crypto-key\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype EncStringKeys<T> = ConditionalKeys<ConditionalExcept<T, Function>, EncString>;\nexport type DecryptedObject<\n  TEncryptedObject,\n  TDecryptedKeys extends EncStringKeys<TEncryptedObject>,\n> = Record<TDecryptedKeys, string> & Omit<TEncryptedObject, TDecryptedKeys>;\n\n// https://contributing.bitwarden.com/architecture/clients/data-model#domain\nexport default class Domain {\n  protected buildDomainModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncList: any[] = [],\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = dataObj[map[prop] || prop];\n      if (notEncList.indexOf(prop) > -1) {\n        (domain as any)[prop] = objProp ? objProp : null;\n      } else {\n        (domain as any)[prop] = objProp ? new EncString(objProp) : null;\n      }\n    }\n  }\n  protected buildDataModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncStringList: any[] = [],\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = (domain as any)[map[prop] || prop];\n      if (notEncStringList.indexOf(prop) > -1) {\n        (dataObj as any)[prop] = objProp != null ? objProp : null;\n      } else {\n        (dataObj as any)[prop] = objProp != null ? (objProp as EncString).encryptedString : null;\n      }\n    }\n  }\n\n  protected async decryptObj<T extends View>(\n    viewModel: T,\n    map: any,\n    orgId: string,\n    key: SymmetricCryptoKey = null,\n    objectContext: string = \"No Domain Context\",\n  ): Promise<T> {\n    const promises = [];\n    const self: any = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp) {\n        const p = Promise.resolve()\n          .then(() => {\n            const mapProp = map[theProp] || theProp;\n            if (self[mapProp]) {\n              return self[mapProp].decrypt(\n                orgId,\n                key,\n                `Property: ${prop}; ObjectContext: ${objectContext}`,\n              );\n            }\n            return null;\n          })\n          .then((val: any) => {\n            (viewModel as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop);\n    }\n\n    await Promise.all(promises);\n    return viewModel;\n  }\n\n  /**\n   * Decrypts the requested properties of the domain object with the provided key and encrypt service.\n   *\n   * If a property is null, the result will be null.\n   * @see {@link EncString.decryptWithKey} for more details on decryption behavior.\n   *\n   * @param encryptedProperties The properties to decrypt. Type restricted to EncString properties of the domain object.\n   * @param key The key to use for decryption.\n   * @param encryptService The encryption service to use for decryption.\n   * @param _ The constructor of the domain object. Used for type inference if the domain object is not automatically inferred.\n   * @returns An object with the requested properties decrypted and the rest of the domain object untouched.\n   */\n  protected async decryptObjWithKey<\n    TThis extends Domain,\n    const TEncryptedKeys extends EncStringKeys<TThis>,\n  >(\n    this: TThis,\n    encryptedProperties: TEncryptedKeys[],\n    key: SymmetricCryptoKey,\n    encryptService: EncryptService,\n    _: Constructor<TThis> = this.constructor as Constructor<TThis>,\n    objectContext: string = \"No Domain Context\",\n  ): Promise<DecryptedObject<TThis, TEncryptedKeys>> {\n    const promises = [];\n\n    for (const prop of encryptedProperties) {\n      const value = (this as any)[prop] as EncString;\n      promises.push(\n        this.decryptProperty(\n          prop,\n          value,\n          key,\n          encryptService,\n          `Property: ${prop.toString()}; ObjectContext: ${objectContext}`,\n        ),\n      );\n    }\n\n    const decryptedObjects = await Promise.all(promises);\n    const decryptedObject = decryptedObjects.reduce(\n      (acc, obj) => {\n        return { ...acc, ...obj };\n      },\n      { ...this },\n    );\n    return decryptedObject as DecryptedObject<TThis, TEncryptedKeys>;\n  }\n\n  private async decryptProperty<const TEncryptedKeys extends EncStringKeys<this>>(\n    propertyKey: TEncryptedKeys,\n    value: EncString,\n    key: SymmetricCryptoKey,\n    encryptService: EncryptService,\n    decryptTrace: string,\n  ) {\n    let decrypted: string = null;\n    if (value) {\n      decrypted = await value.decryptWithKey(key, encryptService, decryptTrace);\n    } else {\n      decrypted = null;\n    }\n    return {\n      [propertyKey]: decrypted,\n    };\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { AttachmentResponse } from \"../response/attachment.response\";\n\nexport class AttachmentData {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response?: AttachmentResponse) {\n    if (response == null) {\n      return;\n    }\n    this.id = response.id;\n    this.url = response.url;\n    this.fileName = response.fileName;\n    this.key = response.key;\n    this.size = response.size;\n    this.sizeName = response.sizeName;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { CardApi } from \"../api/card.api\";\n\nexport class CardData {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data?: CardApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.cardholderName = data.cardholderName;\n    this.brand = data.brand;\n    this.number = data.number;\n    this.expMonth = data.expMonth;\n    this.expYear = data.expYear;\n    this.code = data.code;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { FieldType, LinkedIdType } from \"../../enums\";\nimport { FieldApi } from \"../api/field.api\";\n\nexport class FieldData {\n  type: FieldType;\n  name: string;\n  value: string;\n  linkedId: LinkedIdType;\n\n  constructor(response?: FieldApi) {\n    if (response == null) {\n      return;\n    }\n    this.type = response.type;\n    this.name = response.name;\n    this.value = response.value;\n    this.linkedId = response.linkedId;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { IdentityApi } from \"../api/identity.api\";\n\nexport class IdentityData {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data?: IdentityApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.title = data.title;\n    this.firstName = data.firstName;\n    this.middleName = data.middleName;\n    this.lastName = data.lastName;\n    this.address1 = data.address1;\n    this.address2 = data.address2;\n    this.address3 = data.address3;\n    this.city = data.city;\n    this.state = data.state;\n    this.postalCode = data.postalCode;\n    this.country = data.country;\n    this.company = data.company;\n    this.email = data.email;\n    this.phone = data.phone;\n    this.ssn = data.ssn;\n    this.username = data.username;\n    this.passportNumber = data.passportNumber;\n    this.licenseNumber = data.licenseNumber;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Fido2CredentialApi } from \"../api/fido2-credential.api\";\n\nexport class Fido2CredentialData {\n  credentialId: string;\n  keyType: \"public-key\";\n  keyAlgorithm: \"ECDSA\";\n  keyCurve: \"P-256\";\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  userName: string;\n  counter: string;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: string;\n  creationDate: string;\n\n  constructor(data?: Fido2CredentialApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.credentialId = data.credentialId;\n    this.keyType = data.keyType;\n    this.keyAlgorithm = data.keyAlgorithm;\n    this.keyCurve = data.keyCurve;\n    this.keyValue = data.keyValue;\n    this.rpId = data.rpId;\n    this.userHandle = data.userHandle;\n    this.userName = data.userName;\n    this.counter = data.counter;\n    this.rpName = data.rpName;\n    this.userDisplayName = data.userDisplayName;\n    this.discoverable = data.discoverable;\n    this.creationDate = data.creationDate;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { LoginUriApi } from \"../api/login-uri.api\";\n\nexport class LoginUriData {\n  uri: string;\n  uriChecksum: string;\n  match: UriMatchStrategySetting = null;\n\n  constructor(data?: LoginUriApi) {\n    if (data == null) {\n      return;\n    }\n    this.uri = data.uri;\n    this.uriChecksum = data.uriChecksum;\n    this.match = data.match;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { LoginApi } from \"../api/login.api\";\n\nimport { Fido2CredentialData } from \"./fido2-credential.data\";\nimport { LoginUriData } from \"./login-uri.data\";\n\nexport class LoginData {\n  uris: LoginUriData[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n  fido2Credentials?: Fido2CredentialData[];\n\n  constructor(data?: LoginApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.username = data.username;\n    this.password = data.password;\n    this.passwordRevisionDate = data.passwordRevisionDate;\n    this.totp = data.totp;\n    this.autofillOnPageLoad = data.autofillOnPageLoad;\n\n    if (data.uris) {\n      this.uris = data.uris.map((u) => new LoginUriData(u));\n    }\n\n    if (data.fido2Credentials) {\n      this.fido2Credentials = data.fido2Credentials?.map((key) => new Fido2CredentialData(key));\n    }\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { PasswordHistoryResponse } from \"../response/password-history.response\";\n\nexport class PasswordHistoryData {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response?: PasswordHistoryResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.password = response.password;\n    this.lastUsedDate = response.lastUsedDate;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { SecureNoteType } from \"../../enums\";\nimport { SecureNoteApi } from \"../api/secure-note.api\";\n\nexport class SecureNoteData {\n  type: SecureNoteType;\n\n  constructor(data?: SecureNoteApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.type = data.type;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { SshKeyApi } from \"../api/ssh-key.api\";\n\nexport class SshKeyData {\n  privateKey: string;\n  publicKey: string;\n  keyFingerprint: string;\n\n  constructor(data?: SshKeyApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.privateKey = data.privateKey;\n    this.publicKey = data.publicKey;\n    this.keyFingerprint = data.keyFingerprint;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CipherResponse } from \"../response/cipher.response\";\n\nimport { AttachmentData } from \"./attachment.data\";\nimport { CardData } from \"./card.data\";\nimport { FieldData } from \"./field.data\";\nimport { IdentityData } from \"./identity.data\";\nimport { LoginData } from \"./login.data\";\nimport { PasswordHistoryData } from \"./password-history.data\";\nimport { SecureNoteData } from \"./secure-note.data\";\nimport { SshKeyData } from \"./ssh-key.data\";\n\nexport class CipherData {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  favorite: boolean;\n  revisionDate: string;\n  type: CipherType;\n  name: string;\n  notes: string;\n  login?: LoginData;\n  secureNote?: SecureNoteData;\n  card?: CardData;\n  identity?: IdentityData;\n  sshKey?: SshKeyData;\n  fields?: FieldData[];\n  attachments?: AttachmentData[];\n  passwordHistory?: PasswordHistoryData[];\n  collectionIds?: string[];\n  creationDate: string;\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n  key: string;\n\n  constructor(response?: CipherResponse, collectionIds?: string[]) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.folderId = response.folderId;\n    this.edit = response.edit;\n    this.viewPassword = response.viewPassword;\n    this.organizationUseTotp = response.organizationUseTotp;\n    this.favorite = response.favorite;\n    this.revisionDate = response.revisionDate;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.collectionIds = collectionIds != null ? collectionIds : response.collectionIds;\n    this.creationDate = response.creationDate;\n    this.deletedDate = response.deletedDate;\n    this.reprompt = response.reprompt;\n    this.key = response.key;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginData(response.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteData(response.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardData(response.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityData(response.identity);\n        break;\n      case CipherType.SshKey:\n        this.sshKey = new SshKeyData(response.sshKey);\n        break;\n      default:\n        break;\n    }\n\n    if (response.fields != null) {\n      this.fields = response.fields.map((f) => new FieldData(f));\n    }\n    if (response.attachments != null) {\n      this.attachments = response.attachments.map((a) => new AttachmentData(a));\n    }\n    if (response.passwordHistory != null) {\n      this.passwordHistory = response.passwordHistory.map((ph) => new PasswordHistoryData(ph));\n    }\n  }\n\n  static fromJSON(obj: Jsonify<CipherData>) {\n    return Object.assign(new CipherData(), obj);\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { Attachment } from \"../domain/attachment\";\n\nexport class AttachmentView implements View {\n  id: string = null;\n  url: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n  key: SymmetricCryptoKey = null;\n\n  constructor(a?: Attachment) {\n    if (!a) {\n      return;\n    }\n\n    this.id = a.id;\n    this.url = a.url;\n    this.size = a.size;\n    this.sizeName = a.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<AttachmentView>>): AttachmentView {\n    const key = obj.key == null ? null : SymmetricCryptoKey.fromJSON(obj.key);\n    return Object.assign(new AttachmentView(), obj, { key: key });\n  }\n}\n", "export const CardExpiryDateDelimiters: string[] = [\"/\", \"-\", \".\", \" \"];\n\n// `CardExpiryDateDelimiters` is not intended solely for regex consumption,\n// so we need to format it here\nexport const ExpiryDateDelimitersPattern =\n  \"\\\\\" +\n  CardExpiryDateDelimiters.join(\"\\\\\")\n    // replace space character with the regex whitespace character class\n    .replace(\" \", \"s\");\n\nexport const MonthPattern = \"(([1]{1}[0-2]{1})|(0?[1-9]{1}))\";\n\n// Because we're dealing with expiry dates, we assume the year will be in current or next century (as of 2024)\nexport const ExpiryFullYearPattern = \"2[0-1]{1}\\\\d{2}\";\n\nexport const DelimiterPatternExpression = new RegExp(`[${ExpiryDateDelimitersPattern}]`, \"g\");\n\nexport const IrrelevantExpiryCharactersPatternExpression = new RegExp(\n  // \"nor digits\" to ensure numbers are removed from guidance pattern, which aren't covered by ^\\w\n  `[^\\\\d${ExpiryDateDelimitersPattern}]`,\n  \"g\",\n);\n\nexport const MonthPatternExpression = new RegExp(`^${MonthPattern}$`);\n\nexport const ExpiryFullYearPatternExpression = new RegExp(`^${ExpiryFullYearPattern}$`);\n", "import {\n  DelimiterPatternExpression,\n  ExpiryFullYearPattern,\n  ExpiryFullYearPatternExpression,\n  IrrelevantExpiryCharactersPatternExpression,\n  MonthPatternExpression,\n} from \"@bitwarden/common/autofill/constants\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\ntype NonZeroIntegers = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\ntype Year = `${NonZeroIntegers}${NonZeroIntegers}${0 | NonZeroIntegers}${0 | NonZeroIntegers}`;\n\n/**\n * Takes a string or number value and returns a string value formatted as a valid 4-digit year\n *\n * @param {(string | number)} yearInput\n * @return {*}  {(Year | null)}\n */\nexport function normalizeExpiryYearFormat(yearInput: string | number): Year | null {\n  // The input[type=\"number\"] is returning a number, convert it to a string\n  // An empty field returns null, avoid casting `\"null\"` to a string\n  const yearInputIsEmpty = yearInput == null || yearInput === \"\";\n  let expirationYear = yearInputIsEmpty ? null : `${yearInput}`;\n\n  // Exit early if year is already formatted correctly or empty\n  if (yearInputIsEmpty || (expirationYear && /^[1-9]{1}\\d{3}$/.test(expirationYear))) {\n    return expirationYear as Year;\n  }\n\n  expirationYear = (expirationYear || \"\")\n    // For safety, because even input[type=\"number\"] will allow decimals\n    .replace(/[^\\d]/g, \"\")\n    // remove any leading zero padding (leave the last leading zero if it ends the string)\n    .replace(/^[0]+(?=.)/, \"\");\n\n  if (expirationYear === \"\") {\n    expirationYear = null;\n  }\n\n  // given the context of payment card expiry, a year character length of 3, or over 4\n  // is more likely to be a mistake than an intentional value for the far past or far future.\n  if (expirationYear && expirationYear.length !== 4) {\n    const paddedYear = (\"00\" + expirationYear).slice(-2);\n    const currentCentury = `${new Date().getFullYear()}`.slice(0, 2);\n\n    expirationYear = currentCentury + paddedYear;\n  }\n\n  return expirationYear as Year | null;\n}\n\n/**\n * Takes a cipher card view and returns \"true\" if the month and year affirmativey indicate\n * the card is expired. Uncertain cases return \"false\".\n *\n * @param {CardView} cipherCard\n * @return {*}  {boolean}\n */\nexport function isCardExpired(cipherCard: CardView): boolean {\n  if (cipherCard) {\n    const { expMonth = null, expYear = null } = cipherCard;\n\n    if (!expYear) {\n      return false;\n    }\n\n    const now = new Date();\n    const normalizedYear = normalizeExpiryYearFormat(expYear);\n    const parsedYear = normalizedYear ? parseInt(normalizedYear, 10) : NaN;\n\n    const expiryYearIsBeforeCurrentYear = parsedYear < now.getFullYear();\n    const expiryYearIsAfterCurrentYear = parsedYear > now.getFullYear();\n\n    // If the expiry year is before the current year, skip checking the month, since it must be expired\n    if (normalizedYear && expiryYearIsBeforeCurrentYear) {\n      return true;\n    }\n\n    // If the expiry year is after the current year, skip checking the month, since it cannot be expired\n    if (normalizedYear && expiryYearIsAfterCurrentYear) {\n      return false;\n    }\n\n    if (normalizedYear && expMonth) {\n      const parsedMonthInteger = parseInt(expMonth, 10);\n      const parsedMonthIsValid = parsedMonthInteger && !isNaN(parsedMonthInteger);\n\n      // If the parsed month value is 0, we don't know when the expiry passes this year, so do not treat it as expired\n      if (!parsedMonthIsValid) {\n        return false;\n      }\n\n      // `Date` months are zero-indexed\n      const parsedMonth = parsedMonthInteger - 1;\n\n      // First day of the next month\n      const cardExpiry = new Date(parsedYear, parsedMonth + 1, 1);\n\n      return cardExpiry <= now;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Attempt to split a string into date segments on the basis of expected formats and delimiter symbols.\n *\n * @param {string} combinedExpiryValue\n * @return {*}  {string[]}\n */\nfunction splitCombinedDateValues(combinedExpiryValue: string): string[] {\n  let sanitizedValue = combinedExpiryValue\n    .replace(IrrelevantExpiryCharactersPatternExpression, \"\")\n    .trim();\n\n  // Do this after initial value replace to avoid identifying leading whitespace as delimiter\n  const parsedDelimiter = sanitizedValue.match(DelimiterPatternExpression)?.[0] || null;\n\n  let dateParts = [sanitizedValue];\n\n  if (parsedDelimiter?.length) {\n    // If the parsed delimiter is a whitespace character, assign 's' (character class) instead\n    const delimiterPattern = /\\s/.test(parsedDelimiter) ? \"\\\\s\" : \"\\\\\" + parsedDelimiter;\n\n    sanitizedValue = sanitizedValue\n      // Remove all other delimiter characters not identified as the delimiter\n      .replace(new RegExp(`[^\\\\d${delimiterPattern}]`, \"g\"), \"\")\n      // Also de-dupe the delimiter character\n      .replace(new RegExp(`[${delimiterPattern}]{2,}`, \"g\"), parsedDelimiter);\n\n    dateParts = sanitizedValue.split(parsedDelimiter);\n  }\n\n  return (\n    dateParts\n      // remove values that have no length\n      .filter((splitValue) => splitValue?.length)\n  );\n}\n\n/**\n * Given an array of split card expiry date parts,\n * returns an array of those values ordered by year then month\n *\n * @param {string[]} splitDateInput\n * @return {*}  {([string | null, string | null])}\n */\nfunction parseDelimitedYearMonthExpiry([firstPart, secondPart]: string[]): [string, string] {\n  // Conditionals here are structured to avoid unnecessary evaluations and are ordered\n  // from more authoritative checks to checks yielding increasingly inferred conclusions\n\n  // If a 4-digit value is found (when there are multiple parts), it can't be month\n  if (ExpiryFullYearPatternExpression.test(firstPart)) {\n    return [firstPart, secondPart];\n  }\n\n  // If a 4-digit value is found (when there are multiple parts), it can't be month\n  if (ExpiryFullYearPatternExpression.test(secondPart)) {\n    return [secondPart, firstPart];\n  }\n\n  // If it's a two digit value that doesn't match against month pattern, assume it's a year\n  if (/\\d{2}/.test(firstPart) && !MonthPatternExpression.test(firstPart)) {\n    return [firstPart, secondPart];\n  }\n\n  // If it's a two digit value that doesn't match against month pattern, assume it's a year\n  if (/\\d{2}/.test(secondPart) && !MonthPatternExpression.test(secondPart)) {\n    return [secondPart, firstPart];\n  }\n\n  // Values are too ambiguous (e.g. \"12/09\"). For the most part,\n  // a month-looking value likely is, at the time of writing (year 2024).\n  let parsedYear = firstPart;\n  let parsedMonth = secondPart;\n\n  if (MonthPatternExpression.test(firstPart)) {\n    parsedYear = secondPart;\n    parsedMonth = firstPart;\n  }\n\n  return [parsedYear, parsedMonth];\n}\n\n/**\n * Given a single string of integers, attempts to identify card expiry date portions within\n * and return values ordered by year then month\n *\n * @param {string} dateInput\n * @return {*}  {([string | null, string | null])}\n */\nfunction parseNonDelimitedYearMonthExpiry(dateInput: string): [string | null, string | null] {\n  if (dateInput.length > 4) {\n    // e.g.\n    // \"052024\"\n    // \"202405\"\n    // \"20245\"\n    // \"52024\"\n\n    // If the value is over 5-characters long, it likely has a full year format in it\n    const [parsedYear, parsedMonth] = dateInput\n      .split(new RegExp(`(?=${ExpiryFullYearPattern})|(?<=${ExpiryFullYearPattern})`, \"g\"))\n      .sort((current: string, next: string) => (current.length > next.length ? -1 : 1));\n\n    return [parsedYear, parsedMonth];\n  }\n\n  if (dateInput.length === 4) {\n    // e.g.\n    // \"0524\"\n    // \"2405\"\n\n    // If the `sanitizedFirstPart` value is a length of 4, it must be split in half, since\n    // neither a year or month will be represented with three characters\n    const splitFirstPartFirstHalf = dateInput.slice(0, 2);\n    const splitFirstPartSecondHalf = dateInput.slice(-2);\n\n    let parsedYear = splitFirstPartSecondHalf;\n    let parsedMonth = splitFirstPartFirstHalf;\n\n    // If the first part doesn't match a month pattern, assume it's a year\n    if (!MonthPatternExpression.test(splitFirstPartFirstHalf)) {\n      parsedYear = splitFirstPartFirstHalf;\n      parsedMonth = splitFirstPartSecondHalf;\n    }\n\n    return [parsedYear, parsedMonth];\n  }\n\n  // e.g.\n  // \"245\"\n  // \"202\"\n  // \"212\"\n  // \"022\"\n  // \"111\"\n\n  // A valid year representation here must be two characters so try to find it first.\n\n  let parsedYear = null;\n  let parsedMonth = null;\n\n  // Split if there is a digit with a leading zero\n  const splitFirstPartOnLeadingZero = dateInput.split(/(?<=0[1-9]{1})|(?=0[1-9]{1})/);\n\n  // Assume a leading zero indicates a month in ambiguous cases (e.g. \"202\"), since we're\n  // dealing with expiry dates and the next two-digit year with a leading zero will be 2100\n  if (splitFirstPartOnLeadingZero.length > 1) {\n    parsedYear = splitFirstPartOnLeadingZero[0];\n    parsedMonth = splitFirstPartOnLeadingZero[1];\n\n    if (splitFirstPartOnLeadingZero[0].startsWith(\"0\")) {\n      parsedMonth = splitFirstPartOnLeadingZero[0];\n      parsedYear = splitFirstPartOnLeadingZero[1];\n    }\n  } else {\n    // Here, a year has to be two-digits, and a month can't be more than one, so assume the first two digits that are greater than the current year is the year representation.\n    parsedYear = dateInput.slice(0, 2);\n    parsedMonth = dateInput.slice(-1);\n\n    const currentYear = new Date().getFullYear();\n    const normalizedYearFormat = normalizeExpiryYearFormat(parsedYear);\n    const normalizedParsedYear = normalizedYearFormat && parseInt(normalizedYearFormat, 10);\n    const normalizedExpiryYearFormat = normalizeExpiryYearFormat(dateInput.slice(-2));\n    const normalizedParsedYearAlternative =\n      normalizedExpiryYearFormat && parseInt(normalizedExpiryYearFormat, 10);\n\n    if (\n      normalizedParsedYear &&\n      normalizedParsedYear < currentYear &&\n      normalizedParsedYearAlternative &&\n      normalizedParsedYearAlternative >= currentYear\n    ) {\n      parsedYear = dateInput.slice(-2);\n      parsedMonth = dateInput.slice(0, 1);\n    }\n  }\n\n  return [parsedYear, parsedMonth];\n}\n\n/**\n * Attempt to parse year and month parts of a combined expiry date value.\n *\n * @param {string} combinedExpiryValue\n * @return {*}  {([string | null, string | null])}\n */\nexport function parseYearMonthExpiry(combinedExpiryValue: string): [Year | null, string | null] {\n  let parsedYear = null;\n  let parsedMonth = null;\n\n  const dateParts = splitCombinedDateValues(combinedExpiryValue);\n\n  if (dateParts.length < 1) {\n    return [null, null];\n  }\n\n  const sanitizedFirstPart =\n    dateParts[0]?.replace(IrrelevantExpiryCharactersPatternExpression, \"\") || \"\";\n  const sanitizedSecondPart =\n    dateParts[1]?.replace(IrrelevantExpiryCharactersPatternExpression, \"\") || \"\";\n\n  // If there is only one date part, no delimiter was found in the passed value\n  if (dateParts.length === 1) {\n    const [parsedNonDelimitedYear, parsedNonDelimitedMonth] =\n      parseNonDelimitedYearMonthExpiry(sanitizedFirstPart);\n\n    parsedYear = parsedNonDelimitedYear;\n    parsedMonth = parsedNonDelimitedMonth;\n  }\n  // There are multiple date parts\n  else {\n    const [parsedDelimitedYear, parsedDelimitedMonth] = parseDelimitedYearMonthExpiry([\n      sanitizedFirstPart,\n      sanitizedSecondPart,\n    ]);\n\n    parsedYear = parsedDelimitedYear;\n    parsedMonth = parsedDelimitedMonth;\n  }\n\n  const normalizedParsedYear = parsedYear ? normalizeExpiryYearFormat(parsedYear) : null;\n  const normalizedParsedMonth = parsedMonth?.replace(/^0+/, \"\").slice(0, 2);\n\n  // Set \"empty\" values to null\n  parsedYear = normalizedParsedYear?.length ? normalizedParsedYear : null;\n  parsedMonth = normalizedParsedMonth?.length ? normalizedParsedMonth : null;\n\n  return [parsedYear, parsedMonth];\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { LinkedIdType } from \"./enums\";\nimport { ItemView } from \"./models/view/item.view\";\n\ntype LinkedMetadataAttributes = {\n  /**\n   * The i18n key used to describe the decorated class property in the UI.\n   * If it is null, then the name of the class property will be used as the i18n key.\n   */\n  i18nKey?: string;\n\n  /**\n   * The position of the individual field to be applied when sorted.\n   */\n  sortPosition: number;\n};\n\nexport class LinkedMetadata {\n  private readonly _i18nKey: string;\n  readonly sortPosition: number;\n\n  constructor(\n    readonly propertyKey: string,\n    attributes: LinkedMetadataAttributes,\n  ) {\n    this._i18nKey = attributes?.i18nKey;\n    this.sortPosition = attributes.sortPosition;\n  }\n\n  get i18nKey() {\n    return this._i18nKey ?? this.propertyKey;\n  }\n}\n\n/**\n * A decorator used to set metadata used by Linked custom fields. Apply it to a class property or getter to make it\n *    available as a Linked custom field option.\n * @param id - A unique value that is saved in the Field model. It is used to look up the decorated class property.\n * @param options - {@link LinkedMetadataAttributes}\n */\nexport function linkedFieldOption(id: LinkedIdType, attributes: LinkedMetadataAttributes) {\n  return (prototype: ItemView, propertyKey: string) => {\n    if (prototype.linkedFieldOptions == null) {\n      prototype.linkedFieldOptions = new Map<LinkedIdType, LinkedMetadata>();\n    }\n\n    prototype.linkedFieldOptions.set(id, new LinkedMetadata(propertyKey, attributes));\n  };\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { View } from \"../../../models/view/view\";\nimport { LinkedMetadata } from \"../../linked-field-option.decorator\";\n\nexport abstract class ItemView implements View {\n  linkedFieldOptions: Map<number, LinkedMetadata>;\n  abstract get subTitle(): string;\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { normalizeExpiryYearFormat } from \"../../../autofill/utils\";\nimport { CardLinkedId as LinkedId } from \"../../enums\";\nimport { linkedFieldOption } from \"../../linked-field-option.decorator\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class CardView extends ItemView {\n  @linkedFieldOption(LinkedId.CardholderName, { sortPosition: 0 })\n  cardholderName: string = null;\n  @linkedFieldOption(LinkedId.ExpMonth, { sortPosition: 3, i18nKey: \"expirationMonth\" })\n  expMonth: string = null;\n  @linkedFieldOption(LinkedId.ExpYear, { sortPosition: 4, i18nKey: \"expirationYear\" })\n  expYear: string = null;\n  @linkedFieldOption(LinkedId.Code, { sortPosition: 5, i18nKey: \"securityCode\" })\n  code: string = null;\n\n  private _brand: string = null;\n  private _number: string = null;\n  private _subTitle: string = null;\n\n  get maskedCode(): string {\n    return this.code != null ? \"•\".repeat(this.code.length) : null;\n  }\n\n  get maskedNumber(): string {\n    return this.number != null ? \"•\".repeat(this.number.length) : null;\n  }\n\n  @linkedFieldOption(LinkedId.Brand, { sortPosition: 2 })\n  get brand(): string {\n    return this._brand;\n  }\n  set brand(value: string) {\n    this._brand = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.Number, { sortPosition: 1 })\n  get number(): string {\n    return this._number;\n  }\n  set number(value: string) {\n    this._number = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null) {\n      this._subTitle = this.brand;\n      if (this.number != null && this.number.length >= 4) {\n        if (this._subTitle != null && this._subTitle !== \"\") {\n          this._subTitle += \", \";\n        } else {\n          this._subTitle = \"\";\n        }\n\n        // Show last 5 on amex, last 4 for all others\n        const count =\n          this.number.length >= 5 && this.number.match(new RegExp(\"^3[47]\")) != null ? 5 : 4;\n        this._subTitle += \"*\" + this.number.substr(this.number.length - count);\n      }\n    }\n    return this._subTitle;\n  }\n\n  get expiration(): string {\n    const normalizedYear = normalizeExpiryYearFormat(this.expYear);\n\n    if (!this.expMonth && !normalizedYear) {\n      return null;\n    }\n\n    let exp = this.expMonth != null ? (\"0\" + this.expMonth).slice(-2) : \"__\";\n    exp += \" / \" + (normalizedYear || \"____\");\n\n    return exp;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<CardView>>): CardView {\n    return Object.assign(new CardView(), obj);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  static getCardBrandByPatterns(cardNum: string): string {\n    if (cardNum == null || typeof cardNum !== \"string\" || cardNum.trim() === \"\") {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum,\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\",\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    return null;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { FieldType, LinkedIdType } from \"../../enums\";\nimport { Field } from \"../domain/field\";\n\nexport class FieldView implements View {\n  name: string = null;\n  value: string = null;\n  type: FieldType = null;\n  newField = false; // Marks if the field is new and hasn't been saved\n  showValue = false;\n  showCount = false;\n  linkedId: LinkedIdType = null;\n\n  constructor(f?: Field) {\n    if (!f) {\n      return;\n    }\n\n    this.type = f.type;\n    this.linkedId = f.linkedId;\n  }\n\n  get maskedValue(): string {\n    return this.value != null ? \"••••••••\" : null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<FieldView>>): FieldView {\n    return Object.assign(new FieldView(), obj);\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { IdentityLinkedId as LinkedId } from \"../../enums\";\nimport { linkedFieldOption } from \"../../linked-field-option.decorator\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class IdentityView extends ItemView {\n  @linkedFieldOption(LinkedId.Title, { sortPosition: 0 })\n  title: string = null;\n  @linkedFieldOption(LinkedId.MiddleName, { sortPosition: 2 })\n  middleName: string = null;\n  @linkedFieldOption(LinkedId.Address1, { sortPosition: 12 })\n  address1: string = null;\n  @linkedFieldOption(LinkedId.Address2, { sortPosition: 13 })\n  address2: string = null;\n  @linkedFieldOption(LinkedId.Address3, { sortPosition: 14 })\n  address3: string = null;\n  @linkedFieldOption(LinkedId.City, { sortPosition: 15, i18nKey: \"cityTown\" })\n  city: string = null;\n  @linkedFieldOption(LinkedId.State, { sortPosition: 16, i18nKey: \"stateProvince\" })\n  state: string = null;\n  @linkedFieldOption(LinkedId.PostalCode, { sortPosition: 17, i18nKey: \"zipPostalCode\" })\n  postalCode: string = null;\n  @linkedFieldOption(LinkedId.Country, { sortPosition: 18 })\n  country: string = null;\n  @linkedFieldOption(LinkedId.Company, { sortPosition: 6 })\n  company: string = null;\n  @linkedFieldOption(LinkedId.Email, { sortPosition: 10 })\n  email: string = null;\n  @linkedFieldOption(LinkedId.Phone, { sortPosition: 11 })\n  phone: string = null;\n  @linkedFieldOption(LinkedId.Ssn, { sortPosition: 7 })\n  ssn: string = null;\n  @linkedFieldOption(LinkedId.Username, { sortPosition: 5 })\n  username: string = null;\n  @linkedFieldOption(LinkedId.PassportNumber, { sortPosition: 8 })\n  passportNumber: string = null;\n  @linkedFieldOption(LinkedId.LicenseNumber, { sortPosition: 9 })\n  licenseNumber: string = null;\n\n  private _firstName: string = null;\n  private _lastName: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  @linkedFieldOption(LinkedId.FirstName, { sortPosition: 1 })\n  get firstName(): string {\n    return this._firstName;\n  }\n  set firstName(value: string) {\n    this._firstName = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.LastName, { sortPosition: 4 })\n  get lastName(): string {\n    return this._lastName;\n  }\n  set lastName(value: string) {\n    this._lastName = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null && (this.firstName != null || this.lastName != null)) {\n      this._subTitle = \"\";\n      if (this.firstName != null) {\n        this._subTitle = this.firstName;\n      }\n      if (this.lastName != null) {\n        if (this._subTitle !== \"\") {\n          this._subTitle += \" \";\n        }\n        this._subTitle += this.lastName;\n      }\n    }\n\n    return this._subTitle;\n  }\n\n  @linkedFieldOption(LinkedId.FullName, { sortPosition: 3 })\n  get fullName(): string {\n    if (\n      this.title != null ||\n      this.firstName != null ||\n      this.middleName != null ||\n      this.lastName != null\n    ) {\n      let name = \"\";\n      if (this.title != null) {\n        name += this.title + \" \";\n      }\n      if (this.firstName != null) {\n        name += this.firstName + \" \";\n      }\n      if (this.middleName != null) {\n        name += this.middleName + \" \";\n      }\n      if (this.lastName != null) {\n        name += this.lastName;\n      }\n      return name.trim();\n    }\n\n    return null;\n  }\n\n  get fullAddress(): string {\n    let address = this.address1;\n    if (!Utils.isNullOrWhitespace(this.address2)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address2;\n    }\n    if (!Utils.isNullOrWhitespace(this.address3)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address3;\n    }\n    return address;\n  }\n\n  get fullAddressPart2(): string {\n    if (this.city == null && this.state == null && this.postalCode == null) {\n      return null;\n    }\n    const city = this.city || \"-\";\n    const state = this.state;\n    const postalCode = this.postalCode || \"-\";\n    let addressPart2 = city;\n    if (!Utils.isNullOrWhitespace(state)) {\n      addressPart2 += \", \" + state;\n    }\n    addressPart2 += \", \" + postalCode;\n    return addressPart2;\n  }\n\n  get fullAddressForCopy(): string {\n    let address = this.fullAddress;\n    if (this.city != null || this.state != null || this.postalCode != null) {\n      address += \"\\n\" + this.fullAddressPart2;\n    }\n    if (this.country != null) {\n      address += \"\\n\" + this.country;\n    }\n    return address;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<IdentityView>>): IdentityView {\n    return Object.assign(new IdentityView(), obj);\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class Fido2CredentialView extends ItemView {\n  credentialId: string;\n  keyType: \"public-key\";\n  keyAlgorithm: \"ECDSA\";\n  keyCurve: \"P-256\";\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  userName: string;\n  counter: number;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: boolean;\n  creationDate: Date = null;\n\n  get subTitle(): string {\n    return this.userDisplayName;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Fido2CredentialView>>): Fido2CredentialView {\n    const creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n    return Object.assign(new Fido2CredentialView(), obj, {\n      creationDate,\n    });\n  }\n}\n", "/*\n  See full documentation at:\n    https://bitwarden.com/help/uri-match-detection/#match-detection-options\n\n  Domain: \"the top-level domain and second-level domain of the URI match the detected resource\",\n  Host: \"the hostname and (if specified) port of the URI matches the detected resource\",\n  StartsWith: \"the detected resource starts with the URI, regardless of what follows it\",\n  Exact: \"the URI matches the detected resource exactly\",\n  RegularExpression: \"the detected resource matches a specified regular expression\",\n  Never: \"never offer auto-fill for the item\",\n*/\nexport const UriMatchStrategy = {\n  Domain: 0,\n  Host: 1,\n  StartsWith: 2,\n  Exact: 3,\n  RegularExpression: 4,\n  Never: 5,\n} as const;\n\nexport type UriMatchStrategySetting = (typeof UriMatchStrategy)[keyof typeof UriMatchStrategy];\n\n// using uniqueness properties of object shape over Set for ease of state storability\nexport type NeverDomains = { [id: string]: null | { bannerIsDismissed?: boolean } };\nexport type EquivalentDomains = string[][];\n", "import { Utils } from \"./utils\";\n\nconst CanLaunchWhitelist = [\n  \"https://\",\n  \"http://\",\n  \"ssh://\",\n  \"ftp://\",\n  \"sftp://\",\n  \"irc://\",\n  \"vnc://\",\n  // https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-uri\n  \"rdp://\", // Legacy RDP URI scheme\n  \"ms-rd:\", // Preferred RDP URI scheme\n  \"chrome://\",\n  \"iosapp://\",\n  \"androidapp://\",\n];\n\nexport class SafeUrls {\n  static canLaunch(uri: string): boolean {\n    if (Utils.isNullOrWhitespace(uri)) {\n      return false;\n    }\n\n    for (let i = 0; i < CanLaunchWhitelist.length; i++) {\n      if (uri.indexOf(CanLaunchWhitelist[i]) === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { UriMatchStrategy, UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { View } from \"../../../models/view/view\";\nimport { SafeUrls } from \"../../../platform/misc/safe-urls\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { LoginUri } from \"../domain/login-uri\";\n\nexport class LoginUriView implements View {\n  match: UriMatchStrategySetting = null;\n\n  private _uri: string = null;\n  private _domain: string = null;\n  private _hostname: string = null;\n  private _host: string = null;\n  private _canLaunch: boolean = null;\n\n  constructor(u?: LoginUri) {\n    if (!u) {\n      return;\n    }\n\n    this.match = u.match;\n  }\n\n  get uri(): string {\n    return this._uri;\n  }\n  set uri(value: string) {\n    this._uri = value;\n    this._domain = null;\n    this._canLaunch = null;\n  }\n\n  get domain(): string {\n    if (this._domain == null && this.uri != null) {\n      this._domain = Utils.getDomain(this.uri);\n      if (this._domain === \"\") {\n        this._domain = null;\n      }\n    }\n\n    return this._domain;\n  }\n\n  get hostname(): string {\n    if (this.match === UriMatchStrategy.RegularExpression) {\n      return null;\n    }\n    if (this._hostname == null && this.uri != null) {\n      this._hostname = Utils.getHostname(this.uri);\n      if (this._hostname === \"\") {\n        this._hostname = null;\n      }\n    }\n\n    return this._hostname;\n  }\n\n  get host(): string {\n    if (this.match === UriMatchStrategy.RegularExpression) {\n      return null;\n    }\n    if (this._host == null && this.uri != null) {\n      this._host = Utils.getHost(this.uri);\n      if (this._host === \"\") {\n        this._host = null;\n      }\n    }\n\n    return this._host;\n  }\n\n  get hostnameOrUri(): string {\n    return this.hostname != null ? this.hostname : this.uri;\n  }\n\n  get hostOrUri(): string {\n    return this.host != null ? this.host : this.uri;\n  }\n\n  get isWebsite(): boolean {\n    return (\n      this.uri != null &&\n      (this.uri.indexOf(\"http://\") === 0 ||\n        this.uri.indexOf(\"https://\") === 0 ||\n        (this.uri.indexOf(\"://\") < 0 && !Utils.isNullOrWhitespace(Utils.getDomain(this.uri))))\n    );\n  }\n\n  get canLaunch(): boolean {\n    if (this._canLaunch != null) {\n      return this._canLaunch;\n    }\n    if (this.uri != null && this.match !== UriMatchStrategy.RegularExpression) {\n      this._canLaunch = SafeUrls.canLaunch(this.launchUri);\n    } else {\n      this._canLaunch = false;\n    }\n    return this._canLaunch;\n  }\n\n  get launchUri(): string {\n    return this.uri.indexOf(\"://\") < 0 && !Utils.isNullOrWhitespace(Utils.getDomain(this.uri))\n      ? \"http://\" + this.uri\n      : this.uri;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<LoginUriView>>): LoginUriView {\n    return Object.assign(new LoginUriView(), obj);\n  }\n\n  matchesUri(\n    targetUri: string,\n    equivalentDomains: Set<string>,\n    defaultUriMatch: UriMatchStrategySetting = null,\n  ): boolean {\n    if (!this.uri || !targetUri) {\n      return false;\n    }\n\n    let matchType = this.match ?? defaultUriMatch;\n    matchType ??= UriMatchStrategy.Domain;\n\n    const targetDomain = Utils.getDomain(targetUri);\n    const matchDomains = equivalentDomains.add(targetDomain);\n\n    switch (matchType) {\n      case UriMatchStrategy.Domain:\n        return this.matchesDomain(targetUri, matchDomains);\n      case UriMatchStrategy.Host: {\n        const urlHost = Utils.getHost(targetUri);\n        return urlHost != null && urlHost === Utils.getHost(this.uri);\n      }\n      case UriMatchStrategy.Exact:\n        return targetUri === this.uri;\n      case UriMatchStrategy.StartsWith:\n        return targetUri.startsWith(this.uri);\n      case UriMatchStrategy.RegularExpression:\n        try {\n          const regex = new RegExp(this.uri, \"i\");\n          return regex.test(targetUri);\n        } catch (e) {\n          // Invalid regex\n          return false;\n        }\n      case UriMatchStrategy.Never:\n        return false;\n      default:\n        break;\n    }\n\n    return false;\n  }\n\n  private matchesDomain(targetUri: string, matchDomains: Set<string>) {\n    if (targetUri == null || this.domain == null || !matchDomains.has(this.domain)) {\n      return false;\n    }\n\n    if (Utils.DomainMatchBlacklist.has(this.domain)) {\n      const domainUrlHost = Utils.getHost(targetUri);\n      return !Utils.DomainMatchBlacklist.get(this.domain).has(domainUrlHost);\n    }\n\n    return true;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { DeepJsonify } from \"../../../types/deep-jsonify\";\nimport { LoginLinkedId as LinkedId } from \"../../enums\";\nimport { linkedFieldOption } from \"../../linked-field-option.decorator\";\nimport { Login } from \"../domain/login\";\n\nimport { Fido2CredentialView } from \"./fido2-credential.view\";\nimport { ItemView } from \"./item.view\";\nimport { LoginUriView } from \"./login-uri.view\";\n\nexport class LoginView extends ItemView {\n  @linkedFieldOption(LinkedId.Username, { sortPosition: 0 })\n  username: string = null;\n  @linkedFieldOption(LinkedId.Password, { sortPosition: 1 })\n  password: string = null;\n\n  passwordRevisionDate?: Date = null;\n  totp: string = null;\n  uris: LoginUriView[] = [];\n  autofillOnPageLoad: boolean = null;\n  fido2Credentials: Fido2CredentialView[] = null;\n\n  constructor(l?: Login) {\n    super();\n    if (!l) {\n      return;\n    }\n\n    this.passwordRevisionDate = l.passwordRevisionDate;\n    this.autofillOnPageLoad = l.autofillOnPageLoad;\n  }\n\n  get uri(): string {\n    return this.hasUris ? this.uris[0].uri : null;\n  }\n\n  get maskedPassword(): string {\n    return this.password != null ? \"••••••••\" : null;\n  }\n\n  get subTitle(): string {\n    // if there's a passkey available, use that as a fallback\n    if (Utils.isNullOrEmpty(this.username) && this.fido2Credentials?.length > 0) {\n      return this.fido2Credentials[0].userName;\n    }\n\n    return this.username;\n  }\n\n  get canLaunch(): boolean {\n    return this.hasUris && this.uris.some((u) => u.canLaunch);\n  }\n\n  get hasTotp(): boolean {\n    return !Utils.isNullOrWhitespace(this.totp);\n  }\n\n  get launchUri(): string {\n    if (this.hasUris) {\n      const uri = this.uris.find((u) => u.canLaunch);\n      if (uri != null) {\n        return uri.launchUri;\n      }\n    }\n    return null;\n  }\n\n  get hasUris(): boolean {\n    return this.uris != null && this.uris.length > 0;\n  }\n\n  get hasFido2Credentials(): boolean {\n    return this.fido2Credentials != null && this.fido2Credentials.length > 0;\n  }\n\n  matchesUri(\n    targetUri: string,\n    equivalentDomains: Set<string>,\n    defaultUriMatch: UriMatchStrategySetting = null,\n  ): boolean {\n    if (this.uris == null) {\n      return false;\n    }\n\n    return this.uris.some((uri) => uri.matchesUri(targetUri, equivalentDomains, defaultUriMatch));\n  }\n\n  static fromJSON(obj: Partial<DeepJsonify<LoginView>>): LoginView {\n    const passwordRevisionDate =\n      obj.passwordRevisionDate == null ? null : new Date(obj.passwordRevisionDate);\n    const uris = obj.uris.map((uri) => LoginUriView.fromJSON(uri));\n    const fido2Credentials = obj.fido2Credentials?.map((key) => Fido2CredentialView.fromJSON(key));\n\n    return Object.assign(new LoginView(), obj, {\n      passwordRevisionDate,\n      uris,\n      fido2Credentials,\n    });\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { Password } from \"../domain/password\";\n\nexport class PasswordHistoryView implements View {\n  password: string = null;\n  lastUsedDate: Date = null;\n\n  constructor(ph?: Password) {\n    if (!ph) {\n      return;\n    }\n\n    this.lastUsedDate = ph.lastUsedDate;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<PasswordHistoryView>>): PasswordHistoryView {\n    const lastUsedDate = obj.lastUsedDate == null ? null : new Date(obj.lastUsedDate);\n\n    return Object.assign(new PasswordHistoryView(), obj, {\n      lastUsedDate: lastUsedDate,\n    });\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { SecureNoteType } from \"../../enums\";\nimport { SecureNote } from \"../domain/secure-note\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class SecureNoteView extends ItemView {\n  type: SecureNoteType = null;\n\n  constructor(n?: SecureNote) {\n    super();\n    if (!n) {\n      return;\n    }\n\n    this.type = n.type;\n  }\n\n  get subTitle(): string {\n    return null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<SecureNoteView>>): SecureNoteView {\n    return Object.assign(new SecureNoteView(), obj);\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { SshKey } from \"../domain/ssh-key\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class SshKeyView extends ItemView {\n  privateKey: string = null;\n  publicKey: string = null;\n  keyFingerprint: string = null;\n\n  constructor(n?: SshKey) {\n    super();\n    if (!n) {\n      return;\n    }\n  }\n\n  get maskedPrivateKey(): string {\n    if (!this.privateKey || this.privateKey.length === 0) {\n      return \"\";\n    }\n\n    let lines = this.privateKey.split(\"\\n\").filter((l) => l.trim() !== \"\");\n    lines = lines.map((l, i) => {\n      if (i === 0 || i === lines.length - 1) {\n        return l;\n      }\n      return this.maskLine(l);\n    });\n    return lines.join(\"\\n\");\n  }\n\n  private maskLine(line: string): string {\n    return \"•\".repeat(32);\n  }\n\n  get subTitle(): string {\n    return this.keyFingerprint;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<SshKeyView>>): SshKeyView {\n    return Object.assign(new SshKeyView(), obj);\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { View } from \"../../../models/view/view\";\nimport { InitializerMetadata } from \"../../../platform/interfaces/initializer-metadata.interface\";\nimport { InitializerKey } from \"../../../platform/services/cryptography/initializer-key\";\nimport { DeepJsonify } from \"../../../types/deep-jsonify\";\nimport { CipherType, LinkedIdType } from \"../../enums\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { LocalData } from \"../data/local.data\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentView } from \"./attachment.view\";\nimport { CardView } from \"./card.view\";\nimport { FieldView } from \"./field.view\";\nimport { IdentityView } from \"./identity.view\";\nimport { LoginView } from \"./login.view\";\nimport { PasswordHistoryView } from \"./password-history.view\";\nimport { SecureNoteView } from \"./secure-note.view\";\nimport { SshKeyView } from \"./ssh-key.view\";\n\nexport class CipherView implements View, InitializerMetadata {\n  readonly initializerKey = InitializerKey.CipherView;\n\n  id: string = null;\n  organizationId: string = null;\n  folderId: string = null;\n  name: string = null;\n  notes: string = null;\n  type: CipherType = null;\n  favorite = false;\n  organizationUseTotp = false;\n  edit = false;\n  viewPassword = true;\n  localData: LocalData;\n  login = new LoginView();\n  identity = new IdentityView();\n  card = new CardView();\n  secureNote = new SecureNoteView();\n  sshKey = new SshKeyView();\n  attachments: AttachmentView[] = null;\n  fields: FieldView[] = null;\n  passwordHistory: PasswordHistoryView[] = null;\n  collectionIds: string[] = null;\n  revisionDate: Date = null;\n  creationDate: Date = null;\n  deletedDate: Date = null;\n  reprompt: CipherRepromptType = CipherRepromptType.None;\n\n  /**\n   * Flag to indicate if the cipher decryption failed.\n   */\n  decryptionFailure = false;\n\n  constructor(c?: Cipher) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.folderId = c.folderId;\n    this.favorite = c.favorite;\n    this.organizationUseTotp = c.organizationUseTotp;\n    this.edit = c.edit;\n    this.viewPassword = c.viewPassword;\n    this.type = c.type;\n    this.localData = c.localData;\n    this.collectionIds = c.collectionIds;\n    this.revisionDate = c.revisionDate;\n    this.creationDate = c.creationDate;\n    this.deletedDate = c.deletedDate;\n    // Old locally stored ciphers might have reprompt == null. If so set it to None.\n    this.reprompt = c.reprompt ?? CipherRepromptType.None;\n  }\n\n  private get item() {\n    switch (this.type) {\n      case CipherType.Login:\n        return this.login;\n      case CipherType.SecureNote:\n        return this.secureNote;\n      case CipherType.Card:\n        return this.card;\n      case CipherType.Identity:\n        return this.identity;\n      case CipherType.SshKey:\n        return this.sshKey;\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  get subTitle(): string {\n    return this.item?.subTitle;\n  }\n\n  get hasPasswordHistory(): boolean {\n    return this.passwordHistory && this.passwordHistory.length > 0;\n  }\n\n  get hasAttachments(): boolean {\n    return this.attachments && this.attachments.length > 0;\n  }\n\n  get hasOldAttachments(): boolean {\n    if (this.hasAttachments) {\n      for (let i = 0; i < this.attachments.length; i++) {\n        if (this.attachments[i].key == null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  get hasFields(): boolean {\n    return this.fields && this.fields.length > 0;\n  }\n\n  get passwordRevisionDisplayDate(): Date {\n    if (this.type !== CipherType.Login || this.login == null) {\n      return null;\n    } else if (this.login.password == null || this.login.password === \"\") {\n      return null;\n    }\n    return this.login.passwordRevisionDate;\n  }\n\n  get isDeleted(): boolean {\n    return this.deletedDate != null;\n  }\n\n  get linkedFieldOptions() {\n    return this.item?.linkedFieldOptions;\n  }\n\n  get isUnassigned(): boolean {\n    return (\n      this.organizationId != null && (this.collectionIds == null || this.collectionIds.length === 0)\n    );\n  }\n\n  /**\n   * Determines if the cipher can be launched in a new browser tab.\n   */\n  get canLaunch(): boolean {\n    return this.type === CipherType.Login && this.login.canLaunch;\n  }\n\n  linkedFieldValue(id: LinkedIdType) {\n    const linkedFieldOption = this.linkedFieldOptions?.get(id);\n    if (linkedFieldOption == null) {\n      return null;\n    }\n\n    const item = this.item;\n    return this.item[linkedFieldOption.propertyKey as keyof typeof item];\n  }\n\n  linkedFieldI18nKey(id: LinkedIdType): string {\n    return this.linkedFieldOptions.get(id)?.i18nKey;\n  }\n\n  // This is used as a marker to indicate that the cipher view object still has its prototype\n  toJSON() {\n    return this;\n  }\n\n  static fromJSON(obj: Partial<DeepJsonify<CipherView>>): CipherView {\n    if (obj == null) {\n      return null;\n    }\n\n    const view = new CipherView();\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const deletedDate = obj.deletedDate == null ? null : new Date(obj.deletedDate);\n    const attachments = obj.attachments?.map((a: any) => AttachmentView.fromJSON(a));\n    const fields = obj.fields?.map((f: any) => FieldView.fromJSON(f));\n    const passwordHistory = obj.passwordHistory?.map((ph: any) => PasswordHistoryView.fromJSON(ph));\n\n    Object.assign(view, obj, {\n      revisionDate: revisionDate,\n      deletedDate: deletedDate,\n      attachments: attachments,\n      fields: fields,\n      passwordHistory: passwordHistory,\n    });\n\n    switch (obj.type) {\n      case CipherType.Card:\n        view.card = CardView.fromJSON(obj.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityView.fromJSON(obj.identity);\n        break;\n      case CipherType.Login:\n        view.login = LoginView.fromJSON(obj.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteView.fromJSON(obj.secureNote);\n        break;\n      case CipherType.SshKey:\n        view.sshKey = SshKeyView.fromJSON(obj.sshKey);\n        break;\n      default:\n        break;\n    }\n\n    return view;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { AttachmentData } from \"../data/attachment.data\";\nimport { AttachmentView } from \"../view/attachment.view\";\n\nexport class Attachment extends Domain {\n  id: string;\n  url: string;\n  size: string;\n  sizeName: string; // Readable size, ex: \"4.2 KB\" or \"1.43 GB\"\n  key: EncString;\n  fileName: EncString;\n\n  constructor(obj?: AttachmentData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"],\n    );\n  }\n\n  async decrypt(\n    orgId: string,\n    context = \"No Cipher Context\",\n    encKey?: SymmetricCryptoKey,\n  ): Promise<AttachmentView> {\n    const view = await this.decryptObj(\n      new AttachmentView(this),\n      {\n        fileName: null,\n      },\n      orgId,\n      encKey,\n      \"DomainType: Attachment; \" + context,\n    );\n\n    if (this.key != null) {\n      view.key = await this.decryptAttachmentKey(orgId, encKey);\n    }\n\n    return view;\n  }\n\n  private async decryptAttachmentKey(orgId: string, encKey?: SymmetricCryptoKey) {\n    try {\n      if (encKey == null) {\n        encKey = await this.getKeyForDecryption(orgId);\n      }\n\n      const encryptService = Utils.getContainerService().getEncryptService();\n      const decValue = await encryptService.decryptToBytes(this.key, encKey);\n      return new SymmetricCryptoKey(decValue);\n    } catch (e) {\n      // TODO: error?\n    }\n  }\n\n  private async getKeyForDecryption(orgId: string) {\n    const keyService = Utils.getContainerService().getKeyService();\n    return orgId != null\n      ? await keyService.getOrgKey(orgId)\n      : await keyService.getUserKeyWithLegacySupport();\n  }\n\n  toAttachmentData(): AttachmentData {\n    const a = new AttachmentData();\n    a.size = this.size;\n    this.buildDataModel(\n      this,\n      a,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"],\n    );\n    return a;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Attachment>>): Attachment {\n    if (obj == null) {\n      return null;\n    }\n\n    const key = EncString.fromJSON(obj.key);\n    const fileName = EncString.fromJSON(obj.fileName);\n\n    return Object.assign(new Attachment(), obj, {\n      key,\n      fileName,\n    });\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { CardData } from \"../data/card.data\";\nimport { CardView } from \"../view/card.view\";\n\nexport class Card extends Domain {\n  cardholderName: EncString;\n  brand: EncString;\n  number: EncString;\n  expMonth: EncString;\n  expYear: EncString;\n  code: EncString;\n\n  constructor(obj?: CardData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      [],\n    );\n  }\n\n  async decrypt(\n    orgId: string,\n    context = \"No Cipher Context\",\n    encKey?: SymmetricCryptoKey,\n  ): Promise<CardView> {\n    return this.decryptObj(\n      new CardView(),\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      orgId,\n      encKey,\n      \"DomainType: Card; \" + context,\n    );\n  }\n\n  toCardData(): CardData {\n    const c = new CardData();\n    this.buildDataModel(this, c, {\n      cardholderName: null,\n      brand: null,\n      number: null,\n      expMonth: null,\n      expYear: null,\n      code: null,\n    });\n    return c;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Card>>): Card {\n    if (obj == null) {\n      return null;\n    }\n\n    const cardholderName = EncString.fromJSON(obj.cardholderName);\n    const brand = EncString.fromJSON(obj.brand);\n    const number = EncString.fromJSON(obj.number);\n    const expMonth = EncString.fromJSON(obj.expMonth);\n    const expYear = EncString.fromJSON(obj.expYear);\n    const code = EncString.fromJSON(obj.code);\n    return Object.assign(new Card(), obj, {\n      cardholderName,\n      brand,\n      number,\n      expMonth,\n      expYear,\n      code,\n    });\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { FieldType, LinkedIdType } from \"../../enums\";\nimport { FieldData } from \"../data/field.data\";\nimport { FieldView } from \"../view/field.view\";\n\nexport class Field extends Domain {\n  name: EncString;\n  value: EncString;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(obj?: FieldData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n    this.linkedId = obj.linkedId;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        name: null,\n        value: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<FieldView> {\n    return this.decryptObj(\n      new FieldView(this),\n      {\n        name: null,\n        value: null,\n      },\n      orgId,\n      encKey,\n    );\n  }\n\n  toFieldData(): FieldData {\n    const f = new FieldData();\n    this.buildDataModel(\n      this,\n      f,\n      {\n        name: null,\n        value: null,\n        type: null,\n        linkedId: null,\n      },\n      [\"type\", \"linkedId\"],\n    );\n    return f;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Field>>): Field {\n    if (obj == null) {\n      return null;\n    }\n\n    const name = EncString.fromJSON(obj.name);\n    const value = EncString.fromJSON(obj.value);\n\n    return Object.assign(new Field(), obj, {\n      name,\n      value,\n    });\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { IdentityData } from \"../data/identity.data\";\nimport { IdentityView } from \"../view/identity.view\";\n\nexport class Identity extends Domain {\n  title: EncString;\n  firstName: EncString;\n  middleName: EncString;\n  lastName: EncString;\n  address1: EncString;\n  address2: EncString;\n  address3: EncString;\n  city: EncString;\n  state: EncString;\n  postalCode: EncString;\n  country: EncString;\n  company: EncString;\n  email: EncString;\n  phone: EncString;\n  ssn: EncString;\n  username: EncString;\n  passportNumber: EncString;\n  licenseNumber: EncString;\n\n  constructor(obj?: IdentityData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(\n    orgId: string,\n    context: string = \"No Cipher Context\",\n    encKey?: SymmetricCryptoKey,\n  ): Promise<IdentityView> {\n    return this.decryptObj(\n      new IdentityView(),\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      orgId,\n      encKey,\n      \"DomainType: Identity; \" + context,\n    );\n  }\n\n  toIdentityData(): IdentityData {\n    const i = new IdentityData();\n    this.buildDataModel(this, i, {\n      title: null,\n      firstName: null,\n      middleName: null,\n      lastName: null,\n      address1: null,\n      address2: null,\n      address3: null,\n      city: null,\n      state: null,\n      postalCode: null,\n      country: null,\n      company: null,\n      email: null,\n      phone: null,\n      ssn: null,\n      username: null,\n      passportNumber: null,\n      licenseNumber: null,\n    });\n    return i;\n  }\n\n  static fromJSON(obj: Jsonify<Identity>): Identity {\n    if (obj == null) {\n      return null;\n    }\n\n    const title = EncString.fromJSON(obj.title);\n    const firstName = EncString.fromJSON(obj.firstName);\n    const middleName = EncString.fromJSON(obj.middleName);\n    const lastName = EncString.fromJSON(obj.lastName);\n    const address1 = EncString.fromJSON(obj.address1);\n    const address2 = EncString.fromJSON(obj.address2);\n    const address3 = EncString.fromJSON(obj.address3);\n    const city = EncString.fromJSON(obj.city);\n    const state = EncString.fromJSON(obj.state);\n    const postalCode = EncString.fromJSON(obj.postalCode);\n    const country = EncString.fromJSON(obj.country);\n    const company = EncString.fromJSON(obj.company);\n    const email = EncString.fromJSON(obj.email);\n    const phone = EncString.fromJSON(obj.phone);\n    const ssn = EncString.fromJSON(obj.ssn);\n    const username = EncString.fromJSON(obj.username);\n    const passportNumber = EncString.fromJSON(obj.passportNumber);\n    const licenseNumber = EncString.fromJSON(obj.licenseNumber);\n\n    return Object.assign(new Identity(), obj, {\n      title,\n      firstName,\n      middleName,\n      lastName,\n      address1,\n      address2,\n      address3,\n      city,\n      state,\n      postalCode,\n      country,\n      company,\n      email,\n      phone,\n      ssn,\n      username,\n      passportNumber,\n      licenseNumber,\n    });\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { Fido2CredentialData } from \"../data/fido2-credential.data\";\nimport { Fido2CredentialView } from \"../view/fido2-credential.view\";\n\nexport class Fido2Credential extends Domain {\n  credentialId: EncString | null = null;\n  keyType: EncString;\n  keyAlgorithm: EncString;\n  keyCurve: EncString;\n  keyValue: EncString;\n  rpId: EncString;\n  userHandle: EncString;\n  userName: EncString;\n  counter: EncString;\n  rpName: EncString;\n  userDisplayName: EncString;\n  discoverable: EncString;\n  creationDate: Date;\n\n  constructor(obj?: Fido2CredentialData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        credentialId: null,\n        keyType: null,\n        keyAlgorithm: null,\n        keyCurve: null,\n        keyValue: null,\n        rpId: null,\n        userHandle: null,\n        userName: null,\n        counter: null,\n        rpName: null,\n        userDisplayName: null,\n        discoverable: null,\n      },\n      [],\n    );\n    this.creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<Fido2CredentialView> {\n    const view = await this.decryptObj(\n      new Fido2CredentialView(),\n      {\n        credentialId: null,\n        keyType: null,\n        keyAlgorithm: null,\n        keyCurve: null,\n        keyValue: null,\n        rpId: null,\n        userHandle: null,\n        userName: null,\n        rpName: null,\n        userDisplayName: null,\n        discoverable: null,\n      },\n      orgId,\n      encKey,\n    );\n\n    const { counter } = await this.decryptObj(\n      { counter: \"\" },\n      {\n        counter: null,\n      },\n      orgId,\n      encKey,\n    );\n    // Counter will end up as NaN if this fails\n    view.counter = parseInt(counter);\n\n    const { discoverable } = await this.decryptObj(\n      { discoverable: \"\" },\n      {\n        discoverable: null,\n      },\n      orgId,\n      encKey,\n    );\n    view.discoverable = discoverable === \"true\";\n    view.creationDate = this.creationDate;\n\n    return view;\n  }\n\n  toFido2CredentialData(): Fido2CredentialData {\n    const i = new Fido2CredentialData();\n    i.creationDate = this.creationDate.toISOString();\n    this.buildDataModel(this, i, {\n      credentialId: null,\n      keyType: null,\n      keyAlgorithm: null,\n      keyCurve: null,\n      keyValue: null,\n      rpId: null,\n      userHandle: null,\n      userName: null,\n      counter: null,\n      rpName: null,\n      userDisplayName: null,\n      discoverable: null,\n    });\n    return i;\n  }\n\n  static fromJSON(obj: Jsonify<Fido2Credential>): Fido2Credential {\n    if (obj == null) {\n      return null;\n    }\n\n    const credentialId = EncString.fromJSON(obj.credentialId);\n    const keyType = EncString.fromJSON(obj.keyType);\n    const keyAlgorithm = EncString.fromJSON(obj.keyAlgorithm);\n    const keyCurve = EncString.fromJSON(obj.keyCurve);\n    const keyValue = EncString.fromJSON(obj.keyValue);\n    const rpId = EncString.fromJSON(obj.rpId);\n    const userHandle = EncString.fromJSON(obj.userHandle);\n    const userName = EncString.fromJSON(obj.userName);\n    const counter = EncString.fromJSON(obj.counter);\n    const rpName = EncString.fromJSON(obj.rpName);\n    const userDisplayName = EncString.fromJSON(obj.userDisplayName);\n    const discoverable = EncString.fromJSON(obj.discoverable);\n    const creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n\n    return Object.assign(new Fido2Credential(), obj, {\n      credentialId,\n      keyType,\n      keyAlgorithm,\n      keyCurve,\n      keyValue,\n      rpId,\n      userHandle,\n      userName,\n      counter,\n      rpName,\n      userDisplayName,\n      discoverable,\n      creationDate,\n    });\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { LoginUriData } from \"../data/login-uri.data\";\nimport { LoginUriView } from \"../view/login-uri.view\";\n\nexport class LoginUri extends Domain {\n  uri: EncString;\n  uriChecksum: EncString | undefined;\n  match: UriMatchStrategySetting;\n\n  constructor(obj?: LoginUriData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.match = obj.match;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        uri: null,\n        uriChecksum: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(\n    orgId: string,\n    context: string = \"No Cipher Context\",\n    encKey?: SymmetricCryptoKey,\n  ): Promise<LoginUriView> {\n    return this.decryptObj(\n      new LoginUriView(this),\n      {\n        uri: null,\n      },\n      orgId,\n      encKey,\n      context,\n    );\n  }\n\n  async validateChecksum(clearTextUri: string, orgId: string, encKey: SymmetricCryptoKey) {\n    if (this.uriChecksum == null) {\n      return false;\n    }\n\n    const keyService = Utils.getContainerService().getEncryptService();\n    const localChecksum = await keyService.hash(clearTextUri, \"sha256\");\n\n    const remoteChecksum = await this.uriChecksum.decrypt(orgId, encKey);\n    return remoteChecksum === localChecksum;\n  }\n\n  toLoginUriData(): LoginUriData {\n    const u = new LoginUriData();\n    this.buildDataModel(\n      this,\n      u,\n      {\n        uri: null,\n        uriChecksum: null,\n        match: null,\n      },\n      [\"match\"],\n    );\n    return u;\n  }\n\n  static fromJSON(obj: Jsonify<LoginUri>): LoginUri {\n    if (obj == null) {\n      return null;\n    }\n\n    const uri = EncString.fromJSON(obj.uri);\n    const uriChecksum = EncString.fromJSON(obj.uriChecksum);\n    return Object.assign(new LoginUri(), obj, {\n      uri,\n      uriChecksum,\n    });\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { LoginData } from \"../data/login.data\";\nimport { LoginView } from \"../view/login.view\";\n\nimport { Fido2Credential } from \"./fido2-credential\";\nimport { LoginUri } from \"./login-uri\";\n\nexport class Login extends Domain {\n  uris: LoginUri[];\n  username: EncString;\n  password: EncString;\n  passwordRevisionDate?: Date;\n  totp: EncString;\n  autofillOnPageLoad: boolean;\n  fido2Credentials: Fido2Credential[];\n\n  constructor(obj?: LoginData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.passwordRevisionDate =\n      obj.passwordRevisionDate != null ? new Date(obj.passwordRevisionDate) : null;\n    this.autofillOnPageLoad = obj.autofillOnPageLoad;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      [],\n    );\n\n    if (obj.uris) {\n      this.uris = [];\n      obj.uris.forEach((u) => {\n        this.uris.push(new LoginUri(u));\n      });\n    }\n\n    if (obj.fido2Credentials) {\n      this.fido2Credentials = obj.fido2Credentials.map((key) => new Fido2Credential(key));\n    }\n  }\n\n  async decrypt(\n    orgId: string,\n    bypassValidation: boolean,\n    context: string = \"No Cipher Context\",\n    encKey?: SymmetricCryptoKey,\n  ): Promise<LoginView> {\n    const view = await this.decryptObj(\n      new LoginView(this),\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      orgId,\n      encKey,\n      `DomainType: Login; ${context}`,\n    );\n\n    if (this.uris != null) {\n      view.uris = [];\n      for (let i = 0; i < this.uris.length; i++) {\n        // If the uri is null, there is nothing to decrypt or validate\n        if (this.uris[i].uri == null) {\n          continue;\n        }\n\n        const uri = await this.uris[i].decrypt(orgId, context, encKey);\n        // URIs are shared remotely after decryption\n        // we need to validate that the string hasn't been changed by a compromised server\n        // This validation is tied to the existence of cypher.key for backwards compatibility\n        // So we bypass the validation if there's no cipher.key or procceed with the validation and\n        // Skip the value if it's been tampered with.\n        if (bypassValidation || (await this.uris[i].validateChecksum(uri.uri, orgId, encKey))) {\n          view.uris.push(uri);\n        }\n      }\n    }\n\n    if (this.fido2Credentials != null) {\n      view.fido2Credentials = await Promise.all(\n        this.fido2Credentials.map((key) => key.decrypt(orgId, encKey)),\n      );\n    }\n\n    return view;\n  }\n\n  toLoginData(): LoginData {\n    const l = new LoginData();\n    l.passwordRevisionDate =\n      this.passwordRevisionDate != null ? this.passwordRevisionDate.toISOString() : null;\n    l.autofillOnPageLoad = this.autofillOnPageLoad;\n    this.buildDataModel(this, l, {\n      username: null,\n      password: null,\n      totp: null,\n    });\n\n    if (this.uris != null && this.uris.length > 0) {\n      l.uris = [];\n      this.uris.forEach((u) => {\n        l.uris.push(u.toLoginUriData());\n      });\n    }\n\n    if (this.fido2Credentials != null && this.fido2Credentials.length > 0) {\n      l.fido2Credentials = this.fido2Credentials.map((key) => key.toFido2CredentialData());\n    }\n\n    return l;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Login>>): Login {\n    if (obj == null) {\n      return null;\n    }\n\n    const username = EncString.fromJSON(obj.username);\n    const password = EncString.fromJSON(obj.password);\n    const totp = EncString.fromJSON(obj.totp);\n    const passwordRevisionDate =\n      obj.passwordRevisionDate == null ? null : new Date(obj.passwordRevisionDate);\n    const uris = obj.uris?.map((uri: any) => LoginUri.fromJSON(uri));\n    const fido2Credentials =\n      obj.fido2Credentials?.map((key) => Fido2Credential.fromJSON(key)) ?? [];\n\n    return Object.assign(new Login(), obj, {\n      username,\n      password,\n      totp,\n      passwordRevisionDate,\n      uris,\n      fido2Credentials,\n    });\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { PasswordHistoryData } from \"../data/password-history.data\";\nimport { PasswordHistoryView } from \"../view/password-history.view\";\n\nexport class Password extends Domain {\n  password: EncString;\n  lastUsedDate: Date;\n\n  constructor(obj?: PasswordHistoryData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(this, obj, {\n      password: null,\n    });\n    this.lastUsedDate = new Date(obj.lastUsedDate);\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<PasswordHistoryView> {\n    return this.decryptObj(\n      new PasswordHistoryView(this),\n      {\n        password: null,\n      },\n      orgId,\n      encKey,\n      \"DomainType: PasswordHistory\",\n    );\n  }\n\n  toPasswordHistoryData(): PasswordHistoryData {\n    const ph = new PasswordHistoryData();\n    ph.lastUsedDate = this.lastUsedDate.toISOString();\n    this.buildDataModel(this, ph, {\n      password: null,\n    });\n    return ph;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Password>>): Password {\n    if (obj == null) {\n      return null;\n    }\n\n    const password = EncString.fromJSON(obj.password);\n    const lastUsedDate = obj.lastUsedDate == null ? null : new Date(obj.lastUsedDate);\n\n    return Object.assign(new Password(), obj, {\n      password,\n      lastUsedDate,\n    });\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { SecureNoteType } from \"../../enums\";\nimport { SecureNoteData } from \"../data/secure-note.data\";\nimport { SecureNoteView } from \"../view/secure-note.view\";\n\nexport class SecureNote extends Domain {\n  type: SecureNoteType;\n\n  constructor(obj?: SecureNoteData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n  }\n\n  async decrypt(\n    orgId: string,\n    context = \"No Cipher Context\",\n    encKey?: SymmetricCryptoKey,\n  ): Promise<SecureNoteView> {\n    return new SecureNoteView(this);\n  }\n\n  toSecureNoteData(): SecureNoteData {\n    const n = new SecureNoteData();\n    n.type = this.type;\n    return n;\n  }\n\n  static fromJSON(obj: Jsonify<SecureNote>): SecureNote {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new SecureNote(), obj);\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { SshKeyData } from \"../data/ssh-key.data\";\nimport { SshKeyView } from \"../view/ssh-key.view\";\n\nexport class SshKey extends Domain {\n  privateKey: EncString;\n  publicKey: EncString;\n  keyFingerprint: EncString;\n\n  constructor(obj?: SshKeyData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        privateKey: null,\n        publicKey: null,\n        keyFingerprint: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(\n    orgId: string,\n    context = \"No Cipher Context\",\n    encKey?: SymmetricCryptoKey,\n  ): Promise<SshKeyView> {\n    return this.decryptObj(\n      new SshKeyView(),\n      {\n        privateKey: null,\n        publicKey: null,\n        keyFingerprint: null,\n      },\n      orgId,\n      encKey,\n      \"DomainType: SshKey; \" + context,\n    );\n  }\n\n  toSshKeyData(): SshKeyData {\n    const c = new SshKeyData();\n    this.buildDataModel(this, c, {\n      privateKey: null,\n      publicKey: null,\n      keyFingerprint: null,\n    });\n    return c;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<SshKey>>): SshKey {\n    if (obj == null) {\n      return null;\n    }\n\n    const privateKey = EncString.fromJSON(obj.privateKey);\n    const publicKey = EncString.fromJSON(obj.publicKey);\n    const keyFingerprint = EncString.fromJSON(obj.keyFingerprint);\n    return Object.assign(new SshKey(), obj, {\n      privateKey,\n      publicKey,\n      keyFingerprint,\n    });\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { Decryptable } from \"../../../platform/interfaces/decryptable.interface\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { InitializerKey } from \"../../../platform/services/cryptography/initializer-key\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CipherData } from \"../data/cipher.data\";\nimport { LocalData } from \"../data/local.data\";\nimport { CipherView } from \"../view/cipher.view\";\n\nimport { Attachment } from \"./attachment\";\nimport { Card } from \"./card\";\nimport { Field } from \"./field\";\nimport { Identity } from \"./identity\";\nimport { Login } from \"./login\";\nimport { Password } from \"./password\";\nimport { SecureNote } from \"./secure-note\";\nimport { SshKey } from \"./ssh-key\";\n\nexport class Cipher extends Domain implements Decryptable<CipherView> {\n  readonly initializerKey = InitializerKey.Cipher;\n\n  id: string;\n  organizationId: string;\n  folderId: string;\n  name: EncString;\n  notes: EncString;\n  type: CipherType;\n  favorite: boolean;\n  organizationUseTotp: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  revisionDate: Date;\n  localData: LocalData;\n  login: Login;\n  identity: Identity;\n  card: Card;\n  secureNote: SecureNote;\n  sshKey: SshKey;\n  attachments: Attachment[];\n  fields: Field[];\n  passwordHistory: Password[];\n  collectionIds: string[];\n  creationDate: Date;\n  deletedDate: Date;\n  reprompt: CipherRepromptType;\n  key: EncString;\n\n  constructor(obj?: CipherData, localData: LocalData = null) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        folderId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"organizationId\", \"folderId\"],\n    );\n\n    this.type = obj.type;\n    this.favorite = obj.favorite;\n    this.organizationUseTotp = obj.organizationUseTotp;\n    this.edit = obj.edit;\n    if (obj.viewPassword != null) {\n      this.viewPassword = obj.viewPassword;\n    } else {\n      this.viewPassword = true; // Default for already synced Ciphers without viewPassword\n    }\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.collectionIds = obj.collectionIds;\n    this.localData = localData;\n    this.creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n    this.deletedDate = obj.deletedDate != null ? new Date(obj.deletedDate) : null;\n    this.reprompt = obj.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new Login(obj.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNote(obj.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new Card(obj.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new Identity(obj.identity);\n        break;\n      case CipherType.SshKey:\n        this.sshKey = new SshKey(obj.sshKey);\n        break;\n      default:\n        break;\n    }\n\n    if (obj.attachments != null) {\n      this.attachments = obj.attachments.map((a) => new Attachment(a));\n    } else {\n      this.attachments = null;\n    }\n\n    if (obj.fields != null) {\n      this.fields = obj.fields.map((f) => new Field(f));\n    } else {\n      this.fields = null;\n    }\n\n    if (obj.passwordHistory != null) {\n      this.passwordHistory = obj.passwordHistory.map((ph) => new Password(ph));\n    } else {\n      this.passwordHistory = null;\n    }\n  }\n\n  // We are passing the organizationId into the EncString.decrypt() method here, but because the encKey will always be\n  // present and so the organizationId will not be used.\n  // We will refactor the EncString.decrypt() in https://bitwarden.atlassian.net/browse/PM-3762 to remove the dependency on the organizationId.\n  async decrypt(encKey: SymmetricCryptoKey): Promise<CipherView> {\n    const model = new CipherView(this);\n    let bypassValidation = true;\n\n    if (this.key != null) {\n      const encryptService = Utils.getContainerService().getEncryptService();\n      const keyBytes = await encryptService.decryptToBytes(\n        this.key,\n        encKey,\n        `Cipher Id: ${this.id}; Content: CipherKey; IsEncryptedByOrgKey: ${this.organizationId != null}`,\n      );\n      if (keyBytes == null) {\n        model.name = \"[error: cannot decrypt]\";\n        model.decryptionFailure = true;\n        return model;\n      }\n      encKey = new SymmetricCryptoKey(keyBytes);\n      bypassValidation = false;\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      this.organizationId,\n      encKey,\n    );\n\n    switch (this.type) {\n      case CipherType.Login:\n        model.login = await this.login.decrypt(\n          this.organizationId,\n          bypassValidation,\n          `Cipher Id: ${this.id}`,\n          encKey,\n        );\n        break;\n      case CipherType.SecureNote:\n        model.secureNote = await this.secureNote.decrypt(\n          this.organizationId,\n          `Cipher Id: ${this.id}`,\n          encKey,\n        );\n        break;\n      case CipherType.Card:\n        model.card = await this.card.decrypt(this.organizationId, `Cipher Id: ${this.id}`, encKey);\n        break;\n      case CipherType.Identity:\n        model.identity = await this.identity.decrypt(\n          this.organizationId,\n          `Cipher Id: ${this.id}`,\n          encKey,\n        );\n        break;\n      case CipherType.SshKey:\n        model.sshKey = await this.sshKey.decrypt(\n          this.organizationId,\n          `Cipher Id: ${this.id}`,\n          encKey,\n        );\n        break;\n      default:\n        break;\n    }\n\n    if (this.attachments != null && this.attachments.length > 0) {\n      const attachments: any[] = [];\n      await this.attachments.reduce((promise, attachment) => {\n        return promise\n          .then(() => {\n            return attachment.decrypt(this.organizationId, `Cipher Id: ${this.id}`, encKey);\n          })\n          .then((decAttachment) => {\n            attachments.push(decAttachment);\n          });\n      }, Promise.resolve());\n      model.attachments = attachments;\n    }\n\n    if (this.fields != null && this.fields.length > 0) {\n      const fields: any[] = [];\n      await this.fields.reduce((promise, field) => {\n        return promise\n          .then(() => {\n            return field.decrypt(this.organizationId, encKey);\n          })\n          .then((decField) => {\n            fields.push(decField);\n          });\n      }, Promise.resolve());\n      model.fields = fields;\n    }\n\n    if (this.passwordHistory != null && this.passwordHistory.length > 0) {\n      const passwordHistory: any[] = [];\n      await this.passwordHistory.reduce((promise, ph) => {\n        return promise\n          .then(() => {\n            return ph.decrypt(this.organizationId, encKey);\n          })\n          .then((decPh) => {\n            passwordHistory.push(decPh);\n          });\n      }, Promise.resolve());\n      model.passwordHistory = passwordHistory;\n    }\n\n    return model;\n  }\n\n  toCipherData(): CipherData {\n    const c = new CipherData();\n    c.id = this.id;\n    c.organizationId = this.organizationId;\n    c.folderId = this.folderId;\n    c.edit = this.edit;\n    c.viewPassword = this.viewPassword;\n    c.organizationUseTotp = this.organizationUseTotp;\n    c.favorite = this.favorite;\n    c.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;\n    c.type = this.type;\n    c.collectionIds = this.collectionIds;\n    c.creationDate = this.creationDate != null ? this.creationDate.toISOString() : null;\n    c.deletedDate = this.deletedDate != null ? this.deletedDate.toISOString() : null;\n    c.reprompt = this.reprompt;\n    c.key = this.key?.encryptedString;\n\n    this.buildDataModel(this, c, {\n      name: null,\n      notes: null,\n    });\n\n    switch (c.type) {\n      case CipherType.Login:\n        c.login = this.login.toLoginData();\n        break;\n      case CipherType.SecureNote:\n        c.secureNote = this.secureNote.toSecureNoteData();\n        break;\n      case CipherType.Card:\n        c.card = this.card.toCardData();\n        break;\n      case CipherType.Identity:\n        c.identity = this.identity.toIdentityData();\n        break;\n      case CipherType.SshKey:\n        c.sshKey = this.sshKey.toSshKeyData();\n        break;\n      default:\n        break;\n    }\n\n    if (this.fields != null) {\n      c.fields = this.fields.map((f) => f.toFieldData());\n    }\n    if (this.attachments != null) {\n      c.attachments = this.attachments.map((a) => a.toAttachmentData());\n    }\n    if (this.passwordHistory != null) {\n      c.passwordHistory = this.passwordHistory.map((ph) => ph.toPasswordHistoryData());\n    }\n    return c;\n  }\n\n  static fromJSON(obj: Jsonify<Cipher>) {\n    if (obj == null) {\n      return null;\n    }\n\n    const domain = new Cipher();\n    const name = EncString.fromJSON(obj.name);\n    const notes = EncString.fromJSON(obj.notes);\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const deletedDate = obj.deletedDate == null ? null : new Date(obj.deletedDate);\n    const attachments = obj.attachments?.map((a: any) => Attachment.fromJSON(a));\n    const fields = obj.fields?.map((f: any) => Field.fromJSON(f));\n    const passwordHistory = obj.passwordHistory?.map((ph: any) => Password.fromJSON(ph));\n    const key = EncString.fromJSON(obj.key);\n\n    Object.assign(domain, obj, {\n      name,\n      notes,\n      revisionDate,\n      deletedDate,\n      attachments,\n      fields,\n      passwordHistory,\n      key,\n    });\n\n    switch (obj.type) {\n      case CipherType.Card:\n        domain.card = Card.fromJSON(obj.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = Identity.fromJSON(obj.identity);\n        break;\n      case CipherType.Login:\n        domain.login = Login.fromJSON(obj.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNote.fromJSON(obj.secureNote);\n        break;\n      case CipherType.SshKey:\n        domain.sshKey = SshKey.fromJSON(obj.sshKey);\n        break;\n      default:\n        break;\n    }\n\n    return domain;\n  }\n}\n", "import { Jsonify } from \"type-fest\";\n\nimport { Cipher } from \"../../../vault/models/domain/cipher\";\nimport { CipherView } from \"../../../vault/models/view/cipher.view\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\n\nimport { InitializerKey } from \"./initializer-key\";\n\n/**\n * Internal reference of classes so we can reconstruct objects properly.\n * Each entry should be keyed using the Decryptable.initializerKey property\n */\nconst classInitializers: Record<InitializerKey, (obj: any) => any> = {\n  [InitializerKey.Cipher]: Cipher.fromJSON,\n  [InitializerKey.CipherView]: CipherView.fromJSON,\n};\n\nexport function getClassInitializer<T extends InitializerMetadata>(\n  className: InitializerKey,\n): (obj: Jsonify<T>) => T {\n  return classInitializers[className];\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Jsonify } from \"type-fest\";\n\nimport { Decryptable } from \"../../interfaces/decryptable.interface\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\nimport { ConsoleLogService } from \"../console-log.service\";\nimport { ContainerService } from \"../container.service\";\nimport { WebCryptoFunctionService } from \"../web-crypto-function.service\";\n\nimport { EncryptServiceImplementation } from \"./encrypt.service.implementation\";\nimport { getClassInitializer } from \"./get-class-initializer\";\n\nconst workerApi: Worker = self as any;\n\nlet inited = false;\nlet encryptService: EncryptServiceImplementation;\n\n/**\n * Bootstrap the worker environment with services required for decryption\n */\nexport function init() {\n  const cryptoFunctionService = new WebCryptoFunctionService(self);\n  const logService = new ConsoleLogService(false);\n  encryptService = new EncryptServiceImplementation(cryptoFunctionService, logService, true);\n\n  const bitwardenContainerService = new ContainerService(null, encryptService);\n  bitwardenContainerService.attachToGlobal(self);\n\n  inited = true;\n}\n\n/**\n * Listen for messages and decrypt their contents\n */\nworkerApi.addEventListener(\"message\", async (event: { data: string }) => {\n  if (!inited) {\n    init();\n  }\n\n  const request: {\n    id: string;\n    items: Jsonify<Decryptable<any>>[];\n    key: Jsonify<SymmetricCryptoKey>;\n  } = JSON.parse(event.data);\n\n  const key = SymmetricCryptoKey.fromJSON(request.key);\n  const items = request.items.map((jsonItem) => {\n    const initializer = getClassInitializer<Decryptable<any>>(jsonItem.initializerKey);\n    return initializer(jsonItem);\n  });\n  const result = await encryptService.decryptItems(items, key);\n\n  workerApi.postMessage({\n    id: request.id,\n    items: JSON.stringify(result),\n  });\n});\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [972], () => (__webpack_require__(9823)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n", "// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};", "__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};", "// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + \"df14ebaecd3f1b7832a6\" + \".js\";\n};", "// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};", "__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();", "__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))", "// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};", "var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;", "// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t357: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk_bitwarden_web_vault\"] = self[\"webpackChunk_bitwarden_web_vault\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest", "// module cache are used so entry inlining is disabled\n// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],
	"names": ["deferred", "leafPrototypes", "getProto", "next", "nodeURL", "self", "Utils", "init", "inited", "isNode", "process", "release", "name", "isBrowser", "window", "isMobileBrowser", "this", "isMobile", "isAppleMobileBrowser", "isAppleMobile", "global", "g", "fromB64ToArray", "str", "Uint8Array", "Buffer", "from", "binaryString", "atob", "bytes", "length", "i", "charCodeAt", "fromUrlB64ToArray", "fromUrlB64ToB64", "fromHexToArray", "parseInt", "substr", "fromUtf8ToArray", "strUtf8", "unescape", "encodeURIComponent", "arr", "fromByteStringToArray", "fromBufferToB64", "buffer", "toString", "binary", "byteLength", "String", "fromCharCode", "btoa", "fromBufferToUrlB64", "fromB64toUrlB64", "b64Str", "replace", "fromBufferToUtf8", "fromBufferToByteString", "apply", "fromBufferToHex", "Array", "prototype", "map", "call", "x", "slice", "join", "hexStringToArrayBuffer", "hexString", "arrayBuffer", "ArrayBuffer", "uint8Array", "hexByte", "byteValue", "urlB64Str", "output", "Error", "fromUrlB64ToUtf8", "fromB64ToUtf8", "fromUtf8ToB64", "utfStr", "decodeURIComponent", "escape", "fromUtf8ToUrlB64", "newGuid", "c", "r", "Math", "random", "isGuid", "id", "RegExp", "guidRegex", "test", "getHostname", "uriString", "isNullOrWhitespace", "trim", "startsWith", "indexOf", "hostname", "validHosts", "getHost", "url", "getUrl", "host", "getDomain", "parseResult", "allowPrivateDomains", "isIp", "domain", "getQueryParams", "search", "Map", "split", "forEach", "pair", "parts", "set", "toLowerCase", "getSortFunction", "i18nService", "prop", "a", "b", "collator", "compare", "localeCompare", "isNullOrEmpty", "isPromise", "obj", "undefined", "nameOf", "assign", "target", "source", "Object", "iterateEnum", "keys", "filter", "k", "Number", "isNaN", "getUrlObject", "camelToPascalCase", "s", "charAt", "toUpperCase", "pickTextColorBasedOnBgColor", "bgColor", "threshold", "svgTextFill", "bgColorHexNums", "substring", "stringToColor", "hash", "color", "getContainerService", "bitwardenContainerService", "validateHexColor", "mapToRecord", "fromEntries", "recordToMap", "record", "entries", "e", "merge", "destination", "encodeRFC3986URIComponent", "normalizePath", "denormalizedPath", "win", "mobile", "navigator", "userAgent", "vendor", "opera", "match", "delay", "ms", "Promise", "resolve", "setTimeout", "asyncToObservable", "generator", "of", "pipe", "switchMap", "daysRemaining", "targetDate", "diffTime", "getTime", "Date", "now", "max", "floor", "hasProtocol", "URL", "EncryptionType", "encryptionTypeToString", "encryptionType", "regexpEmojiPresentation", "originalMinimumPasswordLength", "minimumPasswordLength", "DomainMatchBlacklist", "Set", "EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE", "AesCbc256_B64", "AesCbc128_HmacSha256_B64", "AesCbc256_HmacSha256_B64", "Rsa2048_OaepSha256_B64", "Rsa2048_OaepSha1_B64", "Rsa2048_OaepSha256_HmacSha256_B64", "Rsa2048_OaepSha1_HmacSha256_B64", "FileUploadType", "HashPurpose", "HtmlStorageLocation", "KeySuffixOptions", "LogLevelType", "StorageLocation", "ThemeType", "SymmetricCryptoKey", "constructor", "key", "encType", "encKey", "macKey", "keyB64", "encKeyB64", "macKeyB64", "toJSON", "fromString", "fromJSON", "ConsoleLogService", "isDev", "timersMap", "debug", "message", "optionalParams", "write", "Debug", "info", "Info", "warning", "Warning", "error", "level", "console", "log", "warn", "ContainerService", "keyService", "encryptService", "attachToGlobal", "getKeyService", "getEncryptService", "WebCryptoFunctionService", "globalContext", "crypto", "subtle", "wasmSupported", "checkIfWasmSupported", "pbkdf2", "password", "salt", "algorithm", "iterations", "wcLen", "passwordBuf", "toBuf", "pbkdf2Params", "toWebCryptoAlgorithm", "impKey", "importKey", "deriveBits", "argon2", "memory", "parallelism", "passwordArr", "saltArr", "result", "pass", "time", "mem", "hashLen", "type", "ArgonType", "Argon2id", "unloadRuntime", "hkdf", "ikm", "outputByteSize", "hkdfParams", "hkdfExpand", "prk", "infoBuf", "infoArr", "runningOkmLength", "previousT", "n", "ceil", "okm", "t", "hmac", "value", "md", "md5", "create", "valueBytes", "toByteString", "update", "digest", "data", "valueBuf", "signingAlgorithm", "sign", "randomBytes", "mac1", "mac2", "arr1", "arr2", "hmacFast", "start", "getBytes", "compareFast", "rand", "Uint32Array", "createBuffer", "putInt32", "aesEncrypt", "iv", "encrypt", "aesDecryptFastParameters", "mac", "p", "meta", "encKeyByteString", "macKeyByteString", "decode64", "macData", "aesDecryptFast", "mode", "parameters", "decipher", "createDecipher", "toWebCryptoAesMode", "options", "dataBuffer", "finish", "val", "aesDecrypt", "decrypt", "rsaEncrypt", "publicKey", "rsaParams", "rsaDecrypt", "privateKey", "rsaExtractPublicKey", "impPrivateKey", "jwkPrivateKey", "exportKey", "jwkPublicKeyParams", "kty", "alg", "ext", "impPublicKey", "aesGenerateKey", "bitLength", "key1", "key2", "aesParams", "generateKey", "rawKey", "rsaGenerateKeyPair", "modulusLength", "publicExponent", "keyPair", "getRandomValues", "buf", "encodeUtf8", "WebAssembly", "instantiate", "module", "Module", "Instance", "EncArrayBuffer", "dataBytes", "ivBytes", "macBytes", "encBytes", "minimumLength", "ENC_TYPE_LENGTH", "throwDecryptionError", "fromResponse", "response", "fromB64", "b64", "DECRYPT_ERROR", "EncString", "encryptedStringOrType", "initFromData", "initFromEncryptedString", "encryptedString", "encPieces", "parseEncryptedString", "headerPieces", "NaN", "isSerializedEncString", "orgId", "context", "decryptedValue", "decryptTrace", "getKeyForDecryption", "cryptoService", "getUserKey", "decryptToUtf8", "decryptWithKey", "getOrgKey", "getUserKeyWithLegacySupport", "EncryptedObject", "EncryptServiceImplementation", "cryptoFunctionService", "logService", "logMacFailures", "plainValue", "plainBuf", "encObj", "encryptToBytes", "encValue", "macLen", "encString", "decryptContext", "resolveLegacyKey", "fastParams", "computedMac", "logMacFailed", "decryptToBytes", "encThing", "encrypted", "decryptItems", "items", "results", "push", "hashArray", "msg", "InitializerKey", "CipherType", "CipherRepromptType", "FieldType", "LoginLinkedId", "CardLinkedId", "IdentityLinkedId", "SecureNoteType", "Domain", "buildDomainModel", "dataObj", "notEncList", "hasOwnProperty", "objProp", "buildDataModel", "notEncStringList", "decryptObj", "viewModel", "objectContext", "promises", "theProp", "then", "mapProp", "all", "decryptObjWithKey", "encryptedProperties", "_", "decryptProperty", "reduce", "acc", "propertyKey", "decrypted", "AttachmentData", "fileName", "size", "sizeName", "CardData", "cardholderName", "brand", "number", "expMonth", "expYear", "code", "FieldData", "linkedId", "IdentityData", "title", "firstName", "middleName", "lastName", "address1", "address2", "address3", "city", "state", "postalCode", "country", "company", "email", "phone", "ssn", "username", "passportNumber", "licenseNumber", "Fido2CredentialData", "credentialId", "keyType", "keyAlgorithm", "keyCurve", "keyValue", "rpId", "userHandle", "userName", "counter", "rpName", "userDisplayName", "discoverable", "creationDate", "LoginUriData", "uri", "uriChecksum", "LoginData", "passwordRevisionDate", "totp", "autofillOnPageLoad", "uris", "u", "fido2Credentials", "PasswordHistoryData", "lastUsedDate", "SecureNoteData", "SshKeyData", "keyFingerprint", "CipherData", "collectionIds", "organizationId", "folderId", "edit", "viewPassword", "organizationUseTotp", "favorite", "revisionDate", "notes", "deletedDate", "reprompt", "Login", "login", "SecureNote", "secureNote", "Card", "card", "Identity", "identity", "SshKey", "sshKey", "fields", "f", "attachments", "passwordHistory", "ph", "AttachmentView", "fileSize", "ExpiryDateDelimitersPattern", "normalizeExpiryYearFormat", "yearInput", "yearInputIsEmpty", "expirationYear", "paddedYear", "getFullYear", "LinkedMetadata", "attributes", "_i18nKey", "i18nKey", "sortPosition", "linkedFieldOption", "linkedFieldOptions", "ItemView", "CardView", "_brand", "_number", "_subTitle", "maskedCode", "repeat", "maskedNumber", "subTitle", "count", "expiration", "normalizedYear", "exp", "getCardBrandByPatterns", "cardNum", "re", "CardholderName", "ExpMonth", "ExpYear", "Code", "Brand", "FieldView", "newField", "showValue", "showCount", "maskedValue", "IdentityView", "super", "_firstName", "_lastName", "fullName", "fullAddress", "address", "fullAddressPart2", "addressPart2", "fullAddressForCopy", "Title", "MiddleName", "Address1", "Address2", "Address3", "City", "State", "PostalCode", "Country", "Company", "Email", "Phone", "Ssn", "Username", "PassportNumber", "LicenseNumber", "FirstName", "LastName", "FullName", "Fido2CredentialView", "UriMatchStrategy", "CanLaunchWhitelist", "SafeUrls", "canLaunch", "LoginUriView", "_uri", "_domain", "_hostname", "_host", "_canLaunch", "hostnameOrUri", "hostOrUri", "isWebsite", "launchUri", "matchesUri", "targetUri", "equivalentDomains", "defaultUriMatch", "matchType", "targetDomain", "matchDomains", "add", "matchesDomain", "urlHost", "has", "domainUrlHost", "get", "LoginView", "l", "hasUris", "maskedPassword", "some", "hasTotp", "find", "hasFido2Credentials", "Password", "PasswordHistoryView", "SecureNoteView", "SshKeyView", "maskedPrivateKey", "lines", "maskLine", "line", "CipherView", "initializerKey", "None", "decryptionFailure", "localData", "item", "hasPasswordHistory", "hasAttachments", "hasOldAttachments", "hasFields", "passwordRevisionDisplayDate", "isDeleted", "isUnassigned", "linkedFieldValue", "linkedFieldI18nKey", "view", "Attachment", "decryptAttachmentKey", "decValue", "toAttachmentData", "toCardData", "Field", "toFieldData", "toIdentityData", "Fido2Credential", "toFido2CredentialData", "toISOString", "LoginUri", "validateChecksum", "clearTextUri", "localChecksum", "toLoginUriData", "bypassValidation", "toLoginData", "toPasswordHistoryData", "toSecureNoteData", "toSshKeyData", "Cipher", "model", "keyBytes", "promise", "attachment", "decAttachment", "field", "decField", "decPh", "toCipherData", "classInitializers", "workerApi", "addEventListener", "event", "request", "JSON", "parse", "jsonItem", "className", "postMessage", "stringify", "__webpack_module_cache__", "__webpack_require__", "moduleId", "cachedModule", "exports", "loaded", "__webpack_modules__", "m", "__webpack_exports__", "O", "chunkIds", "fn", "priority", "notFulfilled", "Infinity", "fulfilled", "j", "every", "splice", "getPrototypeOf", "__esModule", "ns", "def", "current", "getOwnPropertyNames", "d", "definition", "o", "defineProperty", "enumerable", "chunkId", "miniCssF", "globalThis", "Function", "Symbol", "toStringTag", "scriptUrl", "importScripts", "location", "document", "currentScript", "tagName", "src", "scripts", "getElementsByTagName", "installedChunks", "chunkLoadingGlobal", "parentChunkLoadingFunction", "bind", "moreModules", "runtime", "pop"],
	"sourceRoot": ""
}