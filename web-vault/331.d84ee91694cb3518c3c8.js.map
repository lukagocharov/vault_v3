{"version":3,"file":"331.d84ee91694cb3518c3c8.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/validators/comma-separated-emails.validator.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/validators/org-seat-limit-reached.validator.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/nested-checkbox.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/nested-checkbox.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/member-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/member-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/member-dialog.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/user-confirm.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/user-confirm.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/common/people-table-data-source.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/common/base-members.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/base-bulk-confirm.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-confirm-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-confirm-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-delete-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-delete-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-enable-sm-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-enable-sm-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/base-bulk-remove.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-remove-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-remove-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-restore-revoke.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-restore-revoke.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-status.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-status.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/reset-password.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/reset-password.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/members.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/members.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/members-routing.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/members.module.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, Validators } from \"@angular/forms\";\n\nfunction validateEmails(emails: string) {\n  return (\n    emails\n      .split(\",\")\n      .map((email) => Validators.email(<AbstractControl>{ value: email.trim() }))\n      .find((_) => _ !== null) === undefined\n  );\n}\n\nexport function commaSeparatedEmails(control: AbstractControl): ValidationErrors | null {\n  if (control.value === \"\" || !control.value || validateEmails(control.value)) {\n    return null;\n  }\n  return { multipleEmails: { message: \"multipleInputEmails\" } };\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\n\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ProductTierType } from \"@bitwarden/common/billing/enums\";\n\n/**\n * If the organization doesn't allow additional seat options, this checks if the seat limit has been reached when adding\n * new users\n * @param organization An object representing the organization\n * @param allOrganizationUserEmails An array of strings with existing user email addresses\n * @param errorMessage A localized string to display if validation fails\n * @returns A function that validates an `AbstractControl` and returns `ValidationErrors` or `null`\n */\nexport function orgSeatLimitReachedValidator(\n  organization: Organization,\n  allOrganizationUserEmails: string[],\n  errorMessage: string,\n): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (control.value === \"\" || !control.value) {\n      return null;\n    }\n\n    const newEmailsToAdd = Array.from(\n      new Set(\n        control.value\n          .split(\",\")\n          .filter(\n            (newEmailToAdd: string) =>\n              newEmailToAdd &&\n              newEmailToAdd.trim() !== \"\" &&\n              !allOrganizationUserEmails.some(\n                (existingEmail) => existingEmail === newEmailToAdd.trim(),\n              ),\n          ),\n      ),\n    );\n\n    const productHasAdditionalSeatsOption =\n      organization.productTierType !== ProductTierType.Free &&\n      organization.productTierType !== ProductTierType.Families &&\n      organization.productTierType !== ProductTierType.TeamsStarter;\n\n    return !productHasAdditionalSeatsOption &&\n      allOrganizationUserEmails.length + newEmailsToAdd.length > organization.seats\n      ? { seatLimitReached: { message: errorMessage } }\n      : null;\n  };\n}\n","<div [formGroup]=\"checkboxes\">\n  <bit-form-control>\n    <input\n      type=\"checkbox\"\n      bitCheckbox\n      [formControlName]=\"parentId\"\n      [indeterminate]=\"parentIndeterminate\"\n    />\n    <bit-label>{{ parentId | i18n }}</bit-label>\n  </bit-form-control>\n  <div class=\"tw-ml-4\">\n    <ng-container *ngFor=\"let c of checkboxes.controls | keyvalue; trackBy: key\">\n      <div *ngIf=\"c.key != parentId\">\n        <bit-form-control>\n          <input type=\"checkbox\" bitCheckbox [formControl]=\"c.value\" (change)=\"onChildCheck()\" />\n          <bit-label>{{ c.key | i18n }}</bit-label>\n        </bit-form-control>\n      </div>\n    </ng-container>\n  </div>\n</div>\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { KeyValue } from \"@angular/common\";\nimport { Component, Input, OnInit, OnDestroy } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\n@Component({\n  selector: \"app-nested-checkbox\",\n  templateUrl: \"nested-checkbox.component.html\",\n})\nexport class NestedCheckboxComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  @Input() parentId: string;\n  @Input() checkboxes: FormGroup<Record<string, FormControl<boolean>>>;\n\n  get parentIndeterminate() {\n    return (\n      this.children.some(([key, control]) => control.value == true) &&\n      !this.children.every(([key, control]) => control.value == true)\n    );\n  }\n\n  ngOnInit(): void {\n    this.checkboxes.controls[this.parentId].valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        Object.values(this.checkboxes.controls).forEach((control) =>\n          control.setValue(value, { emitEvent: false }),\n        );\n      });\n  }\n\n  private get parentCheckbox() {\n    return this.checkboxes.controls[this.parentId];\n  }\n\n  get children() {\n    return Object.entries(this.checkboxes.controls).filter(([key, value]) => key != this.parentId);\n  }\n\n  protected onChildCheck() {\n    const parentChecked = this.children.every(([key, value]) => value.value == true);\n    this.parentCheckbox.setValue(parentChecked, { emitEvent: false });\n  }\n\n  protected key(index: number, item: KeyValue<string, FormControl<boolean>>) {\n    return item.key;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  pascalize(s: string) {\n    return Utils.camelToPascalCase(s);\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog [disablePadding]=\"!loading\" dialogSize=\"large\">\n    <span bitDialogTitle>\n      {{ title }}\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\" *ngIf=\"!loading && params.name\">{{\n        params.name\n      }}</span>\n      <span bitBadge variant=\"secondary\" *ngIf=\"isRevoked\">{{ \"revoked\" | i18n }}</span>\n    </span>\n    <div bitDialogContent>\n      <ng-container *ngIf=\"loading\">\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n      </ng-container>\n      <bit-tab-group\n        *ngIf=\"!loading && organization$ | async as organization\"\n        [(selectedIndex)]=\"tabIndex\"\n      >\n        <bit-tab [label]=\"'role' | i18n\">\n          <ng-container *ngIf=\"!editMode\">\n            <p bitTypography=\"body1\">{{ \"inviteUserDesc\" | i18n }}</p>\n            <bit-form-field *ngIf=\"{ seats: remainingSeats$ | async } as remaining\">\n              <bit-label>{{ \"email\" | i18n }}</bit-label>\n              <input id=\"emails\" type=\"text\" appAutoFocus bitInput formControlName=\"emails\" />\n\n              <bit-hint *ngIf=\"remaining.seats > 1\">{{\n                \"inviteMultipleEmailDesc\" | i18n: remaining.seats\n              }}</bit-hint>\n\n              <bit-hint *ngIf=\"remaining.seats === 1\">{{\n                \"inviteSingleEmailDesc\" | i18n\n              }}</bit-hint>\n\n              <bit-hint *ngIf=\"remaining.seats === 0\">{{ \"inviteZeroEmailDesc\" | i18n }}</bit-hint>\n            </bit-form-field>\n          </ng-container>\n          <bit-radio-group formControlName=\"type\">\n            <bit-label>\n              {{ \"memberRole\" | i18n }}\n              <a\n                bitLink\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                appA11yTitle=\"{{ 'learnMoreAboutMemberRoles' | i18n }}\"\n                href=\"https://bitwarden.com/help/user-types-access-control/\"\n                slot=\"end\"\n              >\n                <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n              </a>\n            </bit-label>\n            <bit-radio-button id=\"userTypeUser\" [value]=\"organizationUserType.User\">\n              <bit-label>{{ \"user\" | i18n }}</bit-label>\n              <bit-hint>{{ \"userDesc\" | i18n }}</bit-hint>\n            </bit-radio-button>\n            <bit-radio-button id=\"userTypeAdmin\" [value]=\"organizationUserType.Admin\">\n              <bit-label>{{ \"admin\" | i18n }}</bit-label>\n              <bit-hint>{{ \"adminDesc\" | i18n }}</bit-hint>\n            </bit-radio-button>\n            <bit-radio-button id=\"userTypeOwner\" [value]=\"organizationUserType.Owner\">\n              <bit-label>{{ \"owner\" | i18n }}</bit-label>\n              <bit-hint>{{ \"ownerDesc\" | i18n }}</bit-hint>\n            </bit-radio-button>\n            <bit-radio-button\n              id=\"userTypeCustom\"\n              [value]=\"organizationUserType.Custom\"\n              [disabled]=\"!organization.useCustomPermissions || null\"\n            >\n              <bit-label>{{ \"custom\" | i18n }}</bit-label>\n              <bit-hint>\n                <ng-container *ngIf=\"!organization.useCustomPermissions; else enterprise\">\n                  <p>\n                    {{ \"customDescNonEnterpriseStart\" | i18n\n                    }}<a\n                      bitLink\n                      href=\"https://bitwarden.com/contact/\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      >{{ \"customDescNonEnterpriseLink\" | i18n }}</a\n                    >{{ \"customDescNonEnterpriseEnd\" | i18n }}\n                  </p>\n                </ng-container>\n                <ng-template #enterprise>\n                  <p>{{ \"customDesc\" | i18n }}</p>\n                </ng-template>\n              </bit-hint>\n            </bit-radio-button>\n          </bit-radio-group>\n          <ng-container *ngIf=\"customUserTypeSelected\">\n            <div class=\"tw-grid tw-grid-cols-12 tw-gap-4\" [formGroup]=\"permissionsGroup\">\n              <div class=\"tw-col-span-4\">\n                <bit-form-control>\n                  <input type=\"checkbox\" bitCheckbox formControlName=\"accessEventLogs\" />\n                  <bit-label>{{ \"accessEventLogs\" | i18n }}</bit-label>\n                </bit-form-control>\n                <bit-form-control>\n                  <input type=\"checkbox\" bitCheckbox formControlName=\"accessImportExport\" />\n                  <bit-label>{{ \"accessImportExport\" | i18n }}</bit-label>\n                </bit-form-control>\n                <bit-form-control>\n                  <input type=\"checkbox\" bitCheckbox formControlName=\"accessReports\" />\n                  <bit-label>{{ \"accessReports\" | i18n }}</bit-label>\n                </bit-form-control>\n              </div>\n              <div class=\"tw-col-span-4\">\n                <app-nested-checkbox\n                  parentId=\"manageAllCollections\"\n                  [checkboxes]=\"permissionsGroup.controls.manageAllCollectionsGroup\"\n                >\n                </app-nested-checkbox>\n              </div>\n              <div class=\"tw-col-span-4\">\n                <div class=\"tw-mb-3\">\n                  <bit-form-control>\n                    <input type=\"checkbox\" bitCheckbox formControlName=\"manageGroups\" />\n                    <bit-label>{{ \"manageGroups\" | i18n }}</bit-label>\n                  </bit-form-control>\n                  <bit-form-control>\n                    <input type=\"checkbox\" bitCheckbox formControlName=\"manageSso\" />\n                    <bit-label>{{ \"manageSso\" | i18n }}</bit-label>\n                  </bit-form-control>\n                  <bit-form-control>\n                    <input type=\"checkbox\" bitCheckbox formControlName=\"managePolicies\" />\n                    <bit-label>{{ \"managePolicies\" | i18n }}</bit-label>\n                  </bit-form-control>\n                  <bit-form-control>\n                    <input\n                      id=\"manageUsers\"\n                      type=\"checkbox\"\n                      bitCheckbox\n                      formControlName=\"manageUsers\"\n                      (change)=\"handleDependentPermissions()\"\n                    />\n                    <bit-label>{{ \"manageUsers\" | i18n }}</bit-label>\n                  </bit-form-control>\n                  <bit-form-control>\n                    <input\n                      type=\"checkbox\"\n                      bitCheckbox\n                      formControlName=\"manageResetPassword\"\n                      (change)=\"handleDependentPermissions()\"\n                    />\n                    <bit-label>{{ \"manageAccountRecovery\" | i18n }}</bit-label>\n                  </bit-form-control>\n                </div>\n              </div>\n            </div>\n          </ng-container>\n          <ng-container *ngIf=\"organization.useSecretsManager\">\n            <h3 class=\"tw-mt-4\">\n              {{ \"secretsManager\" | i18n }}\n              <a\n                bitLink\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n                href=\"https://bitwarden.com/help/manage-your-organization/#access-to-secrets-manager\"\n              >\n                <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n              </a>\n            </h3>\n            <p class=\"tw-text-muted\">{{ \"secretsManagerAccessDescription\" | i18n }}</p>\n            <bit-form-control>\n              <input\n                type=\"checkbox\"\n                [disabled]=\"isOnSecretsManagerStandalone\"\n                bitCheckbox\n                formControlName=\"accessSecretsManager\"\n              />\n              <bit-label>\n                {{ \"userAccessSecretsManagerGA\" | i18n }}\n              </bit-label>\n            </bit-form-control>\n          </ng-container>\n          <bit-form-field>\n            <bit-label>{{ \"externalId\" | i18n }}</bit-label>\n            <input bitInput type=\"text\" formControlName=\"externalId\" />\n            <bit-hint>{{ \"externalIdDesc\" | i18n }}</bit-hint>\n          </bit-form-field>\n        </bit-tab>\n        <bit-tab *ngIf=\"organization.useGroups\" [label]=\"'groups' | i18n\">\n          <div class=\"tw-mb-6\">\n            {{\n              (restrictEditingSelf$ | async)\n                ? (\"restrictedGroupAccess\" | i18n)\n                : (\"groupAccessUserDesc\" | i18n)\n            }}\n          </div>\n          <bit-access-selector\n            formControlName=\"groups\"\n            [items]=\"groupAccessItems\"\n            [columnHeader]=\"'groups' | i18n\"\n            [selectorLabelText]=\"'selectGroups' | i18n\"\n            [emptySelectionText]=\"'noGroupsAdded' | i18n\"\n            [hideMultiSelect]=\"restrictEditingSelf$ | async\"\n          ></bit-access-selector>\n        </bit-tab>\n        <bit-tab [label]=\"'collections' | i18n\">\n          <div class=\"tw-mb-6\" *ngIf=\"restrictEditingSelf$ | async\">\n            {{ \"cannotAddYourselfToCollections\" | i18n }}\n          </div>\n          <div\n            *ngIf=\"\n              !(restrictEditingSelf$ | async) &&\n              (organization.useGroups || !(canAssignAccessToAnyCollection$ | async))\n            \"\n            class=\"tw-mb-6\"\n          >\n            <span *ngIf=\"organization.useGroups\">\n              {{ \"userPermissionOverrideHelperDesc\" | i18n }}\n            </span>\n            <span *ngIf=\"!(canAssignAccessToAnyCollection$ | async)\">\n              {{ \"restrictedCollectionAssignmentDesc\" | i18n }}\n            </span>\n          </div>\n          <bit-access-selector\n            [permissionMode]=\"PermissionMode.Edit\"\n            formControlName=\"access\"\n            [showGroupColumn]=\"organization.useGroups\"\n            [items]=\"collectionAccessItems\"\n            [columnHeader]=\"'collection' | i18n\"\n            [selectorLabelText]=\"'selectCollections' | i18n\"\n            [emptySelectionText]=\"'noCollectionsAdded' | i18n\"\n            [hideMultiSelect]=\"restrictEditingSelf$ | async\"\n          ></bit-access-selector\n        ></bit-tab>\n      </bit-tab-group>\n    </div>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton bitFormButton buttonType=\"primary\" [disabled]=\"loading\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button\n        type=\"button\"\n        bitButton\n        bitFormButton\n        buttonType=\"secondary\"\n        (click)=\"cancel()\"\n        [disabled]=\"loading\"\n      >\n        {{ \"cancel\" | i18n }}\n      </button>\n      <div class=\"tw-ml-auto\">\n        <button\n          *ngIf=\"editMode && isRevoked\"\n          type=\"button\"\n          bitButton\n          bitFormButton\n          buttonType=\"secondary\"\n          [bitAction]=\"restore\"\n          [disabled]=\"loading\"\n        >\n          {{ \"restoreAccess\" | i18n }}\n        </button>\n        <button\n          *ngIf=\"editMode && !isRevoked\"\n          type=\"button\"\n          bitButton\n          bitFormButton\n          buttonType=\"secondary\"\n          [bitAction]=\"revoke\"\n          [disabled]=\"loading\"\n        >\n          {{ \"revokeAccess\" | i18n }}\n        </button>\n        <button\n          *ngIf=\"\n            editMode && (!(accountDeprovisioningEnabled$ | async) || !params.managedByOrganization)\n          \"\n          type=\"button\"\n          bitIconButton=\"bwi-close\"\n          buttonType=\"danger\"\n          bitFormButton\n          [appA11yTitle]=\"'remove' | i18n\"\n          [bitAction]=\"remove\"\n          [disabled]=\"loading\"\n        ></button>\n        <button\n          *ngIf=\"\n            editMode && (accountDeprovisioningEnabled$ | async) && params.managedByOrganization\n          \"\n          type=\"button\"\n          bitIconButton=\"bwi-trash\"\n          buttonType=\"danger\"\n          bitFormButton\n          [appA11yTitle]=\"'delete' | i18n\"\n          [bitAction]=\"delete\"\n          [disabled]=\"loading\"\n        ></button>\n      </div>\n    </ng-container>\n  </bit-dialog>\n</form>\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnDestroy } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport {\n  combineLatest,\n  firstValueFrom,\n  map,\n  Observable,\n  of,\n  shareReplay,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport {\n  CollectionAccessSelectionView,\n  CollectionAdminService,\n  CollectionAdminView,\n  OrganizationUserApiService,\n  CollectionView,\n} from \"@bitwarden/admin-console/common\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport {\n  OrganizationUserStatusType,\n  OrganizationUserType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { PermissionsApi } from \"@bitwarden/common/admin-console/models/api/permissions.api\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { ProductTierType } from \"@bitwarden/common/billing/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { DialogService, ToastService } from \"@bitwarden/components\";\n\nimport {\n  GroupApiService,\n  GroupDetailsView,\n  OrganizationUserAdminView,\n  UserAdminService,\n} from \"../../../core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  convertToPermission,\n  convertToSelectionView,\n  PermissionMode,\n} from \"../../../shared/components/access-selector\";\n\nimport { commaSeparatedEmails } from \"./validators/comma-separated-emails.validator\";\nimport { orgSeatLimitReachedValidator } from \"./validators/org-seat-limit-reached.validator\";\n\nexport enum MemberDialogTab {\n  Role = 0,\n  Groups = 1,\n  Collections = 2,\n}\n\nexport interface MemberDialogParams {\n  name: string;\n  organizationId: string;\n  organizationUserId: string;\n  allOrganizationUserEmails: string[];\n  usesKeyConnector: boolean;\n  isOnSecretsManagerStandalone: boolean;\n  initialTab?: MemberDialogTab;\n  numSeatsUsed: number;\n  managedByOrganization?: boolean;\n}\n\nexport enum MemberDialogResult {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n  Deleted = \"deleted\",\n  Revoked = \"revoked\",\n  Restored = \"restored\",\n}\n\n@Component({\n  templateUrl: \"member-dialog.component.html\",\n})\nexport class MemberDialogComponent implements OnDestroy {\n  loading = true;\n  editMode = false;\n  isRevoked = false;\n  title: string;\n  access: \"all\" | \"selected\" = \"selected\";\n  collections: CollectionView[] = [];\n  organizationUserType = OrganizationUserType;\n  PermissionMode = PermissionMode;\n  showNoMasterPasswordWarning = false;\n  isOnSecretsManagerStandalone: boolean;\n  remainingSeats$: Observable<number>;\n\n  protected organization$: Observable<Organization>;\n  protected collectionAccessItems: AccessItemView[] = [];\n  protected groupAccessItems: AccessItemView[] = [];\n  protected tabIndex: MemberDialogTab;\n  protected formGroup = this.formBuilder.group({\n    emails: [\"\"],\n    type: OrganizationUserType.User,\n    externalId: this.formBuilder.control({ value: \"\", disabled: true }),\n    accessSecretsManager: false,\n    access: [[] as AccessItemValue[]],\n    groups: [[] as AccessItemValue[]],\n  });\n\n  protected allowAdminAccessToAllCollectionItems$: Observable<boolean>;\n  protected restrictEditingSelf$: Observable<boolean>;\n  protected canAssignAccessToAnyCollection$: Observable<boolean>;\n\n  protected permissionsGroup = this.formBuilder.group({\n    manageAllCollectionsGroup: this.formBuilder.group<Record<string, boolean>>({\n      manageAllCollections: false,\n      createNewCollections: false,\n      editAnyCollection: false,\n      deleteAnyCollection: false,\n    }),\n    accessEventLogs: false,\n    accessImportExport: false,\n    accessReports: false,\n    manageGroups: false,\n    manageSso: false,\n    managePolicies: false,\n    manageUsers: false,\n    manageResetPassword: false,\n  });\n\n  protected accountDeprovisioningEnabled$: Observable<boolean> = this.configService.getFeatureFlag$(\n    FeatureFlag.AccountDeprovisioning,\n  );\n\n  private destroy$ = new Subject<void>();\n\n  get customUserTypeSelected(): boolean {\n    return this.formGroup.value.type === OrganizationUserType.Custom;\n  }\n\n  constructor(\n    @Inject(DIALOG_DATA) protected params: MemberDialogParams,\n    private dialogRef: DialogRef<MemberDialogResult>,\n    private i18nService: I18nService,\n    private formBuilder: FormBuilder,\n    // TODO: We should really look into consolidating naming conventions for these services\n    private collectionAdminService: CollectionAdminService,\n    private groupService: GroupApiService,\n    private userService: UserAdminService,\n    private organizationUserApiService: OrganizationUserApiService,\n    private dialogService: DialogService,\n    private accountService: AccountService,\n    organizationService: OrganizationService,\n    private toastService: ToastService,\n    private configService: ConfigService,\n  ) {\n    this.organization$ = organizationService\n      .get$(this.params.organizationId)\n      .pipe(shareReplay({ refCount: true, bufferSize: 1 }));\n\n    this.editMode = this.params.organizationUserId != null;\n    this.tabIndex = this.params.initialTab ?? MemberDialogTab.Role;\n    this.title = this.i18nService.t(this.editMode ? \"editMember\" : \"inviteMember\");\n    this.isOnSecretsManagerStandalone = this.params.isOnSecretsManagerStandalone;\n\n    if (this.isOnSecretsManagerStandalone) {\n      this.formGroup.patchValue({\n        accessSecretsManager: true,\n      });\n    }\n\n    const groups$ = this.organization$.pipe(\n      switchMap((organization) =>\n        organization.useGroups\n          ? this.groupService.getAllDetails(this.params.organizationId)\n          : of([] as GroupDetailsView[]),\n      ),\n    );\n\n    const userDetails$ = this.params.organizationUserId\n      ? this.userService.get(this.params.organizationId, this.params.organizationUserId)\n      : of(null);\n\n    this.allowAdminAccessToAllCollectionItems$ = this.organization$.pipe(\n      map((organization) => {\n        return organization.allowAdminAccessToAllCollectionItems;\n      }),\n    );\n\n    // The orgUser cannot manage their own Group assignments if collection access is restricted\n    this.restrictEditingSelf$ = combineLatest([\n      this.allowAdminAccessToAllCollectionItems$,\n      userDetails$,\n      this.accountService.activeAccount$,\n    ]).pipe(\n      map(\n        ([allowAdminAccess, userDetails, activeAccount]) =>\n          !allowAdminAccess && userDetails != null && userDetails.userId == activeAccount.id,\n      ),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    this.restrictEditingSelf$.pipe(takeUntil(this.destroy$)).subscribe((restrictEditingSelf) => {\n      if (restrictEditingSelf) {\n        this.formGroup.controls.groups.disable();\n      } else {\n        this.formGroup.controls.groups.enable();\n      }\n    });\n\n    this.canAssignAccessToAnyCollection$ = combineLatest([\n      this.organization$,\n      this.allowAdminAccessToAllCollectionItems$,\n    ]).pipe(\n      map(\n        ([org, allowAdminAccessToAllCollectionItems]) =>\n          org.canEditAnyCollection ||\n          // Manage Users custom permission cannot edit any collection but they can assign access from this dialog\n          // if permitted by collection management settings\n          (org.permissions.manageUsers && allowAdminAccessToAllCollectionItems),\n      ),\n    );\n\n    combineLatest({\n      organization: this.organization$,\n      collections: this.collectionAdminService.getAll(this.params.organizationId),\n      userDetails: userDetails$,\n      groups: groups$,\n    })\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(({ organization, collections, userDetails, groups }) => {\n        this.setFormValidators(organization);\n\n        // Groups tab: populate available groups\n        this.groupAccessItems = [].concat(\n          groups.map<AccessItemView>((g) => mapGroupToAccessItemView(g)),\n        );\n\n        // Collections tab: Populate all available collections (including current user access where applicable)\n        this.collectionAccessItems = collections\n          .map((c) =>\n            mapCollectionToAccessItemView(\n              c,\n              organization,\n              userDetails == null\n                ? undefined\n                : c.users.find((access) => access.id === userDetails.id),\n            ),\n          )\n          // But remove collections that we can't assign access to, unless the user is already assigned\n          .filter(\n            (item) =>\n              !item.readonly || userDetails?.collections.some((access) => access.id == item.id),\n          );\n\n        if (userDetails != null) {\n          this.loadOrganizationUser(userDetails, groups, collections, organization);\n        }\n\n        this.loading = false;\n      });\n\n    this.remainingSeats$ = this.organization$.pipe(\n      map((organization) => organization.seats - this.params.numSeatsUsed),\n    );\n  }\n\n  private setFormValidators(organization: Organization) {\n    const emailsControlValidators = [\n      Validators.required,\n      commaSeparatedEmails,\n      orgSeatLimitReachedValidator(\n        organization,\n        this.params.allOrganizationUserEmails,\n        this.i18nService.t(\"subscriptionUpgrade\", organization.seats),\n      ),\n    ];\n\n    const emailsControl = this.formGroup.get(\"emails\");\n    emailsControl.setValidators(emailsControlValidators);\n    emailsControl.updateValueAndValidity();\n  }\n\n  private loadOrganizationUser(\n    userDetails: OrganizationUserAdminView,\n    groups: GroupDetailsView[],\n    collections: CollectionAdminView[],\n    organization: Organization,\n  ) {\n    if (!userDetails) {\n      throw new Error(\"Could not find user to edit.\");\n    }\n    this.isRevoked = userDetails.status === OrganizationUserStatusType.Revoked;\n    this.showNoMasterPasswordWarning =\n      userDetails.status > OrganizationUserStatusType.Invited &&\n      userDetails.hasMasterPassword === false;\n    const allCollectionsPermissions = {\n      createNewCollections: userDetails.permissions.createNewCollections,\n      editAnyCollection: userDetails.permissions.editAnyCollection,\n      deleteAnyCollection: userDetails.permissions.deleteAnyCollection,\n      manageAllCollections:\n        userDetails.permissions.createNewCollections &&\n        userDetails.permissions.editAnyCollection &&\n        userDetails.permissions.deleteAnyCollection,\n    };\n    if (userDetails.type === OrganizationUserType.Custom) {\n      this.permissionsGroup.patchValue({\n        accessEventLogs: userDetails.permissions.accessEventLogs,\n        accessImportExport: userDetails.permissions.accessImportExport,\n        accessReports: userDetails.permissions.accessReports,\n        manageGroups: userDetails.permissions.manageGroups,\n        manageSso: userDetails.permissions.manageSso,\n        managePolicies: userDetails.permissions.managePolicies,\n        manageUsers: userDetails.permissions.manageUsers,\n        manageResetPassword: userDetails.permissions.manageResetPassword,\n        manageAllCollectionsGroup: allCollectionsPermissions,\n      });\n    }\n\n    const collectionsFromGroups = groups\n      .filter((group) => userDetails.groups.includes(group.id))\n      .flatMap((group) =>\n        group.collections.map((accessSelection) => {\n          const collection = collections.find((c) => c.id === accessSelection.id);\n          return { group, collection, accessSelection };\n        }),\n      );\n\n    // Populate additional collection access via groups (rendered as separate rows from user access)\n    this.collectionAccessItems = this.collectionAccessItems.concat(\n      collectionsFromGroups.map(({ collection, accessSelection, group }) =>\n        mapCollectionToAccessItemView(collection, organization, accessSelection, group),\n      ),\n    );\n\n    // Set current collections and groups the user has access to (excluding collections the current user doesn't have\n    // permissions to change - they are included as readonly via the CollectionAccessItems)\n    const accessSelections = mapToAccessSelections(userDetails, this.collectionAccessItems);\n    const groupAccessSelections = mapToGroupAccessSelections(userDetails.groups);\n\n    this.formGroup.removeControl(\"emails\");\n    this.formGroup.patchValue({\n      type: userDetails.type,\n      externalId: userDetails.externalId,\n      access: accessSelections,\n      accessSecretsManager: userDetails.accessSecretsManager,\n      groups: groupAccessSelections,\n    });\n  }\n\n  check(c: CollectionView, select?: boolean) {\n    (c as any).checked = select == null ? !(c as any).checked : select;\n    if (!(c as any).checked) {\n      c.readOnly = false;\n    }\n  }\n\n  selectAll(select: boolean) {\n    this.collections.forEach((c) => this.check(c, select));\n  }\n\n  setRequestPermissions(p: PermissionsApi, clearPermissions: boolean): PermissionsApi {\n    if (clearPermissions) {\n      return new PermissionsApi();\n    }\n    const partialPermissions: Partial<PermissionsApi> = {\n      accessEventLogs: this.permissionsGroup.value.accessEventLogs,\n      accessImportExport: this.permissionsGroup.value.accessImportExport,\n      accessReports: this.permissionsGroup.value.accessReports,\n      manageGroups: this.permissionsGroup.value.manageGroups,\n      manageSso: this.permissionsGroup.value.manageSso,\n      managePolicies: this.permissionsGroup.value.managePolicies,\n      manageUsers: this.permissionsGroup.value.manageUsers,\n      manageResetPassword: this.permissionsGroup.value.manageResetPassword,\n      createNewCollections:\n        this.permissionsGroup.value.manageAllCollectionsGroup.createNewCollections,\n      editAnyCollection: this.permissionsGroup.value.manageAllCollectionsGroup.editAnyCollection,\n      deleteAnyCollection:\n        this.permissionsGroup.value.manageAllCollectionsGroup.deleteAnyCollection,\n    };\n\n    return Object.assign(p, partialPermissions);\n  }\n\n  handleDependentPermissions() {\n    // Manage Password Reset (Account Recovery) must have Manage Users enabled\n    if (\n      this.permissionsGroup.value.manageResetPassword &&\n      !this.permissionsGroup.value.manageUsers\n    ) {\n      this.permissionsGroup.value.manageUsers = true;\n      (document.getElementById(\"manageUsers\") as HTMLInputElement).checked = true;\n      this.toastService.showToast({\n        variant: \"info\",\n        title: null,\n        message: this.i18nService.t(\"accountRecoveryManageUsers\"),\n      });\n    }\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      if (this.tabIndex !== MemberDialogTab.Role) {\n        this.toastService.showToast({\n          variant: \"error\",\n          title: null,\n          message: this.i18nService.t(\"fieldOnTabRequiresAttention\", this.i18nService.t(\"role\")),\n        });\n      }\n      return;\n    }\n\n    const organization = await firstValueFrom(this.organization$);\n\n    if (!organization.useCustomPermissions && this.customUserTypeSelected) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: null,\n        message: this.i18nService.t(\"customNonEnterpriseError\"),\n      });\n      return;\n    }\n\n    const userView = new OrganizationUserAdminView();\n    userView.id = this.params.organizationUserId;\n    userView.organizationId = this.params.organizationId;\n    userView.type = this.formGroup.value.type;\n    userView.permissions = this.setRequestPermissions(\n      userView.permissions ?? new PermissionsApi(),\n      userView.type !== OrganizationUserType.Custom,\n    );\n    userView.collections = this.formGroup.value.access\n      .filter((v) => v.type === AccessItemType.Collection)\n      .map(convertToSelectionView);\n\n    userView.groups = (await firstValueFrom(this.restrictEditingSelf$))\n      ? null\n      : this.formGroup.value.groups.map((m) => m.id);\n\n    userView.accessSecretsManager = this.formGroup.value.accessSecretsManager;\n\n    if (this.editMode) {\n      await this.userService.save(userView);\n    } else {\n      userView.id = this.params.organizationUserId;\n      const maxEmailsCount =\n        organization.productTierType === ProductTierType.TeamsStarter ? 10 : 20;\n      const emails = [...new Set(this.formGroup.value.emails.trim().split(/\\s*,\\s*/))];\n      if (emails.length > maxEmailsCount) {\n        this.formGroup.controls.emails.setErrors({\n          tooManyEmails: { message: this.i18nService.t(\"tooManyEmails\", maxEmailsCount) },\n        });\n        return;\n      }\n      if (\n        organization.hasReseller &&\n        this.params.numSeatsUsed + emails.length > organization.seats\n      ) {\n        this.formGroup.controls.emails.setErrors({\n          tooManyEmails: { message: this.i18nService.t(\"seatLimitReachedContactYourProvider\") },\n        });\n        return;\n      }\n      await this.userService.invite(emails, userView);\n    }\n\n    this.toastService.showToast({\n      variant: \"success\",\n      title: null,\n      message: this.i18nService.t(\n        this.editMode ? \"editedUserId\" : \"invitedUsers\",\n        this.params.name,\n      ),\n    });\n    this.close(MemberDialogResult.Saved);\n  };\n\n  remove = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    const message = this.params.usesKeyConnector\n      ? \"removeUserConfirmationKeyConnector\"\n      : \"removeOrgUserConfirmation\";\n\n    let confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"removeUserIdAccess\", placeholders: [this.params.name] },\n      content: { key: message },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (this.showNoMasterPasswordWarning) {\n      confirmed = await this.noMasterPasswordConfirmationDialog();\n\n      if (!confirmed) {\n        return false;\n      }\n    }\n\n    await this.organizationUserApiService.removeOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId,\n    );\n\n    this.toastService.showToast({\n      variant: \"success\",\n      title: null,\n      message: this.i18nService.t(\"removedUserId\", this.params.name),\n    });\n    this.close(MemberDialogResult.Deleted);\n  };\n\n  revoke = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    let confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"revokeUserId\", placeholders: [this.params.name] },\n      content: { key: \"revokeUserConfirmation\" },\n      acceptButtonText: { key: \"revokeAccess\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (this.showNoMasterPasswordWarning) {\n      confirmed = await this.noMasterPasswordConfirmationDialog();\n\n      if (!confirmed) {\n        return false;\n      }\n    }\n\n    await this.organizationUserApiService.revokeOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId,\n    );\n\n    this.toastService.showToast({\n      variant: \"success\",\n      title: null,\n      message: this.i18nService.t(\"revokedUserId\", this.params.name),\n    });\n    this.isRevoked = true;\n    this.close(MemberDialogResult.Revoked);\n  };\n\n  restore = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    await this.organizationUserApiService.restoreOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId,\n    );\n\n    this.toastService.showToast({\n      variant: \"success\",\n      title: null,\n      message: this.i18nService.t(\"restoredUserId\", this.params.name),\n    });\n    this.isRevoked = false;\n    this.close(MemberDialogResult.Restored);\n  };\n\n  delete = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: {\n        key: \"deleteOrganizationUser\",\n        placeholders: [this.params.name],\n      },\n      content: {\n        key: \"deleteOrganizationUserWarningDesc\",\n        placeholders: [this.params.name],\n      },\n      type: \"warning\",\n      acceptButtonText: { key: \"delete\" },\n      cancelButtonText: { key: \"cancel\" },\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    await this.organizationUserApiService.deleteOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId,\n    );\n\n    this.toastService.showToast({\n      variant: \"success\",\n      title: null,\n      message: this.i18nService.t(\"organizationUserDeleted\", this.params.name),\n    });\n    this.close(MemberDialogResult.Deleted);\n  };\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected async cancel() {\n    this.close(MemberDialogResult.Canceled);\n  }\n\n  private close(result: MemberDialogResult) {\n    this.dialogRef.close(result);\n  }\n\n  private noMasterPasswordConfirmationDialog() {\n    return this.dialogService.openSimpleDialog({\n      title: {\n        key: \"removeOrgUserNoMasterPasswordTitle\",\n      },\n      content: {\n        key: \"removeOrgUserNoMasterPasswordDesc\",\n        placeholders: [this.params.name],\n      },\n      type: \"warning\",\n    });\n  }\n\n  protected readonly ProductTierType = ProductTierType;\n}\n\nfunction mapCollectionToAccessItemView(\n  collection: CollectionAdminView,\n  organization: Organization,\n  accessSelection?: CollectionAccessSelectionView,\n  group?: GroupDetailsView,\n): AccessItemView {\n  return {\n    type: AccessItemType.Collection,\n    id: group ? `${collection.id}-${group.id}` : collection.id,\n    labelName: collection.name,\n    listName: collection.name,\n    readonly: group !== undefined || !collection.canEditUserAccess(organization),\n    readonlyPermission: accessSelection ? convertToPermission(accessSelection) : undefined,\n    viaGroupName: group?.name,\n  };\n}\n\nfunction mapGroupToAccessItemView(group: GroupDetailsView): AccessItemView {\n  return {\n    type: AccessItemType.Group,\n    id: group.id,\n    labelName: group.name,\n    listName: group.name,\n  };\n}\n\nfunction mapToAccessSelections(\n  user: OrganizationUserAdminView,\n  items: AccessItemView[],\n): AccessItemValue[] {\n  if (user == undefined) {\n    return [];\n  }\n\n  return (\n    user.collections\n      // The FormControl value only represents editable collection access - exclude readonly access selections\n      .filter((selection) => !items.find((item) => item.id == selection.id).readonly)\n      .map<AccessItemValue>((selection) => ({\n        id: selection.id,\n        type: AccessItemType.Collection,\n        permission: convertToPermission(selection),\n      }))\n  );\n}\n\nfunction mapToGroupAccessSelections(groups: string[]): AccessItemValue[] {\n  if (groups == undefined) {\n    return [];\n  }\n  return [].concat(\n    groups.map((groupId) => ({\n      id: groupId,\n      type: AccessItemType.Group,\n    })),\n  );\n}\n\n/**\n * Strongly typed helper to open a UserDialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Configuration for the dialog\n */\nexport function openUserAddEditDialog(\n  dialogService: DialogService,\n  config: DialogConfig<MemberDialogParams>,\n) {\n  return dialogService.open<MemberDialogResult, MemberDialogParams>(MemberDialogComponent, config);\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { RadioButtonModule } from \"@bitwarden/components\";\n\nimport { SharedOrganizationModule } from \"../../../shared\";\n\nimport { MemberDialogComponent } from \"./member-dialog.component\";\nimport { NestedCheckboxComponent } from \"./nested-checkbox.component\";\n\n@NgModule({\n  declarations: [MemberDialogComponent, NestedCheckboxComponent],\n  imports: [SharedOrganizationModule, RadioButtonModule],\n  exports: [MemberDialogComponent],\n})\nexport class UserDialogModule {}\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\n\nimport { OrganizationManagementPreferencesService } from \"@bitwarden/common/admin-console/abstractions/organization-management-preferences/organization-management-preferences.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { KeyService } from \"@bitwarden/key-management\";\n\nexport type UserConfirmDialogData = {\n  name: string;\n  userId: string;\n  publicKey: Uint8Array;\n  confirmUser: (publicKey: Uint8Array) => Promise<void>;\n};\n\n@Component({\n  selector: \"app-user-confirm\",\n  templateUrl: \"user-confirm.component.html\",\n})\nexport class UserConfirmComponent implements OnInit {\n  name: string;\n  userId: string;\n  publicKey: Uint8Array;\n\n  loading = true;\n  fingerprint: string;\n  formPromise: Promise<any>;\n\n  formGroup = new FormGroup({\n    dontAskAgain: new FormControl(false),\n  });\n\n  constructor(\n    @Inject(DIALOG_DATA) protected data: UserConfirmDialogData,\n    private dialogRef: DialogRef,\n    private keyService: KeyService,\n    private logService: LogService,\n    private organizationManagementPreferencesService: OrganizationManagementPreferencesService,\n  ) {\n    this.name = data.name;\n    this.userId = data.userId;\n    this.publicKey = data.publicKey;\n  }\n\n  async ngOnInit() {\n    try {\n      if (this.publicKey != null) {\n        const fingerprint = await this.keyService.getFingerprint(this.userId, this.publicKey);\n        if (fingerprint != null) {\n          this.fingerprint = fingerprint.join(\"-\");\n        }\n      }\n    } catch (e) {\n      this.logService.error(e);\n    }\n    this.loading = false;\n  }\n\n  submit = async () => {\n    if (this.loading) {\n      return;\n    }\n\n    if (this.formGroup.value.dontAskAgain) {\n      await this.organizationManagementPreferencesService.autoConfirmFingerPrints.set(true);\n    }\n\n    await this.data.confirmUser(this.publicKey);\n\n    this.dialogRef.close();\n  };\n\n  static open(dialogService: DialogService, config: DialogConfig<UserConfirmDialogData>) {\n    return dialogService.open(UserConfirmComponent, config);\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <span bitDialogTitle>\n      {{ \"confirmUser\" | i18n }}\n      <span class=\"tw-text-muted\" bitTypography=\"body1\">{{ name }}</span>\n    </span>\n    <ng-container bitDialogContent>\n      <p bitTypography=\"body1\">\n        {{ \"fingerprintEnsureIntegrityVerify\" | i18n }}\n        <a\n          bitLink\n          href=\"https://bitwarden.com/help/fingerprint-phrase/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {{ \"learnMore\" | i18n }}</a\n        >\n      </p>\n      <p bitTypography=\"body1\">\n        <code>{{ fingerprint }}</code>\n      </p>\n      <bit-form-control>\n        <input type=\"checkbox\" bitCheckbox formControlName=\"dontAskAgain\" />\n        <bit-label>{{ \"dontAskFingerprintAgain\" | i18n }}</bit-label>\n      </bit-form-control>\n    </ng-container>\n    <ng-container bitDialogFooter>\n      <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n        {{ \"confirm\" | i18n }}\n      </button>\n      <button bitButton bitFormButton type=\"button\" buttonType=\"secondary\" bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport {\n  OrganizationUserStatusType,\n  ProviderUserStatusType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { StatusType, UserViewTypes } from \"./base-members.component\";\n\nconst MaxCheckedCount = 500;\n\n/**\n * Returns true if the user matches the status, or where the status is `null`, if the user is active (not revoked).\n */\nfunction statusFilter(user: UserViewTypes, status: StatusType) {\n  if (status == null) {\n    return user.status != OrganizationUserStatusType.Revoked;\n  }\n\n  return user.status === status;\n}\n\n/**\n * Returns true if the string matches the user's id, name, or email.\n * (The default string search includes all properties, which can return false positives for collection names etc.)\n */\nfunction textFilter(user: UserViewTypes, text: string) {\n  const normalizedText = text?.toLowerCase();\n  return (\n    !normalizedText || // null/empty strings should be ignored, i.e. always return true\n    user.email.toLowerCase().includes(normalizedText) ||\n    user.id.toLowerCase().includes(normalizedText) ||\n    user.name?.toLowerCase().includes(normalizedText)\n  );\n}\n\nexport function peopleFilter(searchText: string, status: StatusType) {\n  return (user: UserViewTypes) => statusFilter(user, status) && textFilter(user, searchText);\n}\n\n/**\n * An extended TableDataSource class for managing people (organization members and provider users).\n * It includes a tally of different statuses, utility methods, and other common functionality.\n */\nexport abstract class PeopleTableDataSource<T extends UserViewTypes> extends TableDataSource<T> {\n  protected abstract statusType: typeof OrganizationUserStatusType | typeof ProviderUserStatusType;\n\n  /**\n   * The number of 'active' users, that is, all users who are not in a revoked status.\n   */\n  activeUserCount: number;\n\n  invitedUserCount: number;\n  acceptedUserCount: number;\n  confirmedUserCount: number;\n  revokedUserCount: number;\n\n  override set data(data: T[]) {\n    super.data = data;\n\n    this.activeUserCount =\n      this.data?.filter((u) => u.status !== this.statusType.Revoked).length ?? 0;\n\n    this.invitedUserCount =\n      this.data?.filter((u) => u.status === this.statusType.Invited).length ?? 0;\n    this.acceptedUserCount =\n      this.data?.filter((u) => u.status === this.statusType.Accepted).length ?? 0;\n    this.confirmedUserCount =\n      this.data?.filter((u) => u.status === this.statusType.Confirmed).length ?? 0;\n    this.revokedUserCount =\n      this.data?.filter((u) => u.status === this.statusType.Revoked).length ?? 0;\n  }\n\n  override get data() {\n    // If you override a setter, you must also override the getter\n    return super.data;\n  }\n\n  /**\n   * Check or uncheck a user in the table\n   * @param select check the user (true), uncheck the user (false), or toggle the current state (null)\n   */\n  checkUser(user: T, select?: boolean) {\n    (user as any).checked = select == null ? !(user as any).checked : select;\n  }\n\n  getCheckedUsers() {\n    return this.data.filter((u) => (u as any).checked);\n  }\n\n  /**\n   * Check all filtered users (i.e. those rows that are currently visible)\n   * @param select check the filtered users (true) or uncheck the filtered users (false)\n   */\n  checkAllFilteredUsers(select: boolean) {\n    if (select) {\n      // Reset checkbox selection first so we know nothing else is selected\n      this.uncheckAllUsers();\n    }\n\n    const filteredUsers = this.filteredData;\n\n    const selectCount =\n      filteredUsers.length > MaxCheckedCount ? MaxCheckedCount : filteredUsers.length;\n    for (let i = 0; i < selectCount; i++) {\n      this.checkUser(filteredUsers[i], select);\n    }\n  }\n\n  uncheckAllUsers() {\n    this.data.forEach((u) => ((u as any).checked = false));\n  }\n\n  /**\n   * Remove a user from the data source. Use this to ensure the table is re-rendered after the change.\n   */\n  removeUser(user: T) {\n    // Note: use immutable functions so that we trigger setters to update the table\n    this.data = this.data.filter((u) => u != user);\n  }\n\n  /**\n   * Replace a user in the data source by matching on user.id. Use this to ensure the table is re-rendered after the change.\n   */\n  replaceUser(user: T) {\n    const index = this.data.findIndex((u) => u.id === user.id);\n    if (index > -1) {\n      // Clone the array so that the setter for dataSource.data is triggered to update the table rendering\n      const updatedData = this.data.slice();\n      updatedData[index] = user;\n      this.data = updatedData;\n    }\n  }\n}\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Directive } from \"@angular/core\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FormControl } from \"@angular/forms\";\nimport { firstValueFrom, lastValueFrom, debounceTime, combineLatest, BehaviorSubject } from \"rxjs\";\n\nimport { UserNamePipe } from \"@bitwarden/angular/pipes/user-name.pipe\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationManagementPreferencesService } from \"@bitwarden/common/admin-console/abstractions/organization-management-preferences/organization-management-preferences.service\";\nimport {\n  OrganizationUserStatusType,\n  OrganizationUserType,\n  ProviderUserStatusType,\n  ProviderUserType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { ProviderUserUserDetailsResponse } from \"@bitwarden/common/admin-console/models/response/provider/provider-user.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { DialogService, ToastService } from \"@bitwarden/components\";\nimport { KeyService } from \"@bitwarden/key-management\";\n\nimport { OrganizationUserView } from \"../organizations/core/views/organization-user.view\";\nimport { UserConfirmComponent } from \"../organizations/manage/user-confirm.component\";\n\nimport { PeopleTableDataSource, peopleFilter } from \"./people-table-data-source\";\n\nexport type StatusType = OrganizationUserStatusType | ProviderUserStatusType;\nexport type UserViewTypes = ProviderUserUserDetailsResponse | OrganizationUserView;\n\n/**\n * A refactored copy of BasePeopleComponent, using the component library table and other modern features.\n * This will replace BasePeopleComponent once all subclasses have been changed over to use this class.\n */\n@Directive()\nexport abstract class BaseMembersComponent<UserView extends UserViewTypes> {\n  /**\n   * Shows a banner alerting the admin that users need to be confirmed.\n   */\n  get showConfirmUsers(): boolean {\n    return (\n      this.dataSource.activeUserCount > 1 &&\n      this.dataSource.confirmedUserCount > 0 &&\n      this.dataSource.confirmedUserCount < 3 &&\n      this.dataSource.acceptedUserCount > 0\n    );\n  }\n\n  get showBulkConfirmUsers(): boolean {\n    return this.dataSource.acceptedUserCount > 0;\n  }\n\n  get showBulkReinviteUsers(): boolean {\n    return this.dataSource.invitedUserCount > 0;\n  }\n\n  abstract userType: typeof OrganizationUserType | typeof ProviderUserType;\n  abstract userStatusType: typeof OrganizationUserStatusType | typeof ProviderUserStatusType;\n\n  protected abstract dataSource: PeopleTableDataSource<UserView>;\n\n  firstLoaded: boolean;\n\n  /**\n   * The currently selected status filter, or null to show all active users.\n   */\n  status: StatusType | null;\n\n  /**\n   * The currently executing promise - used to avoid multiple user actions executing at once.\n   */\n  actionPromise: Promise<void>;\n\n  protected searchControl = new FormControl(\"\", { nonNullable: true });\n  protected statusToggle = new BehaviorSubject<StatusType | null>(null);\n\n  constructor(\n    protected apiService: ApiService,\n    protected i18nService: I18nService,\n    protected keyService: KeyService,\n    protected validationService: ValidationService,\n    private logService: LogService,\n    protected userNamePipe: UserNamePipe,\n    protected dialogService: DialogService,\n    protected organizationManagementPreferencesService: OrganizationManagementPreferencesService,\n    protected toastService: ToastService,\n  ) {\n    // Connect the search input and status toggles to the table dataSource filter\n    combineLatest([this.searchControl.valueChanges.pipe(debounceTime(200)), this.statusToggle])\n      .pipe(takeUntilDestroyed())\n      .subscribe(\n        ([searchText, status]) => (this.dataSource.filter = peopleFilter(searchText, status)),\n      );\n  }\n\n  abstract edit(user: UserView): void;\n  abstract getUsers(): Promise<ListResponse<UserView> | UserView[]>;\n  abstract removeUser(id: string): Promise<void>;\n  abstract reinviteUser(id: string): Promise<void>;\n  abstract confirmUser(user: UserView, publicKey: Uint8Array): Promise<void>;\n\n  async load() {\n    // Load new users from the server\n    const response = await this.getUsers();\n\n    // GetUsers can return a ListResponse or an Array\n    if (response instanceof ListResponse) {\n      this.dataSource.data = response.data != null && response.data.length > 0 ? response.data : [];\n    } else if (Array.isArray(response)) {\n      this.dataSource.data = response;\n    }\n\n    this.firstLoaded = true;\n  }\n\n  invite() {\n    this.edit(null);\n  }\n\n  protected async removeUserConfirmationDialog(user: UserView) {\n    return this.dialogService.openSimpleDialog({\n      title: this.userNamePipe.transform(user),\n      content: { key: \"removeUserConfirmation\" },\n      type: \"warning\",\n    });\n  }\n\n  async remove(user: UserView) {\n    const confirmed = await this.removeUserConfirmationDialog(user);\n    if (!confirmed) {\n      return false;\n    }\n\n    this.actionPromise = this.removeUser(user.id);\n    try {\n      await this.actionPromise;\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(\"removedUserId\", this.userNamePipe.transform(user)),\n      });\n      this.dataSource.removeUser(user);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async reinvite(user: UserView) {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    this.actionPromise = this.reinviteUser(user.id);\n    try {\n      await this.actionPromise;\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(\"hasBeenReinvited\", this.userNamePipe.transform(user)),\n      });\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async confirm(user: UserView) {\n    const confirmUser = async (publicKey: Uint8Array) => {\n      try {\n        this.actionPromise = this.confirmUser(user, publicKey);\n        await this.actionPromise;\n        user.status = this.userStatusType.Confirmed;\n        this.dataSource.replaceUser(user);\n\n        this.toastService.showToast({\n          variant: \"success\",\n          title: null,\n          message: this.i18nService.t(\"hasBeenConfirmed\", this.userNamePipe.transform(user)),\n        });\n      } catch (e) {\n        this.validationService.showError(e);\n        throw e;\n      } finally {\n        this.actionPromise = null;\n      }\n    };\n\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    try {\n      const publicKeyResponse = await this.apiService.getUserPublicKey(user.userId);\n      const publicKey = Utils.fromB64ToArray(publicKeyResponse.publicKey);\n\n      const autoConfirm = await firstValueFrom(\n        this.organizationManagementPreferencesService.autoConfirmFingerPrints.state$,\n      );\n      if (autoConfirm == null || !autoConfirm) {\n        const dialogRef = UserConfirmComponent.open(this.dialogService, {\n          data: {\n            name: this.userNamePipe.transform(user),\n            userId: user != null ? user.userId : null,\n            publicKey: publicKey,\n            confirmUser: () => confirmUser(publicKey),\n          },\n        });\n        await lastValueFrom(dialogRef.closed);\n\n        return;\n      }\n\n      try {\n        const fingerprint = await this.keyService.getFingerprint(user.userId, publicKey);\n        this.logService.info(`User's fingerprint: ${fingerprint.join(\"-\")}`);\n      } catch (e) {\n        this.logService.error(e);\n      }\n      await confirmUser(publicKey);\n    } catch (e) {\n      this.logService.error(`Handled exception: ${e}`);\n    }\n  }\n}\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Directive, OnInit } from \"@angular/core\";\n\nimport {\n  OrganizationUserBulkPublicKeyResponse,\n  OrganizationUserBulkResponse,\n} from \"@bitwarden/admin-console/common\";\nimport { ProviderUserBulkPublicKeyResponse } from \"@bitwarden/common/admin-console/models/response/provider/provider-user-bulk-public-key.response\";\nimport { ProviderUserBulkResponse } from \"@bitwarden/common/admin-console/models/response/provider/provider-user-bulk.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { KeyService } from \"@bitwarden/key-management\";\n\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\n@Directive()\nexport abstract class BaseBulkConfirmComponent implements OnInit {\n  protected users: BulkUserDetails[];\n\n  protected excludedUsers: BulkUserDetails[];\n  protected filteredUsers: BulkUserDetails[];\n\n  protected publicKeys: Map<string, Uint8Array> = new Map();\n  protected fingerprints: Map<string, string> = new Map();\n  protected statuses: Map<string, string> = new Map();\n\n  protected done = false;\n  protected loading = true;\n  protected error: string;\n\n  protected constructor(\n    protected keyService: KeyService,\n    protected encryptService: EncryptService,\n    protected i18nService: I18nService,\n  ) {}\n\n  async ngOnInit() {\n    this.excludedUsers = this.users.filter((user) => !this.isAccepted(user));\n    this.filteredUsers = this.users.filter((user) => this.isAccepted(user));\n\n    if (this.filteredUsers.length <= 0) {\n      this.done = true;\n    }\n\n    const publicKeysResponse = await this.getPublicKeys();\n\n    for (const entry of publicKeysResponse.data) {\n      const publicKey = Utils.fromB64ToArray(entry.key);\n      const fingerprint = await this.keyService.getFingerprint(entry.userId, publicKey);\n      if (fingerprint != null) {\n        this.publicKeys.set(entry.id, publicKey);\n        this.fingerprints.set(entry.id, fingerprint.join(\"-\"));\n      }\n    }\n\n    this.loading = false;\n  }\n\n  submit = async () => {\n    this.loading = true;\n    try {\n      const key = await this.getCryptoKey();\n      const userIdsWithKeys: { id: string; key: string }[] = [];\n\n      for (const user of this.filteredUsers) {\n        const publicKey = this.publicKeys.get(user.id);\n        if (publicKey == null) {\n          continue;\n        }\n        const encryptedKey = await this.encryptService.rsaEncrypt(key.key, publicKey);\n        userIdsWithKeys.push({\n          id: user.id,\n          key: encryptedKey.encryptedString,\n        });\n      }\n\n      const userBulkResponse = await this.postConfirmRequest(userIdsWithKeys);\n\n      userBulkResponse.data.forEach((entry) => {\n        const error = entry.error !== \"\" ? entry.error : this.i18nService.t(\"bulkConfirmMessage\");\n        this.statuses.set(entry.id, error);\n      });\n\n      this.done = true;\n    } catch (e) {\n      this.error = e.message;\n    }\n    this.loading = false;\n  };\n\n  protected abstract getCryptoKey(): Promise<SymmetricCryptoKey>;\n  protected abstract getPublicKeys(): Promise<\n    ListResponse<OrganizationUserBulkPublicKeyResponse | ProviderUserBulkPublicKeyResponse>\n  >;\n  protected abstract isAccepted(user: BulkUserDetails): boolean;\n  protected abstract postConfirmRequest(\n    userIdsWithKeys: { id: string; key: string }[],\n  ): Promise<ListResponse<OrganizationUserBulkResponse | ProviderUserBulkResponse>>;\n}\n","<bit-dialog dialogSize=\"large\" [title]=\"'confirmUsers' | i18n\" [loading]=\"loading\">\n  <ng-container bitDialogContent>\n    <bit-callout type=\"danger\" *ngIf=\"filteredUsers.length <= 0\">\n      {{ \"noSelectedUsersApplicable\" | i18n }}\n    </bit-callout>\n    <bit-callout type=\"danger\" [title]=\"'error' | i18n\" *ngIf=\"error\">\n      {{ error }}\n    </bit-callout>\n    <ng-container *ngIf=\"!loading && !done\">\n      <p bitTypography=\"body1\">\n        {{ \"fingerprintEnsureIntegrityVerify\" | i18n }}\n        <a\n          bitLink\n          href=\"https://bitwarden.com/help/fingerprint-phrase/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {{ \"learnMore\" | i18n }}</a\n        >\n      </p>\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"user\" | i18n }}</th>\n            <th bitCell>{{ \"fingerprint\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of filteredUsers\" alignContent=\"middle\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <p class=\"tw-text-muted tw-text-sm\" *ngIf=\"user.name\">{{ user.name }}</p>\n            </td>\n            <td bitCell>\n              {{ fingerprints.get(user.id) }}\n            </td>\n          </tr>\n          <tr *ngFor=\"let user of excludedUsers\" alignContent=\"middle\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <p class=\"tw-text-muted tw-text-sm\" *ngIf=\"user.name\">{{ user.name }}</p>\n            </td>\n            <td bitCell>\n              {{ \"bulkFilteredMessage\" | i18n }}\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n    <ng-container *ngIf=\"!loading && done\">\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"user\" | i18n }}</th>\n            <th bitCell>{{ \"status\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of filteredUsers\" alignContent=\"middle\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <p class=\"tw-text-muted tw-text-sm\" *ngIf=\"user.name\">{{ user.name }}</p>\n            </td>\n            <td bitCell *ngIf=\"statuses.has(user.id)\">\n              {{ statuses.get(user.id) }}\n            </td>\n            <td bitCell *ngIf=\"!statuses.has(user.id)\">\n              {{ \"bulkFilteredMessage\" | i18n }}\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </ng-container>\n  <ng-container bitDialogFooter>\n    <button\n      *ngIf=\"!done\"\n      bitButton\n      type=\"submit\"\n      buttonType=\"primary\"\n      (click)=\"submit()\"\n      [disabled]=\"loading\"\n    >\n      {{ \"confirm\" | i18n }}\n    </button>\n    <button bitButton type=\"button\" buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DIALOG_DATA, DialogConfig } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { firstValueFrom, map, Observable, switchMap } from \"rxjs\";\n\nimport {\n  OrganizationUserApiService,\n  OrganizationUserBulkConfirmRequest,\n  OrganizationUserBulkPublicKeyResponse,\n  OrganizationUserBulkResponse,\n} from \"@bitwarden/admin-console/common\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/admin-console/enums\";\nimport { ProviderUserBulkPublicKeyResponse } from \"@bitwarden/common/admin-console/models/response/provider/provider-user-bulk-public-key.response\";\nimport { ProviderUserBulkResponse } from \"@bitwarden/common/admin-console/models/response/provider/provider-user-bulk.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\nimport { OrganizationId } from \"@bitwarden/common/types/guid\";\nimport { OrgKey } from \"@bitwarden/common/types/key\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { KeyService } from \"@bitwarden/key-management\";\n\nimport { BaseBulkConfirmComponent } from \"./base-bulk-confirm.component\";\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\ntype BulkConfirmDialogParams = {\n  organizationId: string;\n  users: BulkUserDetails[];\n};\n\n@Component({\n  templateUrl: \"bulk-confirm-dialog.component.html\",\n})\nexport class BulkConfirmDialogComponent extends BaseBulkConfirmComponent {\n  organizationId: string;\n  organizationKey$: Observable<OrgKey>;\n  users: BulkUserDetails[];\n\n  constructor(\n    protected keyService: KeyService,\n    @Inject(DIALOG_DATA) protected dialogParams: BulkConfirmDialogParams,\n    protected encryptService: EncryptService,\n    private organizationUserApiService: OrganizationUserApiService,\n    protected i18nService: I18nService,\n    private stateProvider: StateProvider,\n  ) {\n    super(keyService, encryptService, i18nService);\n\n    this.organizationId = dialogParams.organizationId;\n    this.organizationKey$ = this.stateProvider.activeUserId$.pipe(\n      switchMap((userId) => this.keyService.orgKeys$(userId)),\n      map((organizationKeysById) => organizationKeysById[this.organizationId as OrganizationId]),\n      takeUntilDestroyed(),\n    );\n    this.users = dialogParams.users;\n  }\n\n  protected getCryptoKey = async (): Promise<SymmetricCryptoKey> =>\n    await firstValueFrom(this.organizationKey$);\n\n  protected getPublicKeys = async (): Promise<\n    ListResponse<OrganizationUserBulkPublicKeyResponse | ProviderUserBulkPublicKeyResponse>\n  > =>\n    await this.organizationUserApiService.postOrganizationUsersPublicKey(\n      this.organizationId,\n      this.filteredUsers.map((user) => user.id),\n    );\n\n  protected isAccepted = (user: BulkUserDetails) =>\n    user.status === OrganizationUserStatusType.Accepted;\n\n  protected postConfirmRequest = async (\n    userIdsWithKeys: { id: string; key: string }[],\n  ): Promise<ListResponse<OrganizationUserBulkResponse | ProviderUserBulkResponse>> => {\n    const request = new OrganizationUserBulkConfirmRequest(userIdsWithKeys);\n    return await this.organizationUserApiService.postOrganizationUserBulkConfirm(\n      this.organizationId,\n      request,\n    );\n  };\n\n  static open(dialogService: DialogService, config: DialogConfig<BulkConfirmDialogParams>) {\n    return dialogService.open(BulkConfirmDialogComponent, config);\n  }\n}\n","<bit-dialog dialogSize=\"large\" [title]=\"'deleteMembers' | i18n\">\n  <ng-container bitDialogContent>\n    <bit-callout type=\"danger\" *ngIf=\"users.length <= 0\">\n      {{ \"noSelectedMembersApplicable\" | i18n }}\n    </bit-callout>\n    <bit-callout type=\"danger\" [title]=\"'error' | i18n\" *ngIf=\"error\">\n      {{ error }}\n    </bit-callout>\n    <ng-container *ngIf=\"!done\">\n      <bit-callout type=\"warning\" *ngIf=\"users.length > 0 && !error\">\n        <p bitTypography=\"body1\">{{ \"deleteManyOrganizationUsersWarningDesc\" | i18n }}</p>\n      </bit-callout>\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"member\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              <div>\n                {{ user.email }}\n                <span\n                  bitBadge\n                  class=\"tw-text-xs\"\n                  variant=\"secondary\"\n                  *ngIf=\"user.status === this.userStatusType.Invited\"\n                >\n                  {{ \"invited\" | i18n }}\n                </span>\n              </div>\n              <small class=\"tw-text-muted tw-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n    <ng-container *ngIf=\"done\">\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"member\" | i18n }}</th>\n            <th bitCell>{{ \"status\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <small class=\"tw-text-muted tw-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n            </td>\n            <td *ngIf=\"statuses.has(user.id)\" bitCell>\n              {{ statuses.get(user.id) }}\n            </td>\n            <td *ngIf=\"!statuses.has(user.id)\" bitCell>\n              {{ \"bulkFilteredMessage\" | i18n }}\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </ng-container>\n  <ng-container bitDialogFooter>\n    <button\n      *ngIf=\"!done && users.length > 0\"\n      bitButton\n      type=\"submit\"\n      buttonType=\"primary\"\n      [disabled]=\"loading\"\n      (click)=\"submit()\"\n    >\n      {{ \"deleteMembers\" | i18n }}\n    </button>\n    <button bitButton type=\"button\" buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DIALOG_DATA, DialogConfig } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { OrganizationUserApiService } from \"@bitwarden/admin-console/common\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/admin-console/enums\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\ntype BulkDeleteDialogParams = {\n  organizationId: string;\n  users: BulkUserDetails[];\n};\n\n@Component({\n  templateUrl: \"bulk-delete-dialog.component.html\",\n})\nexport class BulkDeleteDialogComponent {\n  organizationId: string;\n  users: BulkUserDetails[];\n  loading = false;\n  done = false;\n  error: string = null;\n  statuses = new Map<string, string>();\n  userStatusType = OrganizationUserStatusType;\n\n  constructor(\n    @Inject(DIALOG_DATA) protected dialogParams: BulkDeleteDialogParams,\n    protected i18nService: I18nService,\n    private organizationUserApiService: OrganizationUserApiService,\n  ) {\n    this.organizationId = dialogParams.organizationId;\n    this.users = dialogParams.users;\n  }\n\n  async submit() {\n    try {\n      this.loading = true;\n      this.error = null;\n\n      const response = await this.organizationUserApiService.deleteManyOrganizationUsers(\n        this.organizationId,\n        this.users.map((user) => user.id),\n      );\n\n      response.data.forEach((entry) => {\n        this.statuses.set(\n          entry.id,\n          entry.error ? entry.error : this.i18nService.t(\"deletedSuccessfully\"),\n        );\n      });\n\n      this.done = true;\n    } catch (e) {\n      this.error = e.message;\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  static open(dialogService: DialogService, config: DialogConfig<BulkDeleteDialogParams>) {\n    return dialogService.open(BulkDeleteDialogComponent, config);\n  }\n}\n","<bit-dialog dialogSize=\"large\">\n  <span bitDialogTitle>{{ \"activateSecretsManager\" | i18n }}</span>\n  <span bitDialogContent>\n    <p>{{ \"bulkEnableSecretsManagerDescription\" | i18n }}</p>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"member\" | i18n }}</th>\n          <th bitCell>{{ \"role\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let u of rows$ | async\">\n          <td bitCell>\n            <div class=\"tw-flex tw-items-center\">\n              <bit-avatar\n                size=\"small\"\n                [text]=\"u | userName\"\n                [id]=\"u.userId\"\n                [color]=\"u.avatarColor\"\n                class=\"tw-mr-3\"\n              ></bit-avatar>\n              <div class=\"tw-flex tw-flex-col\">\n                <div>\n                  {{ u | userName }}\n                </div>\n                <div class=\"tw-text-sm tw-text-muted\" *ngIf=\"u.name\">\n                  {{ u.email }}\n                </div>\n              </div>\n            </div>\n          </td>\n          <td bitCell>{{ u.type | userType }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"submit\">\n      {{ \"activateAccess\" | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { OrganizationUserApiService } from \"@bitwarden/admin-console/common\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService, TableDataSource, ToastService } from \"@bitwarden/components\";\n\nimport { OrganizationUserView } from \"../../../core\";\n\nexport type BulkEnableSecretsManagerDialogData = {\n  orgId: string;\n  users: OrganizationUserView[];\n};\n\n@Component({\n  templateUrl: `bulk-enable-sm-dialog.component.html`,\n})\nexport class BulkEnableSecretsManagerDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<OrganizationUserView>();\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: BulkEnableSecretsManagerDialogData,\n    private organizationUserApiService: OrganizationUserApiService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private toastService: ToastService,\n  ) {}\n\n  ngOnInit(): void {\n    this.dataSource.data = this.data.users;\n  }\n\n  submit = async () => {\n    await this.organizationUserApiService.putOrganizationUserBulkEnableSecretsManager(\n      this.data.orgId,\n      this.dataSource.data.map((u) => u.id),\n    );\n    this.toastService.showToast({\n      variant: \"success\",\n      title: null,\n      message: this.i18nService.t(\"activatedAccessToSecretsManager\"),\n    });\n    this.dialogRef.close();\n  };\n\n  static open(dialogService: DialogService, data: BulkEnableSecretsManagerDialogData) {\n    return dialogService.open<unknown, BulkEnableSecretsManagerDialogData>(\n      BulkEnableSecretsManagerDialogComponent,\n      { data },\n    );\n  }\n}\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Directive } from \"@angular/core\";\n\nimport { OrganizationUserBulkResponse } from \"@bitwarden/admin-console/common\";\nimport { ProviderUserBulkResponse } from \"@bitwarden/common/admin-console/models/response/provider/provider-user-bulk.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\n@Directive()\nexport abstract class BaseBulkRemoveComponent {\n  protected showNoMasterPasswordWarning: boolean;\n  protected statuses: Map<string, string> = new Map();\n\n  protected done = false;\n  protected loading = false;\n  protected error: string;\n\n  protected constructor(protected i18nService: I18nService) {}\n\n  submit = async () => {\n    this.loading = true;\n    try {\n      const deleteUsersResponse = await this.deleteUsers();\n      deleteUsersResponse.data.forEach((entry) => {\n        const error = entry.error !== \"\" ? entry.error : this.i18nService.t(\"bulkRemovedMessage\");\n        this.statuses.set(entry.id, error);\n      });\n      this.done = true;\n    } catch (e) {\n      this.error = e.message;\n    }\n\n    this.loading = false;\n  };\n\n  protected abstract deleteUsers(): Promise<\n    ListResponse<OrganizationUserBulkResponse | ProviderUserBulkResponse>\n  >;\n\n  protected abstract get removeUsersWarning(): string;\n}\n","<bit-dialog dialogSize=\"large\" [title]=\"'removeMembers' | i18n\">\n  <ng-container bitDialogContent>\n    <bit-callout type=\"danger\" *ngIf=\"users.length <= 0\">\n      {{ \"noSelectedUsersApplicable\" | i18n }}\n    </bit-callout>\n    <bit-callout type=\"danger\" [title]=\"'error' | i18n\" *ngIf=\"error\">\n      {{ error }}\n    </bit-callout>\n    <ng-container *ngIf=\"!done\">\n      <bit-callout type=\"warning\" *ngIf=\"users.length > 0 && !error\">\n        <p bitTypography=\"body1\">{{ removeUsersWarning }}</p>\n        <p *ngIf=\"this.showNoMasterPasswordWarning\" bitTypography=\"body1\">\n          {{ \"removeMembersWithoutMasterPasswordWarning\" | i18n }}\n        </p>\n      </bit-callout>\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"user\" | i18n }}</th>\n            <th bitCell *ngIf=\"this.showNoMasterPasswordWarning\">{{ \"details\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <small class=\"tw-text-muted tw-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n            </td>\n            <td bitCell *ngIf=\"this.showNoMasterPasswordWarning\">\n              <span class=\"tw-text-muted tw-block tw-lowercase\">\n                <ng-container *ngIf=\"user.hasMasterPassword === true\"> - </ng-container>\n                <ng-container *ngIf=\"user.hasMasterPassword === false\">\n                  <i class=\"bwi bwi-exclamation-triangle\" aria-hidden=\"true\"></i>\n                  {{ \"noMasterPassword\" | i18n }}\n                </ng-container>\n              </span>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n    <ng-container *ngIf=\"done\">\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"user\" | i18n }}</th>\n            <th bitCell>{{ \"status\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <small class=\"tw-text-muted tw-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n            </td>\n            <td *ngIf=\"statuses.has(user.id)\" bitCell>\n              {{ statuses.get(user.id) }}\n            </td>\n            <td *ngIf=\"!statuses.has(user.id)\" bitCell>\n              {{ \"bulkFilteredMessage\" | i18n }}\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </ng-container>\n  <ng-container bitDialogFooter>\n    <button\n      *ngIf=\"!done && users.length > 0\"\n      bitButton\n      type=\"submit\"\n      buttonType=\"primary\"\n      [disabled]=\"loading\"\n      [bitAction]=\"submit\"\n    >\n      {{ \"removeMembers\" | i18n }}\n    </button>\n    <button bitButton type=\"button\" buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DIALOG_DATA, DialogConfig } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport {\n  OrganizationUserApiService,\n  OrganizationUserBulkResponse,\n} from \"@bitwarden/admin-console/common\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/admin-console/enums\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { BaseBulkRemoveComponent } from \"./base-bulk-remove.component\";\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\ntype BulkRemoveDialogParams = {\n  organizationId: string;\n  users: BulkUserDetails[];\n};\n\n@Component({\n  templateUrl: \"bulk-remove-dialog.component.html\",\n})\nexport class BulkRemoveDialogComponent extends BaseBulkRemoveComponent {\n  organizationId: string;\n  users: BulkUserDetails[];\n\n  constructor(\n    @Inject(DIALOG_DATA) protected dialogParams: BulkRemoveDialogParams,\n    protected i18nService: I18nService,\n    private organizationUserApiService: OrganizationUserApiService,\n  ) {\n    super(i18nService);\n    this.organizationId = dialogParams.organizationId;\n    this.users = dialogParams.users;\n    this.showNoMasterPasswordWarning = this.users.some(\n      (u) => u.status > OrganizationUserStatusType.Invited && u.hasMasterPassword === false,\n    );\n  }\n\n  protected deleteUsers = (): Promise<ListResponse<OrganizationUserBulkResponse>> =>\n    this.organizationUserApiService.removeManyOrganizationUsers(\n      this.organizationId,\n      this.users.map((user) => user.id),\n    );\n\n  protected get removeUsersWarning() {\n    return this.i18nService.t(\"removeOrgUsersConfirmation\");\n  }\n\n  static open(dialogService: DialogService, config: DialogConfig<BulkRemoveDialogParams>) {\n    return dialogService.open(BulkRemoveDialogComponent, config);\n  }\n}\n","<bit-dialog\n  dialogSize=\"large\"\n  *ngIf=\"{ enabled: accountDeprovisioningEnabled$ | async } as accountDeprovisioning\"\n>\n  <ng-container bitDialogTitle>\n    <h1 *ngIf=\"accountDeprovisioning.enabled; else nonMemberTitle\">{{ bulkMemberTitle }}</h1>\n    <ng-template #nonMemberTitle>\n      <h1>{{ bulkTitle }}</h1>\n    </ng-template>\n  </ng-container>\n\n  <div bitDialogContent>\n    <bit-callout type=\"danger\" *ngIf=\"users.length <= 0\">\n      {{ \"noSelectedUsersApplicable\" | i18n }}\n    </bit-callout>\n\n    <bit-callout type=\"danger\" *ngIf=\"error\">\n      {{ error }}\n    </bit-callout>\n\n    <bit-callout\n      type=\"danger\"\n      *ngIf=\"nonCompliantMembers && accountDeprovisioning.enabled\"\n      title=\"{{ 'nonCompliantMembersTitle' | i18n }}\"\n    >\n      {{ \"nonCompliantMembersError\" | i18n }}\n    </bit-callout>\n\n    <ng-container *ngIf=\"!done\">\n      <bit-callout type=\"warning\" *ngIf=\"users.length > 0 && !error && isRevoking\">\n        <p>{{ \"revokeUsersWarning\" | i18n }}</p>\n      </bit-callout>\n\n      <bit-table *ngIf=\"accountDeprovisioning.enabled\">\n        <ng-container header>\n          <tr>\n            <th bitCell class=\"tw-w-1/2\">{{ \"member\" | i18n }}</th>\n            <th bitCell *ngIf=\"this.showNoMasterPasswordWarning\">{{ \"details\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell width=\"30\">\n              <div class=\"tw-flex tw-items-center\">\n                <div class=\"tw-flex tw-items-center tw-mr-6\">\n                  <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n                </div>\n                <div>\n                  {{ user.email }}\n                  <small class=\"tw-block tw-text-muted\" *ngIf=\"user.name\">{{ user.name }}</small>\n                </div>\n              </div>\n            </td>\n            <td bitCell *ngIf=\"this.showNoMasterPasswordWarning\">\n              <span class=\"tw-block tw-lowercase tw-text-muted\">\n                <ng-container *ngIf=\"user.hasMasterPassword === true\"> - </ng-container>\n                <ng-container *ngIf=\"user.hasMasterPassword === false\">\n                  <i class=\"bwi bwi-exclamation-triangle\" aria-hidden=\"true\"></i>\n                  {{ \"noMasterPassword\" | i18n }}\n                </ng-container>\n              </span>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n\n      <bit-table *ngIf=\"!accountDeprovisioning.enabled\">\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"user\" | i18n }}</th>\n            <th bitCell *ngIf=\"this.showNoMasterPasswordWarning\">{{ \"details\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell width=\"30\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <small class=\"tw-block tw-text-muted\" *ngIf=\"user.name\">{{ user.name }}</small>\n            </td>\n            <td bitCell *ngIf=\"this.showNoMasterPasswordWarning\">\n              <span class=\"tw-block tw-lowercase tw-text-muted\">\n                <ng-container *ngIf=\"user.hasMasterPassword === true\"> - </ng-container>\n                <ng-container *ngIf=\"user.hasMasterPassword === false\">\n                  <i class=\"bwi bwi-exclamation-triangle\" aria-hidden=\"true\"></i>\n                  {{ \"noMasterPassword\" | i18n }}\n                </ng-container>\n              </span>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n\n    <ng-container *ngIf=\"done\">\n      <bit-table *ngIf=\"accountDeprovisioning.enabled\">\n        <ng-container header>\n          <tr>\n            <th bitCell class=\"tw-w-1/2\">{{ \"member\" | i18n }}</th>\n            <th bitCell>{{ \"status\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell width=\"30\">\n              <div class=\"tw-flex tw-items-center\">\n                <div class=\"tw-flex tw-items-center tw-mr-6\">\n                  <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n                </div>\n                <div>\n                  {{ user.email }}\n                  <small class=\"tw-block tw-text-muted\" *ngIf=\"user.name\">{{ user.name }}</small>\n                </div>\n              </div>\n            </td>\n            <td bitCell *ngIf=\"statuses.has(user.id)\">\n              {{ statuses.get(user.id) }}\n            </td>\n            <td bitCell *ngIf=\"!statuses.has(user.id)\">\n              {{ \"bulkFilteredMessage\" | i18n }}\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n\n      <bit-table *ngIf=\"!accountDeprovisioning.enabled\">\n        <ng-container header>\n          <tr>\n            <th bitCell class=\"tw-w-1/2\">{{ \"member\" | i18n }}</th>\n            <th bitCell>{{ \"status\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell width=\"30\">\n              <div class=\"tw-flex tw-items-center\">\n                <div class=\"tw-flex tw-items-center tw-mr-6\">\n                  <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n                </div>\n                <div>\n                  {{ user.email }}\n                  <small class=\"tw-block tw-text-muted\" *ngIf=\"user.name\">{{ user.name }}</small>\n                </div>\n              </div>\n            </td>\n            <td bitCell *ngIf=\"statuses.has(user.id)\">\n              {{ statuses.get(user.id) }}\n            </td>\n            <td bitCell *ngIf=\"!statuses.has(user.id)\">\n              {{ \"bulkFilteredMessage\" | i18n }}\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </div>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton *ngIf=\"!done && users.length > 0\" [bitAction]=\"submit\">\n      {{ accountDeprovisioning.enabled ? bulkMemberTitle : bulkTitle }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\n\nimport { OrganizationUserApiService } from \"@bitwarden/admin-console/common\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/admin-console/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\ntype BulkRestoreDialogParams = {\n  organizationId: string;\n  users: BulkUserDetails[];\n  isRevoking: boolean;\n};\n\n@Component({\n  selector: \"app-bulk-restore-revoke\",\n  templateUrl: \"bulk-restore-revoke.component.html\",\n})\nexport class BulkRestoreRevokeComponent {\n  isRevoking: boolean;\n  organizationId: string;\n  users: BulkUserDetails[];\n\n  statuses: Map<string, string> = new Map();\n\n  loading = false;\n  done = false;\n  error: string;\n  showNoMasterPasswordWarning = false;\n  nonCompliantMembers: boolean = false;\n  accountDeprovisioningEnabled$: Observable<boolean>;\n\n  constructor(\n    protected i18nService: I18nService,\n    private organizationUserApiService: OrganizationUserApiService,\n    private configService: ConfigService,\n    @Inject(DIALOG_DATA) protected data: BulkRestoreDialogParams,\n  ) {\n    this.isRevoking = data.isRevoking;\n    this.organizationId = data.organizationId;\n    this.users = data.users;\n    this.showNoMasterPasswordWarning = this.users.some(\n      (u) => u.status > OrganizationUserStatusType.Invited && u.hasMasterPassword === false,\n    );\n    this.accountDeprovisioningEnabled$ = this.configService.getFeatureFlag$(\n      FeatureFlag.AccountDeprovisioning,\n    );\n  }\n\n  get bulkTitle() {\n    const titleKey = this.isRevoking ? \"revokeUsers\" : \"restoreUsers\";\n    return this.i18nService.t(titleKey);\n  }\n\n  get bulkMemberTitle() {\n    const titleKey = this.isRevoking ? \"revokeMembers\" : \"restoreMembers\";\n    return this.i18nService.t(titleKey);\n  }\n\n  submit = async () => {\n    try {\n      const response = await this.performBulkUserAction();\n\n      const bulkMessage = this.isRevoking ? \"bulkRevokedMessage\" : \"bulkRestoredMessage\";\n\n      response.data.forEach(async (entry) => {\n        const error =\n          entry.error !== \"\"\n            ? this.i18nService.t(\"cannotRestoreAccessError\")\n            : this.i18nService.t(bulkMessage);\n        this.statuses.set(entry.id, error);\n        if (entry.error !== \"\") {\n          this.nonCompliantMembers = true;\n        }\n      });\n      this.done = true;\n    } catch (e) {\n      this.error = e.message;\n    }\n  };\n\n  protected async performBulkUserAction() {\n    const userIds = this.users.map((user) => user.id);\n    if (this.isRevoking) {\n      return await this.organizationUserApiService.revokeManyOrganizationUsers(\n        this.organizationId,\n        userIds,\n      );\n    } else {\n      return await this.organizationUserApiService.restoreManyOrganizationUsers(\n        this.organizationId,\n        userIds,\n      );\n    }\n  }\n\n  static open(dialogService: DialogService, data: BulkRestoreDialogParams) {\n    return dialogService.open(BulkRestoreRevokeComponent, { data });\n  }\n}\n","<bit-dialog dialogSize=\"large\" [title]=\"'bulkConfirmStatus' | i18n\">\n  <ng-container bitDialogContent>\n    <div class=\"tw-text-center\" *ngIf=\"loading\">\n      <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n      {{ \"loading\" | i18n }}\n    </div>\n    <bit-table *ngIf=\"!loading\">\n      <ng-container header>\n        <tr>\n          <th colspan=\"2\" bitCell>{{ \"user\" | i18n }}</th>\n          <th bitCell>{{ \"status\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let item of users\">\n          <td width=\"30\" bitCell>\n            <bit-avatar [text]=\"item.user | userName\" [id]=\"item.user.id\" size=\"small\"></bit-avatar>\n          </td>\n          <td bitCell>\n            {{ item.user.email }}\n            <small class=\"text-muted d-block\" *ngIf=\"item.user.name\">{{ item.user.name }}</small>\n          </td>\n          <td class=\"tw-text-danger\" *ngIf=\"item.error\" bitCell>\n            {{ item.message }}\n          </td>\n          <td *ngIf=\"!item.error\" bitCell>\n            {{ item.message }}\n          </td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </ng-container>\n  <ng-container bitDialogFooter>\n    <button bitButton type=\"button\" buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DIALOG_DATA, DialogConfig } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { OrganizationUserBulkResponse } from \"@bitwarden/admin-console/common\";\nimport {\n  OrganizationUserStatusType,\n  ProviderUserStatusType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { ProviderUserBulkResponse } from \"@bitwarden/common/admin-console/models/response/provider/provider-user-bulk.response\";\nimport { ProviderUserUserDetailsResponse } from \"@bitwarden/common/admin-console/models/response/provider/provider-user.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { OrganizationUserView } from \"../../../core/views/organization-user.view\";\n\nexport interface BulkUserDetails {\n  id: string;\n  name: string;\n  email: string;\n  status: OrganizationUserStatusType | ProviderUserStatusType;\n  hasMasterPassword?: boolean;\n  managedByOrganization?: boolean;\n}\n\ntype BulkStatusEntry = {\n  user: BulkUserDetails;\n  error: boolean;\n  message: string;\n};\n\ntype BulkStatusDialogData = {\n  users: Array<OrganizationUserView | ProviderUserUserDetailsResponse>;\n  filteredUsers: Array<OrganizationUserView | ProviderUserUserDetailsResponse>;\n  request: Promise<ListResponse<OrganizationUserBulkResponse | ProviderUserBulkResponse>>;\n  successfulMessage: string;\n};\n\n@Component({\n  selector: \"app-bulk-status\",\n  templateUrl: \"bulk-status.component.html\",\n})\nexport class BulkStatusComponent implements OnInit {\n  users: BulkStatusEntry[];\n  loading = false;\n\n  constructor(\n    @Inject(DIALOG_DATA) protected data: BulkStatusDialogData,\n    private i18nService: I18nService,\n    private logService: LogService,\n  ) {}\n\n  async ngOnInit() {\n    this.loading = true;\n    await this.showBulkStatus(this.data);\n  }\n\n  async showBulkStatus(data: BulkStatusDialogData) {\n    try {\n      const response = await data.request;\n      const keyedErrors: any = response.data\n        .filter((r) => r.error !== \"\")\n        .reduce((a, x) => ({ ...a, [x.id]: x.error }), {});\n      const keyedFilteredUsers: any = data.filteredUsers.reduce(\n        (a, x) => ({ ...a, [x.id]: x }),\n        {},\n      );\n\n      this.users = data.users.map((user) => {\n        let message = keyedErrors[user.id] ?? data.successfulMessage;\n        // eslint-disable-next-line\n        if (!keyedFilteredUsers.hasOwnProperty(user.id)) {\n          message = this.i18nService.t(\"bulkFilteredMessage\");\n        }\n\n        return {\n          user: user,\n          error: keyedErrors.hasOwnProperty(user.id), // eslint-disable-line\n          message: message,\n        };\n      });\n      this.loading = false;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  static open(dialogService: DialogService, config: DialogConfig<BulkStatusDialogData>) {\n    return dialogService.open(BulkStatusComponent, config);\n  }\n}\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnDestroy, OnInit, ViewChild } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { PasswordStrengthV2Component } from \"@bitwarden/angular/tools/password-strength/password-strength-v2.component\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { MasterPasswordPolicyOptions } from \"@bitwarden/common/admin-console/models/domain/master-password-policy-options\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { DialogService, ToastService } from \"@bitwarden/components\";\nimport { PasswordGenerationServiceAbstraction } from \"@bitwarden/generator-legacy\";\n\nimport { OrganizationUserResetPasswordService } from \"../services/organization-user-reset-password/organization-user-reset-password.service\";\n\n/**\n * Encapsulates a few key data inputs needed to initiate an account recovery\n * process for the organization user in question.\n */\nexport type ResetPasswordDialogData = {\n  /**\n   * The organization user's full name\n   */\n  name: string;\n\n  /**\n   * The organization user's email address\n   */\n  email: string;\n\n  /**\n   * The `organizationUserId` for the user\n   */\n  id: string;\n\n  /**\n   * The organization's `organizationId`\n   */\n  organizationId: string;\n};\n\nexport enum ResetPasswordDialogResult {\n  Ok = \"ok\",\n}\n\n@Component({\n  selector: \"app-reset-password\",\n  templateUrl: \"reset-password.component.html\",\n})\n/**\n * Used in a dialog for initiating the account recovery process against a\n * given organization user. An admin will access this form when they want to\n * reset a user's password and log them out of sessions.\n */\nexport class ResetPasswordComponent implements OnInit, OnDestroy {\n  formGroup = this.formBuilder.group({\n    newPassword: [\"\", Validators.required],\n  });\n\n  @ViewChild(PasswordStrengthV2Component) passwordStrengthComponent: PasswordStrengthV2Component;\n\n  enforcedPolicyOptions: MasterPasswordPolicyOptions;\n  showPassword = false;\n  passwordStrengthScore: number;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    @Inject(DIALOG_DATA) protected data: ResetPasswordDialogData,\n    private resetPasswordService: OrganizationUserResetPasswordService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private passwordGenerationService: PasswordGenerationServiceAbstraction,\n    private policyService: PolicyService,\n    private logService: LogService,\n    private dialogService: DialogService,\n    private toastService: ToastService,\n    private formBuilder: FormBuilder,\n    private dialogRef: DialogRef<ResetPasswordDialogResult>,\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .masterPasswordPolicyOptions$()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (enforcedPasswordPolicyOptions) =>\n          (this.enforcedPolicyOptions = enforcedPasswordPolicyOptions),\n      );\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  get loggedOutWarningName() {\n    return this.data.name != null ? this.data.name : this.i18nService.t(\"thisUser\");\n  }\n\n  async generatePassword() {\n    const options = (await this.passwordGenerationService.getOptions())?.[0] ?? {};\n    this.formGroup.patchValue({\n      newPassword: await this.passwordGenerationService.generatePassword(options),\n    });\n    this.passwordStrengthComponent.updatePasswordStrength(this.formGroup.value.newPassword);\n  }\n\n  togglePassword() {\n    this.showPassword = !this.showPassword;\n    document.getElementById(\"newPassword\").focus();\n  }\n\n  copy() {\n    const value = this.formGroup.value.newPassword;\n    if (value == null) {\n      return;\n    }\n\n    this.platformUtilsService.copyToClipboard(value, { window: window });\n    this.toastService.showToast({\n      variant: \"info\",\n      title: null,\n      message: this.i18nService.t(\"valueCopied\", this.i18nService.t(\"password\")),\n    });\n  }\n\n  submit = async () => {\n    // Validation\n    if (this.formGroup.value.newPassword == null || this.formGroup.value.newPassword === \"\") {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: this.i18nService.t(\"errorOccurred\"),\n        message: this.i18nService.t(\"masterPasswordRequired\"),\n      });\n      return false;\n    }\n\n    if (this.formGroup.value.newPassword.length < Utils.minimumPasswordLength) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: this.i18nService.t(\"errorOccurred\"),\n        message: this.i18nService.t(\"masterPasswordMinlength\", Utils.minimumPasswordLength),\n      });\n      return false;\n    }\n\n    if (\n      this.enforcedPolicyOptions != null &&\n      !this.policyService.evaluateMasterPassword(\n        this.passwordStrengthScore,\n        this.formGroup.value.newPassword,\n        this.enforcedPolicyOptions,\n      )\n    ) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: this.i18nService.t(\"errorOccurred\"),\n        message: this.i18nService.t(\"masterPasswordPolicyRequirementsNotMet\"),\n      });\n      return;\n    }\n\n    if (this.passwordStrengthScore < 3) {\n      const result = await this.dialogService.openSimpleDialog({\n        title: { key: \"weakMasterPassword\" },\n        content: { key: \"weakMasterPasswordDesc\" },\n        type: \"warning\",\n      });\n\n      if (!result) {\n        return false;\n      }\n    }\n\n    try {\n      await this.resetPasswordService.resetMasterPassword(\n        this.formGroup.value.newPassword,\n        this.data.email,\n        this.data.id,\n        this.data.organizationId,\n      );\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(\"resetPasswordSuccess\"),\n      });\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    this.dialogRef.close(ResetPasswordDialogResult.Ok);\n  };\n\n  getStrengthScore(result: number) {\n    this.passwordStrengthScore = result;\n  }\n\n  static open = (dialogService: DialogService, input: DialogConfig<ResetPasswordDialogData>) => {\n    return dialogService.open<ResetPasswordDialogResult>(ResetPasswordComponent, input);\n  };\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog [title]=\"'recoverAccount' | i18n\" [subtitle]=\"data.name\">\n    <ng-container bitDialogContent>\n      <bit-callout type=\"warning\"\n        >{{ \"resetPasswordLoggedOutWarning\" | i18n: loggedOutWarningName }}\n      </bit-callout>\n      <auth-password-callout\n        [policy]=\"enforcedPolicyOptions\"\n        message=\"resetPasswordMasterPasswordPolicyInEffect\"\n        *ngIf=\"enforcedPolicyOptions\"\n      >\n      </auth-password-callout>\n      <bit-form-field>\n        <bit-label>\n          {{ \"newPassword\" | i18n }}\n        </bit-label>\n        <input\n          id=\"newPassword\"\n          bitInput\n          [type]=\"showPassword ? 'text' : 'password'\"\n          name=\"NewPassword\"\n          formControlName=\"newPassword\"\n          required\n          appInputVerbatim\n          autocomplete=\"new-password\"\n        />\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-generate\"\n          bitSuffix\n          [appA11yTitle]=\"'generatePassword' | i18n\"\n          (click)=\"generatePassword()\"\n        ></button>\n        <button\n          type=\"button\"\n          bitSuffix\n          [bitIconButton]=\"showPassword ? 'bwi-eye-slash' : 'bwi-eye'\"\n          buttonType=\"secondary\"\n          appA11yTitle=\"{{ 'toggleVisibility' | i18n }}\"\n          (click)=\"togglePassword()\"\n        ></button>\n        <button\n          type=\"button\"\n          bitSuffix\n          bitIconButton=\"bwi-clone\"\n          appA11yTitle=\"{{ 'copyPassword' | i18n }}\"\n          (click)=\"copy()\"\n        ></button>\n      </bit-form-field>\n      <tools-password-strength\n        [password]=\"formGroup.value.newPassword\"\n        [email]=\"data.email\"\n        [showText]=\"true\"\n        (passwordStrengthScore)=\"getStrengthScore($event)\"\n      >\n      </tools-password-strength>\n    </ng-container>\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" bitFormButton type=\"submit\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button bitButton buttonType=\"secondary\" bitDialogClose type=\"button\">\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<app-header>\n  <bit-search\n    class=\"tw-grow\"\n    [formControl]=\"searchControl\"\n    [placeholder]=\"'searchMembers' | i18n\"\n  ></bit-search>\n\n  <button type=\"button\" bitButton buttonType=\"primary\" (click)=\"invite()\" [disabled]=\"!firstLoaded\">\n    <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n    {{ \"inviteMember\" | i18n }}\n  </button>\n</app-header>\n\n<div class=\"tw-mb-4 tw-flex tw-flex-col tw-space-y-4\">\n  <bit-toggle-group\n    [selected]=\"status\"\n    (selectedChange)=\"statusToggle.next($event)\"\n    [attr.aria-label]=\"'memberStatusFilter' | i18n\"\n  >\n    <bit-toggle [value]=\"null\">\n      {{ \"all\" | i18n }}\n      <span bitBadge variant=\"info\" *ngIf=\"dataSource.activeUserCount as allCount\">{{\n        allCount\n      }}</span>\n    </bit-toggle>\n\n    <bit-toggle [value]=\"userStatusType.Invited\">\n      {{ \"invited\" | i18n }}\n      <span bitBadge variant=\"info\" *ngIf=\"dataSource.invitedUserCount as invitedCount\">{{\n        invitedCount\n      }}</span>\n    </bit-toggle>\n\n    <bit-toggle [value]=\"userStatusType.Accepted\">\n      {{ \"needsConfirmation\" | i18n }}\n      <span bitBadge variant=\"info\" *ngIf=\"dataSource.acceptedUserCount as acceptedUserCount\">{{\n        acceptedUserCount\n      }}</span>\n    </bit-toggle>\n\n    <bit-toggle [value]=\"userStatusType.Revoked\">\n      {{ \"revoked\" | i18n }}\n      <span bitBadge variant=\"info\" *ngIf=\"dataSource.revokedUserCount as revokedCount\">{{\n        revokedCount\n      }}</span>\n    </bit-toggle>\n  </bit-toggle-group>\n</div>\n<ng-container *ngIf=\"!firstLoaded\">\n  <i\n    class=\"bwi bwi-spinner bwi-spin text-muted\"\n    title=\"{{ 'loading' | i18n }}\"\n    aria-hidden=\"true\"\n  ></i>\n  <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n</ng-container>\n<ng-container *ngIf=\"firstLoaded\">\n  <p *ngIf=\"!dataSource.filteredData.length\">{{ \"noMembersInList\" | i18n }}</p>\n  <ng-container *ngIf=\"dataSource.filteredData.length\">\n    <bit-callout\n      type=\"info\"\n      title=\"{{ 'confirmUsers' | i18n }}\"\n      icon=\"bwi-check-circle\"\n      *ngIf=\"showConfirmUsers\"\n    >\n      {{ \"usersNeedConfirmed\" | i18n }}\n    </bit-callout>\n    <!-- The padding on the bottom of the cdk-virtual-scroll-viewport element is required to prevent table row content\n    from overflowing the <main> element. -->\n    <cdk-virtual-scroll-viewport scrollWindow [itemSize]=\"rowHeight\" class=\"tw-pb-8\">\n      <bit-table [dataSource]=\"dataSource\">\n        <ng-container header>\n          <tr>\n            <th bitCell class=\"tw-w-20\">\n              <input\n                type=\"checkbox\"\n                bitCheckbox\n                class=\"tw-mr-1\"\n                (change)=\"dataSource.checkAllFilteredUsers($any($event.target).checked)\"\n                id=\"selectAll\"\n              />\n              <label class=\"tw-mb-0 !tw-font-bold !tw-text-muted\" for=\"selectAll\">{{\n                \"all\" | i18n\n              }}</label>\n            </th>\n            <th bitCell bitSortable=\"email\" default>{{ \"name\" | i18n }}</th>\n            <th bitCell>{{ (organization.useGroups ? \"groups\" : \"collections\") | i18n }}</th>\n            <th bitCell bitSortable=\"type\">{{ \"role\" | i18n }}</th>\n            <th bitCell>{{ \"policies\" | i18n }}</th>\n            <th bitCell class=\"tw-w-10\">\n              <button\n                [bitMenuTriggerFor]=\"headerMenu\"\n                type=\"button\"\n                bitIconButton=\"bwi-ellipsis-v\"\n                size=\"small\"\n                appA11yTitle=\"{{ 'options' | i18n }}\"\n              ></button>\n\n              <bit-menu #headerMenu>\n                <ng-container *ngIf=\"canUseSecretsManager$ | async\">\n                  <button type=\"button\" bitMenuItem (click)=\"bulkEnableSM()\">\n                    {{ \"activateSecretsManager\" | i18n }}\n                  </button>\n                  <bit-menu-divider></bit-menu-divider>\n                </ng-container>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"bulkReinvite()\"\n                  *ngIf=\"showBulkReinviteUsers\"\n                >\n                  <i class=\"bwi bwi-fw bwi-envelope\" aria-hidden=\"true\"></i>\n                  {{ \"reinviteSelected\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"bulkConfirm()\"\n                  *ngIf=\"showBulkConfirmUsers\"\n                >\n                  <span class=\"tw-text-success\">\n                    <i class=\"bwi bwi-fw bwi-check\" aria-hidden=\"true\"></i>\n                    {{ \"confirmSelected\" | i18n }}\n                  </span>\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"bulkRestore()\"\n                  *ngIf=\"showBulkRestoreUsers\"\n                >\n                  <i class=\"bwi bwi-fw bwi-plus-circle\" aria-hidden=\"true\"></i>\n                  {{ \"restoreAccess\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"bulkRevoke()\"\n                  *ngIf=\"showBulkRevokeUsers\"\n                >\n                  <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n                  {{ \"revokeAccess\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"bulkRemove()\"\n                  *ngIf=\"showBulkRemoveUsers\"\n                >\n                  <span class=\"tw-text-danger\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-fw bwi-close\"></i>\n                    {{ \"remove\" | i18n }}\n                  </span>\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"bulkDelete()\"\n                  *ngIf=\"showBulkDeleteUsers\"\n                >\n                  <span class=\"tw-text-danger\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-fw bwi-trash\"></i>\n                    {{ \"delete\" | i18n }}\n                  </span>\n                </button>\n              </bit-menu>\n            </th>\n          </tr>\n        </ng-container>\n        <ng-template body let-rows$>\n          <tr\n            bitRow\n            *cdkVirtualFor=\"let u of rows$\"\n            alignContent=\"middle\"\n            [ngClass]=\"rowHeightClass\"\n          >\n            <td bitCell (click)=\"dataSource.checkUser(u)\">\n              <input type=\"checkbox\" bitCheckbox [(ngModel)]=\"$any(u).checked\" />\n            </td>\n            <td bitCell (click)=\"edit(u)\" class=\"tw-cursor-pointer\">\n              <div class=\"tw-flex tw-items-center\">\n                <bit-avatar\n                  size=\"small\"\n                  [text]=\"u | userName\"\n                  [id]=\"u.userId\"\n                  [color]=\"u.avatarColor\"\n                  class=\"tw-mr-3\"\n                ></bit-avatar>\n                <div class=\"tw-flex tw-flex-col\">\n                  <div>\n                    <button type=\"button\" bitLink>\n                      {{ u.name ?? u.email }}\n                    </button>\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      variant=\"secondary\"\n                      *ngIf=\"u.status === userStatusType.Invited\"\n                      >{{ \"invited\" | i18n }}</span\n                    >\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      variant=\"warning\"\n                      *ngIf=\"u.status === userStatusType.Accepted\"\n                      >{{ \"needsConfirmation\" | i18n }}</span\n                    >\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      variant=\"secondary\"\n                      *ngIf=\"u.status === userStatusType.Revoked\"\n                      >{{ \"revoked\" | i18n }}</span\n                    >\n                  </div>\n                  <div class=\"tw-text-sm tw-text-muted\" *ngIf=\"u.name\">\n                    {{ u.email }}\n                  </div>\n                </div>\n              </div>\n            </td>\n\n            <td\n              bitCell\n              (click)=\"edit(u, organization.useGroups ? memberTab.Groups : memberTab.Collections)\"\n              class=\"tw-cursor-pointer\"\n            >\n              <bit-badge-list\n                [items]=\"organization.useGroups ? u.groupNames : u.collectionNames\"\n                [maxItems]=\"3\"\n                variant=\"secondary\"\n              ></bit-badge-list>\n            </td>\n\n            <td\n              bitCell\n              (click)=\"edit(u, memberTab.Role)\"\n              class=\"tw-cursor-pointer tw-text-sm tw-text-muted\"\n            >\n              {{ u.type | userType }}\n            </td>\n\n            <td bitCell class=\"tw-text-muted\">\n              <ng-container *ngIf=\"u.twoFactorEnabled\">\n                <i\n                  class=\"bwi bwi-lock\"\n                  title=\"{{ 'userUsingTwoStep' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"userUsingTwoStep\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"showEnrolledStatus($any(u))\">\n                <i\n                  class=\"bwi bwi-key\"\n                  title=\"{{ 'enrolledAccountRecovery' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"enrolledAccountRecovery\" | i18n }}</span>\n              </ng-container>\n            </td>\n            <td bitCell>\n              <button\n                [bitMenuTriggerFor]=\"rowMenu\"\n                type=\"button\"\n                bitIconButton=\"bwi-ellipsis-v\"\n                size=\"small\"\n                appA11yTitle=\"{{ 'options' | i18n }}\"\n              ></button>\n\n              <bit-menu #rowMenu>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"reinvite(u)\"\n                  *ngIf=\"u.status === userStatusType.Invited\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-envelope\"></i>\n                  {{ \"resendInvitation\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"confirm(u)\"\n                  *ngIf=\"u.status === userStatusType.Accepted\"\n                >\n                  <span class=\"tw-text-success\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-check\"></i> {{ \"confirm\" | i18n }}\n                  </span>\n                </button>\n                <bit-menu-divider\n                  *ngIf=\"\n                    u.status === userStatusType.Accepted || u.status === userStatusType.Invited\n                  \"\n                ></bit-menu-divider>\n                <button type=\"button\" bitMenuItem (click)=\"edit(u, memberTab.Role)\">\n                  <i aria-hidden=\"true\" class=\"bwi bwi-user\"></i> {{ \"memberRole\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"edit(u, memberTab.Groups)\"\n                  *ngIf=\"organization.useGroups\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-users\"></i> {{ \"groups\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"edit(u, memberTab.Collections)\">\n                  <i aria-hidden=\"true\" class=\"bwi bwi-collection\"></i> {{ \"collections\" | i18n }}\n                </button>\n                <bit-menu-divider></bit-menu-divider>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"openEventsDialog(u)\"\n                  *ngIf=\"organization.useEvents && u.status === userStatusType.Confirmed\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-file-text\"></i> {{ \"eventLogs\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"resetPassword(u)\"\n                  *ngIf=\"allowResetPassword(u)\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-key\"></i> {{ \"recoverAccount\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"restore(u)\"\n                  *ngIf=\"u.status === userStatusType.Revoked\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-plus-circle\"></i>\n                  {{ \"restoreAccess\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"revoke(u)\"\n                  *ngIf=\"u.status !== userStatusType.Revoked\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-minus-circle\"></i>\n                  {{ \"revokeAccess\" | i18n }}\n                </button>\n                <button\n                  *ngIf=\"!accountDeprovisioningEnabled || !u.managedByOrganization\"\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"remove(u)\"\n                >\n                  <span class=\"tw-text-danger\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-close\"></i> {{ \"remove\" | i18n }}\n                  </span>\n                </button>\n                <button\n                  *ngIf=\"accountDeprovisioningEnabled && u.managedByOrganization\"\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"deleteUser(u)\"\n                >\n                  <span class=\"tw-text-danger\">\n                    <i class=\"bwi bwi-trash\" aria-hidden=\"true\"></i>\n                    {{ \"delete\" | i18n }}\n                  </span>\n                </button>\n              </bit-menu>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </cdk-virtual-scroll-viewport>\n  </ng-container>\n</ng-container>\n<ng-template #resetPasswordTemplate></ng-template>\n","// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component, OnInit, ViewChild, ViewContainerRef } from \"@angular/core\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n  combineLatest,\n  concatMap,\n  firstValueFrom,\n  from,\n  lastValueFrom,\n  map,\n  Observable,\n  shareReplay,\n  switchMap,\n} from \"rxjs\";\n\nimport {\n  OrganizationUserApiService,\n  OrganizationUserConfirmRequest,\n  OrganizationUserUserDetailsResponse,\n  CollectionService,\n  CollectionData,\n  Collection,\n  CollectionDetailsResponse,\n} from \"@bitwarden/admin-console/common\";\nimport { UserNamePipe } from \"@bitwarden/angular/pipes/user-name.pipe\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationApiServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/organization/organization-api.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationManagementPreferencesService } from \"@bitwarden/common/admin-console/abstractions/organization-management-preferences/organization-management-preferences.service\";\nimport { PolicyApiServiceAbstraction as PolicyApiService } from \"@bitwarden/common/admin-console/abstractions/policy/policy-api.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport {\n  OrganizationUserStatusType,\n  OrganizationUserType,\n  PolicyType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { Policy } from \"@bitwarden/common/admin-console/models/domain/policy\";\nimport { OrganizationKeysRequest } from \"@bitwarden/common/admin-console/models/request/organization-keys.request\";\nimport { BillingApiServiceAbstraction } from \"@bitwarden/common/billing/abstractions/billing-api.service.abstraction\";\nimport { isNotSelfUpgradable, ProductTierType } from \"@bitwarden/common/billing/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { DialogService, SimpleDialogOptions, ToastService } from \"@bitwarden/components\";\nimport { KeyService } from \"@bitwarden/key-management\";\n\nimport {\n  ChangePlanDialogResultType,\n  openChangePlanDialog,\n} from \"../../../billing/organizations/change-plan-dialog.component\";\nimport { BaseMembersComponent } from \"../../common/base-members.component\";\nimport { PeopleTableDataSource } from \"../../common/people-table-data-source\";\nimport { GroupApiService } from \"../core\";\nimport { OrganizationUserView } from \"../core/views/organization-user.view\";\nimport { openEntityEventsDialog } from \"../manage/entity-events.component\";\n\nimport { BulkConfirmDialogComponent } from \"./components/bulk/bulk-confirm-dialog.component\";\nimport { BulkDeleteDialogComponent } from \"./components/bulk/bulk-delete-dialog.component\";\nimport { BulkEnableSecretsManagerDialogComponent } from \"./components/bulk/bulk-enable-sm-dialog.component\";\nimport { BulkRemoveDialogComponent } from \"./components/bulk/bulk-remove-dialog.component\";\nimport { BulkRestoreRevokeComponent } from \"./components/bulk/bulk-restore-revoke.component\";\nimport { BulkStatusComponent } from \"./components/bulk/bulk-status.component\";\nimport {\n  MemberDialogResult,\n  MemberDialogTab,\n  openUserAddEditDialog,\n} from \"./components/member-dialog\";\nimport {\n  ResetPasswordComponent,\n  ResetPasswordDialogResult,\n} from \"./components/reset-password.component\";\n\nclass MembersTableDataSource extends PeopleTableDataSource<OrganizationUserView> {\n  protected statusType = OrganizationUserStatusType;\n}\n\n@Component({\n  templateUrl: \"members.component.html\",\n})\nexport class MembersComponent extends BaseMembersComponent<OrganizationUserView> implements OnInit {\n  @ViewChild(\"resetPasswordTemplate\", { read: ViewContainerRef, static: true })\n  resetPasswordModalRef: ViewContainerRef;\n\n  userType = OrganizationUserType;\n  userStatusType = OrganizationUserStatusType;\n  memberTab = MemberDialogTab;\n  protected dataSource = new MembersTableDataSource();\n\n  organization: Organization;\n  status: OrganizationUserStatusType = null;\n  orgResetPasswordPolicyEnabled = false;\n  orgIsOnSecretsManagerStandalone = false;\n  accountDeprovisioningEnabled = false;\n\n  protected canUseSecretsManager$: Observable<boolean>;\n\n  // Fixed sizes used for cdkVirtualScroll\n  protected rowHeight = 69;\n  protected rowHeightClass = `tw-h-[69px]`;\n\n  constructor(\n    apiService: ApiService,\n    i18nService: I18nService,\n    organizationManagementPreferencesService: OrganizationManagementPreferencesService,\n    keyService: KeyService,\n    private encryptService: EncryptService,\n    validationService: ValidationService,\n    logService: LogService,\n    userNamePipe: UserNamePipe,\n    dialogService: DialogService,\n    toastService: ToastService,\n    private policyService: PolicyService,\n    private policyApiService: PolicyApiService,\n    private route: ActivatedRoute,\n    private syncService: SyncService,\n    private organizationService: OrganizationService,\n    private organizationApiService: OrganizationApiServiceAbstraction,\n    private organizationUserApiService: OrganizationUserApiService,\n    private router: Router,\n    private groupService: GroupApiService,\n    private collectionService: CollectionService,\n    private billingApiService: BillingApiServiceAbstraction,\n    private modalService: ModalService,\n    private configService: ConfigService,\n  ) {\n    super(\n      apiService,\n      i18nService,\n      keyService,\n      validationService,\n      logService,\n      userNamePipe,\n      dialogService,\n      organizationManagementPreferencesService,\n      toastService,\n    );\n\n    const organization$ = this.route.params.pipe(\n      concatMap((params) => this.organizationService.get$(params.organizationId)),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    this.canUseSecretsManager$ = organization$.pipe(map((org) => org.useSecretsManager));\n\n    const policies$ = organization$.pipe(\n      switchMap((organization) => {\n        if (organization.isProviderUser) {\n          return from(this.policyApiService.getPolicies(organization.id)).pipe(\n            map((response) => Policy.fromListResponse(response)),\n          );\n        }\n\n        return this.policyService.policies$;\n      }),\n    );\n\n    combineLatest([this.route.queryParams, policies$, organization$])\n      .pipe(\n        concatMap(async ([qParams, policies, organization]) => {\n          this.organization = organization;\n\n          // Backfill pub/priv key if necessary\n          if (\n            this.organization.canManageUsersPassword &&\n            !this.organization.hasPublicAndPrivateKeys\n          ) {\n            const orgShareKey = await this.keyService.getOrgKey(this.organization.id);\n            const orgKeys = await this.keyService.makeKeyPair(orgShareKey);\n            const request = new OrganizationKeysRequest(orgKeys[0], orgKeys[1].encryptedString);\n            const response = await this.organizationApiService.updateKeys(\n              this.organization.id,\n              request,\n            );\n            if (response != null) {\n              this.organization.hasPublicAndPrivateKeys =\n                response.publicKey != null && response.privateKey != null;\n              await this.syncService.fullSync(true); // Replace organizations with new data\n            } else {\n              throw new Error(this.i18nService.t(\"resetPasswordOrgKeysError\"));\n            }\n          }\n\n          const resetPasswordPolicy = policies\n            .filter((policy) => policy.type === PolicyType.ResetPassword)\n            .find((p) => p.organizationId === this.organization.id);\n          this.orgResetPasswordPolicyEnabled = resetPasswordPolicy?.enabled;\n\n          this.orgIsOnSecretsManagerStandalone = false; // don't get billing metadata\n\n          await this.load();\n\n          this.searchControl.setValue(qParams.search);\n\n          if (qParams.viewEvents != null) {\n            const user = this.dataSource.data.filter((u) => u.id === qParams.viewEvents);\n            if (user.length > 0 && user[0].status === OrganizationUserStatusType.Confirmed) {\n              this.openEventsDialog(user[0]);\n            }\n          }\n        }),\n        takeUntilDestroyed(),\n      )\n      .subscribe();\n  }\n\n  async ngOnInit() {\n    this.accountDeprovisioningEnabled = await this.configService.getFeatureFlag(\n      FeatureFlag.AccountDeprovisioning,\n    );\n  }\n\n  async getUsers(): Promise<OrganizationUserView[]> {\n    let groupsPromise: Promise<Map<string, string>>;\n    let collectionsPromise: Promise<Map<string, string>>;\n\n    // We don't need both groups and collections for the table, so only load one\n    const userPromise = this.organizationUserApiService.getAllUsers(this.organization.id, {\n      includeGroups: this.organization.useGroups,\n      includeCollections: !this.organization.useGroups,\n    });\n\n    // Depending on which column is displayed, we need to load the group/collection names\n    if (this.organization.useGroups) {\n      groupsPromise = this.getGroupNameMap();\n    } else {\n      collectionsPromise = this.getCollectionNameMap();\n    }\n\n    const [usersResponse, groupNamesMap, collectionNamesMap] = await Promise.all([\n      userPromise,\n      groupsPromise,\n      collectionsPromise,\n    ]);\n\n    return usersResponse.data?.map<OrganizationUserView>((r) => {\n      const userView = OrganizationUserView.fromResponse(r);\n\n      userView.groupNames = userView.groups\n        .map((g) => groupNamesMap.get(g))\n        .sort(this.i18nService.collator?.compare);\n      userView.collectionNames = userView.collections\n        .map((c) => collectionNamesMap.get(c.id))\n        .sort(this.i18nService.collator?.compare);\n\n      return userView;\n    });\n  }\n\n  async getGroupNameMap(): Promise<Map<string, string>> {\n    const groups = await this.groupService.getAll(this.organization.id);\n    const groupNameMap = new Map<string, string>();\n    groups.forEach((g) => groupNameMap.set(g.id, g.name));\n    return groupNameMap;\n  }\n\n  /**\n   * Retrieve a map of all collection IDs <-> names for the organization.\n   */\n  async getCollectionNameMap() {\n    const collectionMap = new Map<string, string>();\n    const response = await this.apiService.getCollections(this.organization.id);\n\n    const collections = response.data.map(\n      (r) => new Collection(new CollectionData(r as CollectionDetailsResponse)),\n    );\n    const decryptedCollections = await this.collectionService.decryptMany(collections);\n\n    decryptedCollections.forEach((c) => collectionMap.set(c.id, c.name));\n\n    return collectionMap;\n  }\n\n  removeUser(id: string): Promise<void> {\n    return this.organizationUserApiService.removeOrganizationUser(this.organization.id, id);\n  }\n\n  revokeUser(id: string): Promise<void> {\n    return this.organizationUserApiService.revokeOrganizationUser(this.organization.id, id);\n  }\n\n  restoreUser(id: string): Promise<void> {\n    return this.organizationUserApiService.restoreOrganizationUser(this.organization.id, id);\n  }\n\n  reinviteUser(id: string): Promise<void> {\n    return this.organizationUserApiService.postOrganizationUserReinvite(this.organization.id, id);\n  }\n\n  async confirmUser(user: OrganizationUserView, publicKey: Uint8Array): Promise<void> {\n    const orgKey = await this.keyService.getOrgKey(this.organization.id);\n    const key = await this.encryptService.rsaEncrypt(orgKey.key, publicKey);\n    const request = new OrganizationUserConfirmRequest();\n    request.key = key.encryptedString;\n    await this.organizationUserApiService.postOrganizationUserConfirm(\n      this.organization.id,\n      user.id,\n      request,\n    );\n  }\n\n  async revoke(user: OrganizationUserView) {\n    const confirmed = await this.revokeUserConfirmationDialog(user);\n\n    if (!confirmed) {\n      return false;\n    }\n\n    this.actionPromise = this.revokeUser(user.id);\n    try {\n      await this.actionPromise;\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(\"revokedUserId\", this.userNamePipe.transform(user)),\n      });\n      await this.load();\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async restore(user: OrganizationUserView) {\n    this.actionPromise = this.restoreUser(user.id);\n    try {\n      await this.actionPromise;\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(\"restoredUserId\", this.userNamePipe.transform(user)),\n      });\n      await this.load();\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  allowResetPassword(orgUser: OrganizationUserView): boolean {\n    // Hierarchy check\n    let callingUserHasPermission = false;\n\n    switch (this.organization.type) {\n      case OrganizationUserType.Owner:\n        callingUserHasPermission = true;\n        break;\n      case OrganizationUserType.Admin:\n        callingUserHasPermission = orgUser.type !== OrganizationUserType.Owner;\n        break;\n      case OrganizationUserType.Custom:\n        callingUserHasPermission =\n          orgUser.type !== OrganizationUserType.Owner &&\n          orgUser.type !== OrganizationUserType.Admin;\n        break;\n    }\n\n    // Final\n    return (\n      this.organization.canManageUsersPassword &&\n      callingUserHasPermission &&\n      this.organization.useResetPassword &&\n      this.organization.hasPublicAndPrivateKeys &&\n      orgUser.resetPasswordEnrolled &&\n      this.orgResetPasswordPolicyEnabled &&\n      orgUser.status === OrganizationUserStatusType.Confirmed\n    );\n  }\n\n  showEnrolledStatus(orgUser: OrganizationUserUserDetailsResponse): boolean {\n    return (\n      this.organization.useResetPassword &&\n      orgUser.resetPasswordEnrolled &&\n      this.orgResetPasswordPolicyEnabled\n    );\n  }\n\n  private getManageBillingText(): string {\n    return this.organization.canEditSubscription ? \"ManageBilling\" : \"NoManageBilling\";\n  }\n\n  private getProductKey(productType: ProductTierType): string {\n    let product = \"\";\n    switch (productType) {\n      case ProductTierType.Free:\n        product = \"freeOrg\";\n        break;\n      case ProductTierType.TeamsStarter:\n        product = \"teamsStarterPlan\";\n        break;\n      case ProductTierType.Families:\n        product = \"familiesPlan\";\n        break;\n      default:\n        throw new Error(`Unsupported product type: ${productType}`);\n    }\n    return `${product}InvLimitReached${this.getManageBillingText()}`;\n  }\n\n  private getDialogContent(): string {\n    return this.i18nService.t(\n      this.getProductKey(this.organization.productTierType),\n      this.organization.seats,\n    );\n  }\n\n  private getAcceptButtonText(): string {\n    if (!this.organization.canEditSubscription) {\n      return this.i18nService.t(\"ok\");\n    }\n\n    const productType = this.organization.productTierType;\n\n    if (isNotSelfUpgradable(productType)) {\n      throw new Error(`Unsupported product type: ${productType}`);\n    }\n\n    return this.i18nService.t(\"upgrade\");\n  }\n\n  private async handleDialogClose(result: boolean | undefined): Promise<void> {\n    if (!result || !this.organization.canEditSubscription) {\n      return;\n    }\n\n    const productType = this.organization.productTierType;\n\n    if (isNotSelfUpgradable(productType)) {\n      throw new Error(`Unsupported product type: ${this.organization.productTierType}`);\n    }\n\n    await this.router.navigate(\n      [\"/organizations\", this.organization.id, \"billing\", \"subscription\"],\n      { queryParams: { upgrade: true } },\n    );\n  }\n\n  private async showSeatLimitReachedDialog(): Promise<void> {\n    const orgUpgradeSimpleDialogOpts: SimpleDialogOptions = {\n      title: this.i18nService.t(\"upgradeOrganization\"),\n      content: this.getDialogContent(),\n      type: \"primary\",\n      acceptButtonText: this.getAcceptButtonText(),\n    };\n\n    if (!this.organization.canEditSubscription) {\n      orgUpgradeSimpleDialogOpts.cancelButtonText = null;\n    }\n\n    const simpleDialog = this.dialogService.openSimpleDialogRef(orgUpgradeSimpleDialogOpts);\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    firstValueFrom(simpleDialog.closed).then(this.handleDialogClose.bind(this));\n  }\n\n  async edit(user: OrganizationUserView, initialTab: MemberDialogTab = MemberDialogTab.Role) {\n    if (\n      !user &&\n      this.organization.hasReseller &&\n      this.organization.seats === this.dataSource.confirmedUserCount\n    ) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: this.i18nService.t(\"seatLimitReached\"),\n        message: this.i18nService.t(\"contactYourProvider\"),\n      });\n      return;\n    }\n\n    // Invite User: Add Flow\n    // Click on user email: Edit Flow\n\n    // User attempting to invite new users in a free org with max users\n    if (\n      !user &&\n      this.dataSource.data.length === this.organization.seats &&\n      (this.organization.productTierType === ProductTierType.Free ||\n        this.organization.productTierType === ProductTierType.TeamsStarter ||\n        this.organization.productTierType === ProductTierType.Families)\n    ) {\n      if (!this.organization.canEditSubscription) {\n        await this.showSeatLimitReachedDialog();\n        return;\n      }\n\n      const reference = openChangePlanDialog(this.dialogService, {\n        data: {\n          organizationId: this.organization.id,\n          subscription: null,\n          productTierType: this.organization.productTierType,\n        },\n      });\n\n      const result = await lastValueFrom(reference.closed);\n\n      if (result === ChangePlanDialogResultType.Submitted) {\n        await this.load();\n      }\n      return;\n    }\n\n    const numSeatsUsed =\n      this.dataSource.confirmedUserCount +\n      this.dataSource.invitedUserCount +\n      this.dataSource.acceptedUserCount;\n\n    const dialog = openUserAddEditDialog(this.dialogService, {\n      data: {\n        name: this.userNamePipe.transform(user),\n        organizationId: this.organization.id,\n        organizationUserId: user != null ? user.id : null,\n        allOrganizationUserEmails: this.dataSource.data?.map((user) => user.email) ?? [],\n        usesKeyConnector: user?.usesKeyConnector,\n        isOnSecretsManagerStandalone: this.orgIsOnSecretsManagerStandalone,\n        initialTab: initialTab,\n        numSeatsUsed,\n        managedByOrganization: user?.managedByOrganization,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    switch (result) {\n      case MemberDialogResult.Deleted:\n        this.dataSource.removeUser(user);\n        break;\n      case MemberDialogResult.Saved:\n      case MemberDialogResult.Revoked:\n      case MemberDialogResult.Restored:\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.load();\n        break;\n    }\n  }\n\n  async bulkRemove() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const dialogRef = BulkRemoveDialogComponent.open(this.dialogService, {\n      data: {\n        organizationId: this.organization.id,\n        users: this.dataSource.getCheckedUsers(),\n      },\n    });\n    await lastValueFrom(dialogRef.closed);\n    await this.load();\n  }\n\n  async bulkDelete() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const dialogRef = BulkDeleteDialogComponent.open(this.dialogService, {\n      data: {\n        organizationId: this.organization.id,\n        users: this.dataSource.getCheckedUsers(),\n      },\n    });\n    await lastValueFrom(dialogRef.closed);\n    await this.load();\n  }\n\n  async bulkRevoke() {\n    await this.bulkRevokeOrRestore(true);\n  }\n\n  async bulkRestore() {\n    await this.bulkRevokeOrRestore(false);\n  }\n\n  async bulkRevokeOrRestore(isRevoking: boolean) {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const ref = BulkRestoreRevokeComponent.open(this.dialogService, {\n      organizationId: this.organization.id,\n      users: this.dataSource.getCheckedUsers(),\n      isRevoking: isRevoking,\n    });\n\n    await firstValueFrom(ref.closed);\n    await this.load();\n  }\n\n  async bulkReinvite() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const users = this.dataSource.getCheckedUsers();\n    const filteredUsers = users.filter((u) => u.status === OrganizationUserStatusType.Invited);\n\n    if (filteredUsers.length <= 0) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: this.i18nService.t(\"errorOccurred\"),\n        message: this.i18nService.t(\"noSelectedUsersApplicable\"),\n      });\n      return;\n    }\n\n    try {\n      const response = this.organizationUserApiService.postManyOrganizationUserReinvite(\n        this.organization.id,\n        filteredUsers.map((user) => user.id),\n      );\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n      // Bulk Status component open\n      const dialogRef = BulkStatusComponent.open(this.dialogService, {\n        data: {\n          users: users,\n          filteredUsers: filteredUsers,\n          request: response,\n          successfulMessage: this.i18nService.t(\"bulkReinviteMessage\"),\n        },\n      });\n      await lastValueFrom(dialogRef.closed);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async bulkConfirm() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const dialogRef = BulkConfirmDialogComponent.open(this.dialogService, {\n      data: {\n        organizationId: this.organization.id,\n        users: this.dataSource.getCheckedUsers(),\n      },\n    });\n\n    await lastValueFrom(dialogRef.closed);\n    await this.load();\n  }\n\n  async bulkEnableSM() {\n    const users = this.dataSource.getCheckedUsers().filter((ou) => !ou.accessSecretsManager);\n\n    if (users.length === 0) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: this.i18nService.t(\"errorOccurred\"),\n        message: this.i18nService.t(\"noSelectedUsersApplicable\"),\n      });\n      return;\n    }\n\n    const dialogRef = BulkEnableSecretsManagerDialogComponent.open(this.dialogService, {\n      orgId: this.organization.id,\n      users,\n    });\n\n    await lastValueFrom(dialogRef.closed);\n    this.dataSource.uncheckAllUsers();\n    await this.load();\n  }\n\n  openEventsDialog(user: OrganizationUserView) {\n    openEntityEventsDialog(this.dialogService, {\n      data: {\n        name: this.userNamePipe.transform(user),\n        organizationId: this.organization.id,\n        entityId: user.id,\n        showUser: false,\n        entity: \"user\",\n      },\n    });\n  }\n\n  async resetPassword(user: OrganizationUserView) {\n    const dialogRef = ResetPasswordComponent.open(this.dialogService, {\n      data: {\n        name: this.userNamePipe.transform(user),\n        email: user != null ? user.email : null,\n        organizationId: this.organization.id,\n        id: user != null ? user.id : null,\n      },\n    });\n\n    const result = await lastValueFrom(dialogRef.closed);\n    if (result === ResetPasswordDialogResult.Ok) {\n      await this.load();\n    }\n  }\n\n  protected async removeUserConfirmationDialog(user: OrganizationUserView) {\n    const content = user.usesKeyConnector\n      ? \"removeUserConfirmationKeyConnector\"\n      : \"removeOrgUserConfirmation\";\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: {\n        key: \"removeUserIdAccess\",\n        placeholders: [this.userNamePipe.transform(user)],\n      },\n      content: { key: content },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (user.status > OrganizationUserStatusType.Invited && user.hasMasterPassword === false) {\n      return await this.noMasterPasswordConfirmationDialog(user);\n    }\n\n    return true;\n  }\n\n  protected async revokeUserConfirmationDialog(user: OrganizationUserView) {\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"revokeAccess\", placeholders: [this.userNamePipe.transform(user)] },\n      content: this.i18nService.t(\"revokeUserConfirmation\"),\n      acceptButtonText: { key: \"revokeAccess\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (user.status > OrganizationUserStatusType.Invited && user.hasMasterPassword === false) {\n      return await this.noMasterPasswordConfirmationDialog(user);\n    }\n\n    return true;\n  }\n\n  async deleteUser(user: OrganizationUserView) {\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: {\n        key: \"deleteOrganizationUser\",\n        placeholders: [this.userNamePipe.transform(user)],\n      },\n      content: {\n        key: \"deleteOrganizationUserWarningDesc\",\n        placeholders: [this.userNamePipe.transform(user)],\n      },\n      type: \"warning\",\n      acceptButtonText: { key: \"delete\" },\n      cancelButtonText: { key: \"cancel\" },\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    this.actionPromise = this.organizationUserApiService.deleteOrganizationUser(\n      this.organization.id,\n      user.id,\n    );\n    try {\n      await this.actionPromise;\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(\"organizationUserDeleted\", this.userNamePipe.transform(user)),\n      });\n      this.dataSource.removeUser(user);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  private async noMasterPasswordConfirmationDialog(user: OrganizationUserView) {\n    return this.dialogService.openSimpleDialog({\n      title: {\n        key: \"removeOrgUserNoMasterPasswordTitle\",\n      },\n      content: {\n        key: \"removeOrgUserNoMasterPasswordDesc\",\n        placeholders: [this.userNamePipe.transform(user)],\n      },\n      type: \"warning\",\n    });\n  }\n\n  get showBulkConfirmUsers(): boolean {\n    if (!this.accountDeprovisioningEnabled) {\n      return super.showBulkConfirmUsers;\n    }\n\n    return this.dataSource\n      .getCheckedUsers()\n      .every((member) => member.status == this.userStatusType.Accepted);\n  }\n\n  get showBulkReinviteUsers(): boolean {\n    if (!this.accountDeprovisioningEnabled) {\n      return super.showBulkReinviteUsers;\n    }\n\n    return this.dataSource\n      .getCheckedUsers()\n      .every((member) => member.status == this.userStatusType.Invited);\n  }\n\n  get showBulkRestoreUsers(): boolean {\n    return (\n      !this.accountDeprovisioningEnabled ||\n      this.dataSource\n        .getCheckedUsers()\n        .every((member) => member.status == this.userStatusType.Revoked)\n    );\n  }\n\n  get showBulkRevokeUsers(): boolean {\n    return (\n      !this.accountDeprovisioningEnabled ||\n      this.dataSource\n        .getCheckedUsers()\n        .every((member) => member.status != this.userStatusType.Revoked)\n    );\n  }\n\n  get showBulkRemoveUsers(): boolean {\n    return (\n      !this.accountDeprovisioningEnabled ||\n      this.dataSource.getCheckedUsers().every((member) => !member.managedByOrganization)\n    );\n  }\n\n  get showBulkDeleteUsers(): boolean {\n    if (!this.accountDeprovisioningEnabled) {\n      return false;\n    }\n\n    const validStatuses = [\n      this.userStatusType.Accepted,\n      this.userStatusType.Confirmed,\n      this.userStatusType.Revoked,\n    ];\n\n    return this.dataSource\n      .getCheckedUsers()\n      .every((member) => member.managedByOrganization && validStatuses.includes(member.status));\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { canAccessMembersTab } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\nimport { organizationPermissionsGuard } from \"../guards/org-permissions.guard\";\n\nimport { MembersComponent } from \"./members.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: MembersComponent,\n    canActivate: [organizationPermissionsGuard(canAccessMembersTab)],\n    data: {\n      titleId: \"members\",\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MembersRoutingModule {}\n","import { ScrollingModule } from \"@angular/cdk/scrolling\";\nimport { NgModule } from \"@angular/core\";\n\nimport { PasswordStrengthV2Component } from \"@bitwarden/angular/tools/password-strength/password-strength-v2.component\";\nimport { PasswordCalloutComponent } from \"@bitwarden/auth/angular\";\n\nimport { LooseComponentsModule } from \"../../../shared\";\nimport { SharedOrganizationModule } from \"../shared\";\n\nimport { BulkConfirmDialogComponent } from \"./components/bulk/bulk-confirm-dialog.component\";\nimport { BulkDeleteDialogComponent } from \"./components/bulk/bulk-delete-dialog.component\";\nimport { BulkEnableSecretsManagerDialogComponent } from \"./components/bulk/bulk-enable-sm-dialog.component\";\nimport { BulkRemoveDialogComponent } from \"./components/bulk/bulk-remove-dialog.component\";\nimport { BulkRestoreRevokeComponent } from \"./components/bulk/bulk-restore-revoke.component\";\nimport { BulkStatusComponent } from \"./components/bulk/bulk-status.component\";\nimport { UserDialogModule } from \"./components/member-dialog\";\nimport { ResetPasswordComponent } from \"./components/reset-password.component\";\nimport { MembersRoutingModule } from \"./members-routing.module\";\nimport { MembersComponent } from \"./members.component\";\n\n@NgModule({\n  imports: [\n    SharedOrganizationModule,\n    LooseComponentsModule,\n    MembersRoutingModule,\n    UserDialogModule,\n    PasswordCalloutComponent,\n    ScrollingModule,\n    PasswordStrengthV2Component,\n  ],\n  declarations: [\n    BulkConfirmDialogComponent,\n    BulkEnableSecretsManagerDialogComponent,\n    BulkRemoveDialogComponent,\n    BulkRestoreRevokeComponent,\n    BulkStatusComponent,\n    MembersComponent,\n    ResetPasswordComponent,\n    BulkDeleteDialogComponent,\n  ],\n})\nexport class MembersModule {}\n"],"names":["commaSeparatedEmails","control","value","undefined","split","map","email","trim","find","_","multipleEmails","message","orgSeatLimitReachedValidator","organization","allOrganizationUserEmails","errorMessage","newEmailsToAdd","Array","from","Set","filter","newEmailToAdd","some","existingEmail","productTierType","Free","Families","TeamsStarter","length","seats","seatLimitReached","onChildCheck","NestedCheckboxComponent","destroy$","Subject","parentIndeterminate","this","children","key","every","ngOnInit","checkboxes","controls","parentId","valueChanges","pipe","takeUntil","subscribe","Object","values","forEach","setValue","emitEvent","parentCheckbox","entries","parentChecked","index","item","ngOnDestroy","next","complete","pascalize","s","camelToPascalCase","handleDependentPermissions","MemberDialogTab","MemberDialogResult","MemberDialogComponent","customUserTypeSelected","formGroup","type","Custom","constructor","params","dialogRef","i18nService","formBuilder","collectionAdminService","groupService","userService","organizationUserApiService","dialogService","accountService","organizationService","toastService","configService","loading","editMode","isRevoked","access","collections","organizationUserType","PermissionMode","showNoMasterPasswordWarning","collectionAccessItems","groupAccessItems","group","emails","User","externalId","disabled","accessSecretsManager","groups","permissionsGroup","manageAllCollectionsGroup","manageAllCollections","createNewCollections","editAnyCollection","deleteAnyCollection","accessEventLogs","accessImportExport","accessReports","manageGroups","manageSso","managePolicies","manageUsers","manageResetPassword","accountDeprovisioningEnabled$","getFeatureFlag$","AccountDeprovisioning","submit","markAllAsTouched","invalid","tabIndex","Role","showToast","variant","title","t","firstValueFrom","organization$","useCustomPermissions","userView","id","organizationUserId","organizationId","permissions","setRequestPermissions","v","Collection","restrictEditingSelf$","m","save","maxEmailsCount","setErrors","tooManyEmails","hasReseller","numSeatsUsed","invite","name","close","Saved","remove","usesKeyConnector","confirmed","openSimpleDialog","placeholders","content","noMasterPasswordConfirmationDialog","removeOrganizationUser","Deleted","revoke","acceptButtonText","revokeOrganizationUser","Revoked","restore","restoreOrganizationUser","Restored","delete","cancelButtonText","deleteOrganizationUser","ProductTierType","get$","shareReplay","refCount","bufferSize","initialTab","isOnSecretsManagerStandalone","patchValue","groups$","switchMap","useGroups","getAllDetails","of","userDetails$","get","allowAdminAccessToAllCollectionItems$","allowAdminAccessToAllCollectionItems","combineLatest","activeAccount$","allowAdminAccess","userDetails","activeAccount","userId","restrictEditingSelf","disable","enable","canAssignAccessToAnyCollection$","org","canEditAnyCollection","getAll","setFormValidators","concat","g","mapGroupToAccessItemView","Group","labelName","listName","c","mapCollectionToAccessItemView","users","readonly","loadOrganizationUser","remainingSeats$","emailsControlValidators","required","emailsControl","setValidators","updateValueAndValidity","Error","status","Invited","hasMasterPassword","allCollectionsPermissions","collectionsFromGroups","includes","flatMap","accessSelection","collection","accessSelections","user","items","selection","permission","mapToAccessSelections","groupAccessSelections","groupId","mapToGroupAccessSelections","removeControl","check","select","checked","readOnly","selectAll","p","clearPermissions","partialPermissions","assign","document","getElementById","cancel","Canceled","result","canEditUserAccess","readonlyPermission","viaGroupName","UserDialogModule","UserConfirmComponent","data","keyService","logService","organizationManagementPreferencesService","dontAskAgain","autoConfirmFingerPrints","set","confirmUser","publicKey","fingerprint","getFingerprint","join","e","error","open","config","peopleFilter","searchText","statusFilter","text","normalizedText","toLowerCase","textFilter","PeopleTableDataSource","super","activeUserCount","u","statusType","invitedUserCount","acceptedUserCount","Accepted","confirmedUserCount","Confirmed","revokedUserCount","checkUser","getCheckedUsers","checkAllFilteredUsers","uncheckAllUsers","filteredUsers","filteredData","selectCount","i","removeUser","replaceUser","findIndex","updatedData","slice","BaseMembersComponent","showConfirmUsers","dataSource","showBulkConfirmUsers","showBulkReinviteUsers","apiService","validationService","userNamePipe","searchControl","nonNullable","statusToggle","BehaviorSubject","debounceTime","load","response","getUsers","isArray","firstLoaded","edit","removeUserConfirmationDialog","transform","actionPromise","showError","reinvite","reinviteUser","confirm","userStatusType","publicKeyResponse","getUserPublicKey","fromB64ToArray","autoConfirm","state$","lastValueFrom","closed","info","BaseBulkConfirmComponent","encryptService","publicKeys","Map","fingerprints","statuses","done","getCryptoKey","userIdsWithKeys","encryptedKey","rsaEncrypt","push","encryptedString","postConfirmRequest","entry","excludedUsers","isAccepted","publicKeysResponse","getPublicKeys","BulkConfirmDialogComponent","dialogParams","stateProvider","organizationKey$","postOrganizationUsersPublicKey","request","postOrganizationUserBulkConfirm","activeUserId$","orgKeys$","organizationKeysById","BulkDeleteDialogComponent","deleteManyOrganizationUsers","BulkEnableSecretsManagerDialogComponent","platformUtilsService","putOrganizationUserBulkEnableSecretsManager","orgId","BaseBulkRemoveComponent","deleteUsers","BulkRemoveDialogComponent","removeManyOrganizationUsers","removeUsersWarning","BulkRestoreRevokeComponent","nonCompliantMembers","performBulkUserAction","bulkMessage","isRevoking","bulkTitle","titleKey","bulkMemberTitle","userIds","revokeManyOrganizationUsers","restoreManyOrganizationUsers","BulkStatusComponent","showBulkStatus","keyedErrors","r","reduce","a","x","keyedFilteredUsers","successfulMessage","hasOwnProperty","ResetPasswordDialogResult","ResetPasswordComponent","resetPasswordService","passwordGenerationService","policyService","newPassword","showPassword","minimumPasswordLength","enforcedPolicyOptions","evaluateMasterPassword","passwordStrengthScore","resetMasterPassword","Ok","masterPasswordPolicyOptions$","enforcedPasswordPolicyOptions","loggedOutWarningName","generatePassword","options","getOptions","passwordStrengthComponent","updatePasswordStrength","togglePassword","focus","copy","copyToClipboard","window","getStrengthScore","input","bulkEnableSM","bulkReinvite","bulkConfirm","bulkRestore","bulkRevoke","bulkRemove","bulkDelete","openEventsDialog","resetPassword","deleteUser","MembersTableDataSource","MembersComponent","policyApiService","route","syncService","organizationApiService","router","collectionService","billingApiService","modalService","userType","memberTab","orgResetPasswordPolicyEnabled","orgIsOnSecretsManagerStandalone","accountDeprovisioningEnabled","rowHeight","rowHeightClass","concatMap","canUseSecretsManager$","useSecretsManager","policies$","isProviderUser","getPolicies","P","fromListResponse","queryParams","qParams","policies","canManageUsersPassword","hasPublicAndPrivateKeys","orgShareKey","getOrgKey","orgKeys","makeKeyPair","updateKeys","privateKey","fullSync","resetPasswordPolicy","policy","ResetPassword","enabled","search","viewEvents","getFeatureFlag","groupsPromise","collectionsPromise","userPromise","getAllUsers","includeGroups","includeCollections","getGroupNameMap","getCollectionNameMap","usersResponse","groupNamesMap","collectionNamesMap","Promise","all","fromResponse","groupNames","sort","collator","compare","collectionNames","groupNameMap","collectionMap","getCollections","decryptMany","revokeUser","restoreUser","postOrganizationUserReinvite","orgKey","postOrganizationUserConfirm","revokeUserConfirmationDialog","allowResetPassword","orgUser","callingUserHasPermission","Owner","Admin","useResetPassword","resetPasswordEnrolled","showEnrolledStatus","getManageBillingText","canEditSubscription","getProductKey","productType","product","getDialogContent","getAcceptButtonText","handleDialogClose","navigate","upgrade","showSeatLimitReachedDialog","orgUpgradeSimpleDialogOpts","simpleDialog","openSimpleDialogRef","then","bind","reference","subscription","Submitted","dialog","managedByOrganization","bulkRevokeOrRestore","ref","postManyOrganizationUserReinvite","ou","entityId","showUser","entity","member","showBulkRestoreUsers","showBulkRevokeUsers","showBulkRemoveUsers","showBulkDeleteUsers","validStatuses","routes","path","component","canActivate","titleId","MembersRoutingModule","forChild","MembersModule"],"sourceRoot":""}