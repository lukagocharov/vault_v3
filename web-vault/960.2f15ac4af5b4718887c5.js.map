{
	"version": 3,
	"file": "960.2f15ac4af5b4718887c5.js",
	"mappings": "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",
	"sources": ["webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/guards/org-permissions.guard.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/guards/org-redirect.guard.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/entity-events.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/entity-events.component.ts", "webpack://@bitwarden/web-vault/./src/app/billing/services/reseller-warning.service.ts", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-header/vault-header.component.html", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-header/vault-header.component.ts", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/bulk-collections-dialog/bulk-collections-dialog.component.ts", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/bulk-collections-dialog/bulk-collections-dialog.component.html", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/collection-access-restricted.component.ts", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/services/admin-console-cipher-form-config.service.ts", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.service.ts", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.module.ts", "webpack://@bitwarden/web-vault/./src/app/vault/individual-vault/vault-filter/components/vault-filter.component.html", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.component.ts", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.component.html", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.component.ts", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-routing.module.ts", "webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.module.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/integrations/integration-card/integration-card.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/integrations/integration-card/integration-card.component.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/integrations/integration-grid/integration-grid.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/integrations/integration-grid/integration-grid.component.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/integrations/integrations.pipe.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/integrations/integrations.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/integrations/integrations.component.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/group-add-edit.component.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/group-add-edit.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/groups.component.html", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/groups.component.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/organization-routing.module.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/guards/is-enterprise-org.guard.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/organization.module.ts", "webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/shared-organization.module.ts", "webpack://@bitwarden/web-vault/../../libs/common/src/models/view/event.view.ts"],
	"sourcesContent": ["// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { inject } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n} from \"@angular/router\";\n\nimport {\n  canAccessOrgAdmin,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { ToastService } from \"@bitwarden/components\";\n\n/**\n * `CanActivateFn` that asserts the logged in user has permission to access\n * the page being navigated to. Two high-level checks are performed:\n *\n * 1. If the user is not a member of the organization in the URL parameters, they\n *    are redirected to the home screen.\n * 2. If the organization in the URL parameters is disabled and the user is not\n *    an admin, they are redirected to the home screen.\n *\n * In addition to these high level checks the guard accepts a callback\n * function as an argument that will be called to check for more granular\n * permissions. Based on the return from callback one of the following\n * will happen:\n *\n * 1. If the logged in user does not have the required permissions they are\n *    redirected to `/organizations/{id}` or `/` based on admin console access\n *    permissions.\n * 2. If the logged in user does have the required permissions navigation\n *    proceeds as expected.\n */\nexport function organizationPermissionsGuard(\n  permissionsCallback?: (organization: Organization) => boolean,\n): CanActivateFn {\n  return async (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n    const router = inject(Router);\n    const organizationService = inject(OrganizationService);\n    const toastService = inject(ToastService);\n    const i18nService = inject(I18nService);\n    const syncService = inject(SyncService);\n\n    // TODO: We need to fix issue once and for all.\n    if ((await syncService.getLastSync()) == null) {\n      await syncService.fullSync(false);\n    }\n\n    const org = await organizationService.get(route.params.organizationId);\n    if (org == null) {\n      return router.createUrlTree([\"/\"]);\n    }\n\n    if (!org.isOwner && !org.enabled) {\n      toastService.showToast({\n        variant: \"error\",\n        title: null,\n        message: i18nService.t(\"organizationIsDisabled\"),\n      });\n      return router.createUrlTree([\"/\"]);\n    }\n\n    const hasPermissions = permissionsCallback == null || permissionsCallback(org);\n\n    if (!hasPermissions) {\n      // Handle linkable ciphers for organizations the user only has view access to\n      // https://bitwarden.atlassian.net/browse/EC-203\n      const cipherId =\n        state.root.queryParamMap.get(\"itemId\") || state.root.queryParamMap.get(\"cipherId\");\n      if (cipherId) {\n        return router.createUrlTree([\"/vault\"], {\n          queryParams: {\n            itemId: cipherId,\n          },\n        });\n      }\n\n      toastService.showToast({\n        variant: \"error\",\n        title: null,\n        message: i18nService.t(\"accessDenied\"),\n      });\n      return canAccessOrgAdmin(org)\n        ? router.createUrlTree([\"/organizations\", org.id])\n        : router.createUrlTree([\"/\"]);\n    }\n\n    return true;\n  };\n}\n", "import { inject } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n} from \"@angular/router\";\n\nimport {\n  canAccessOrgAdmin,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\n/**\n *\n * `CanActivateFn` that returns a URL Tree redirecting to a caller provided\n * sub route of `/organizations/{id}/`. If no sub route is provided the URL\n * tree returned will redirect to `/organizations/{id}` if possible, or `/` if\n * the user does not have permission to access `organizations/{id}`.\n */\nexport function organizationRedirectGuard(\n  customRedirect?: (org: Organization) => string | string[],\n): CanActivateFn {\n  return async (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n    const router = inject(Router);\n    const organizationService = inject(OrganizationService);\n\n    const org = await organizationService.get(route.params.organizationId);\n\n    if (customRedirect != null) {\n      let redirectPath = customRedirect(org);\n      if (typeof redirectPath === \"string\") {\n        redirectPath = [redirectPath];\n      }\n      return router.createUrlTree([state.url, ...redirectPath]);\n    }\n\n    if (org != null && canAccessOrgAdmin(org)) {\n      return router.createUrlTree([\"/organizations\", org.id]);\n    }\n\n    return router.createUrlTree([\"/\"]);\n  };\n}\n", "<bit-dialog dialogSize=\"large\" [loading]=\"loading\">\n  <span bitDialogTitle>\n    {{ \"eventLogs\" | i18n }}\n    <small class=\"tw-text-muted\" *ngIf=\"name\">{{ name }}</small>\n  </span>\n  <div bitDialogContent>\n    <form [formGroup]=\"filterFormGroup\" [bitSubmit]=\"refreshEvents\">\n      <div class=\"tw-flex tw-items-center tw-space-x-2\">\n        <bit-form-field>\n          <bit-label>{{ \"from\" | i18n }}</bit-label>\n          <input\n            bitInput\n            type=\"datetime-local\"\n            id=\"start\"\n            placeholder=\"{{ 'startDate' | i18n }}\"\n            formControlName=\"start\"\n          />\n        </bit-form-field>\n        <span class=\"tw-mx-2\">-</span>\n        <bit-form-field>\n          <bit-label>{{ \"to\" | i18n }}</bit-label>\n          <input\n            bitInput\n            type=\"datetime-local\"\n            id=\"end\"\n            placeholder=\"{{ 'endDate' | i18n }}\"\n            formControlName=\"end\"\n          />\n        </bit-form-field>\n        <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n          <i class=\"bwi bwi-refresh bwi-fw\" aria-hidden=\"true\"></i>\n          {{ \"refresh\" | i18n }}\n        </button>\n      </div>\n    </form>\n    <hr />\n    <div *ngIf=\"!dataSource.data || !dataSource.data.length\">\n      {{ \"noEventsInList\" | i18n }}\n    </div>\n    <bit-table [dataSource]=\"dataSource\" *ngIf=\"dataSource?.data?.length\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"timestamp\" | i18n }}</th>\n          <th bitCell>\n            <span class=\"tw-sr-only\">{{ \"client\" | i18n }}</span>\n          </th>\n          <th bitCell *ngIf=\"showUser\">{{ \"member\" | i18n }}</th>\n          <th bitCell>{{ \"event\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>{{ r.date | date: \"medium\" }}</td>\n          <td bitCell>\n            <i\n              class=\"tw-text-muted bwi bwi-lg {{ r.appIcon }}\"\n              title=\"{{ r.appName }}, {{ r.ip }}\"\n              aria-hidden=\"true\"\n            ></i>\n            <span class=\"tw-sr-only\">{{ r.appName }}, {{ r.ip }}</span>\n          </td>\n          <td bitCell *ngIf=\"showUser\">\n            <span appA11yTitle=\"{{ r.userEmail }}\">{{ r.userName }}</span>\n          </td>\n          <td bitCell [innerHTML]=\"r.message\"></td>\n        </tr>\n      </ng-template>\n    </bit-table>\n    <button\n      bitButton\n      buttonType=\"secondary\"\n      block\n      [bitAction]=\"loadMoreEvents\"\n      type=\"button\"\n      *ngIf=\"continuationToken\"\n    >\n      {{ \"loadMore\" | i18n }}\n    </button>\n  </div>\n  <ng-container bitDialogFooter>\n    <button bitButton buttonType=\"secondary\" type=\"button\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DIALOG_DATA, DialogConfig } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormBuilder } from \"@angular/forms\";\n\nimport { OrganizationUserApiService } from \"@bitwarden/admin-console/common\";\nimport { UserNamePipe } from \"@bitwarden/angular/pipes/user-name.pipe\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { EventResponse } from \"@bitwarden/common/models/response/event.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { EventView } from \"@bitwarden/common/models/view/event.view\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { DialogService, TableDataSource, ToastService } from \"@bitwarden/components\";\n\nimport { EventService } from \"../../../core\";\nimport { SharedModule } from \"../../../shared\";\n\nexport interface EntityEventsDialogParams {\n  entity: \"user\" | \"cipher\";\n  entityId: string;\n\n  organizationId?: string;\n  providerId?: string;\n  showUser?: boolean;\n  name?: string;\n}\n\n@Component({\n  imports: [SharedModule],\n  templateUrl: \"entity-events.component.html\",\n  standalone: true,\n})\nexport class EntityEventsComponent implements OnInit {\n  loading = true;\n  continuationToken: string;\n  protected dataSource = new TableDataSource<EventView>();\n  protected filterFormGroup = this.formBuilder.group({\n    start: [\"\"],\n    end: [\"\"],\n  });\n\n  private orgUsersUserIdMap = new Map<string, any>();\n  private orgUsersIdMap = new Map<string, any>();\n\n  get name() {\n    return this.params.name;\n  }\n\n  get showUser() {\n    return this.params.showUser ?? false;\n  }\n\n  constructor(\n    @Inject(DIALOG_DATA) private params: EntityEventsDialogParams,\n    private apiService: ApiService,\n    private i18nService: I18nService,\n    private eventService: EventService,\n    private platformUtilsService: PlatformUtilsService,\n    private userNamePipe: UserNamePipe,\n    private logService: LogService,\n    private organizationUserApiService: OrganizationUserApiService,\n    private formBuilder: FormBuilder,\n    private validationService: ValidationService,\n    private toastService: ToastService,\n  ) {}\n\n  async ngOnInit() {\n    const defaultDates = this.eventService.getDefaultDateFilters();\n    this.filterFormGroup.setValue({\n      start: defaultDates[0],\n      end: defaultDates[1],\n    });\n    await this.load();\n  }\n\n  async load() {\n    try {\n      if (this.showUser) {\n        const response = await this.organizationUserApiService.getAllMiniUserDetails(\n          this.params.organizationId,\n        );\n        response.data.forEach((u) => {\n          const name = this.userNamePipe.transform(u);\n          this.orgUsersIdMap.set(u.id, { name: name, email: u.email });\n          this.orgUsersUserIdMap.set(u.userId, { name: name, email: u.email });\n        });\n      }\n      await this.loadEvents(true);\n    } catch (e) {\n      this.logService.error(e);\n      this.validationService.showError(e);\n    }\n\n    this.loading = false;\n  }\n\n  loadMoreEvents = async () => {\n    await this.loadEvents(false);\n  };\n\n  refreshEvents = async () => {\n    await this.loadEvents(true);\n  };\n\n  private async loadEvents(clearExisting: boolean) {\n    let dates: string[] = null;\n    try {\n      dates = this.eventService.formatDateFilters(\n        this.filterFormGroup.value.start,\n        this.filterFormGroup.value.end,\n      );\n    } catch (e) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: this.i18nService.t(\"errorOccurred\"),\n        message: this.i18nService.t(\"invalidDateRange\"),\n      });\n      return;\n    }\n\n    let response: ListResponse<EventResponse>;\n    if (this.params.entity === \"user\" && this.params.providerId) {\n      response = await this.apiService.getEventsProviderUser(\n        this.params.providerId,\n        this.params.entityId,\n        dates[0],\n        dates[1],\n        clearExisting ? null : this.continuationToken,\n      );\n    } else if (this.params.entity === \"user\") {\n      response = await this.apiService.getEventsOrganizationUser(\n        this.params.organizationId,\n        this.params.entityId,\n        dates[0],\n        dates[1],\n        clearExisting ? null : this.continuationToken,\n      );\n    } else {\n      response = await this.apiService.getEventsCipher(\n        this.params.entityId,\n        dates[0],\n        dates[1],\n        clearExisting ? null : this.continuationToken,\n      );\n    }\n\n    this.continuationToken = response.continuationToken;\n    const events: EventView[] = await Promise.all(\n      response.data.map(async (r) => {\n        const userId = r.actingUserId == null ? r.userId : r.actingUserId;\n        const eventInfo = await this.eventService.getEventInfo(r);\n        const user =\n          this.showUser && userId != null && this.orgUsersUserIdMap.has(userId)\n            ? this.orgUsersUserIdMap.get(userId)\n            : null;\n\n        return new EventView({\n          message: eventInfo.message,\n          humanReadableMessage: eventInfo.humanReadableMessage,\n          appIcon: eventInfo.appIcon,\n          appName: eventInfo.appName,\n          userId: userId,\n          userName: user != null ? user.name : this.showUser ? this.i18nService.t(\"unknown\") : null,\n          userEmail: user != null ? user.email : this.showUser ? \"\" : null,\n          date: r.date,\n          ip: r.ipAddress,\n          type: r.type,\n          installationId: r.installationId,\n          systemUser: r.systemUser,\n          serviceAccountId: r.serviceAccountId,\n        });\n      }),\n    );\n\n    if (!clearExisting && this.dataSource.data != null && this.dataSource.data.length > 0) {\n      this.dataSource.data = this.dataSource.data.concat(events);\n    } else {\n      this.dataSource.data = events;\n    }\n  }\n}\n\n/**\n * Strongly typed helper to open a EntityEventsComponent as a dialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Configuration for the dialog\n */\nexport const openEntityEventsDialog = (\n  dialogService: DialogService,\n  config: DialogConfig<EntityEventsDialogParams>,\n) => {\n  return dialogService.open<void, EntityEventsDialogParams>(EntityEventsComponent, config);\n};\n", "import { Injectable } from \"@angular/core\";\n\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { OrganizationBillingMetadataResponse } from \"@bitwarden/common/billing/models/response/organization-billing-metadata.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\nexport interface ResellerWarning {\n  type: \"info\" | \"warning\";\n  message: string;\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class ResellerWarningService {\n  private readonly RENEWAL_WARNING_DAYS = 14;\n  private readonly GRACE_PERIOD_DAYS = 30;\n\n  constructor(private i18nService: I18nService) {}\n\n  getWarning(\n    organization: Organization,\n    organizationBillingMetadata: OrganizationBillingMetadataResponse,\n  ): ResellerWarning | null {\n    if (!organization.hasReseller) {\n      return null; // If no reseller, return null immediately\n    }\n\n    // Check for past due warning first (highest priority)\n    if (this.shouldShowPastDueWarning(organizationBillingMetadata)) {\n      const gracePeriodEnd = this.getGracePeriodEndDate(organizationBillingMetadata.invoiceDueDate);\n      if (!gracePeriodEnd) {\n        return null;\n      }\n      return {\n        type: \"warning\",\n        message: this.i18nService.t(\n          \"resellerPastDueWarningMsg\",\n          organization.providerName,\n          this.formatDate(gracePeriodEnd),\n        ),\n      } as ResellerWarning;\n    }\n\n    // Check for open invoice warning\n    if (this.shouldShowInvoiceWarning(organizationBillingMetadata)) {\n      const invoiceCreatedDate = organizationBillingMetadata.invoiceCreatedDate;\n      const invoiceDueDate = organizationBillingMetadata.invoiceDueDate;\n      if (!invoiceCreatedDate || !invoiceDueDate) {\n        return null;\n      }\n      return {\n        type: \"info\",\n        message: this.i18nService.t(\n          \"resellerOpenInvoiceWarningMgs\",\n          organization.providerName,\n          this.formatDate(organizationBillingMetadata.invoiceCreatedDate),\n          this.formatDate(organizationBillingMetadata.invoiceDueDate),\n        ),\n      } as ResellerWarning;\n    }\n\n    // Check for renewal warning\n    if (this.shouldShowRenewalWarning(organizationBillingMetadata)) {\n      const subPeriodEndDate = organizationBillingMetadata.subPeriodEndDate;\n      if (!subPeriodEndDate) {\n        return null;\n      }\n\n      return {\n        type: \"info\",\n        message: this.i18nService.t(\n          \"resellerRenewalWarningMsg\",\n          organization.providerName,\n          this.formatDate(organizationBillingMetadata.subPeriodEndDate),\n        ),\n      } as ResellerWarning;\n    }\n\n    return null;\n  }\n\n  private shouldShowRenewalWarning(\n    organizationBillingMetadata: OrganizationBillingMetadataResponse,\n  ): boolean {\n    if (\n      !organizationBillingMetadata.hasSubscription ||\n      !organizationBillingMetadata.subPeriodEndDate\n    ) {\n      return false;\n    }\n    const renewalDate = new Date(organizationBillingMetadata.subPeriodEndDate);\n    const daysUntilRenewal = Math.ceil(\n      (renewalDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24),\n    );\n    return daysUntilRenewal <= this.RENEWAL_WARNING_DAYS;\n  }\n\n  private shouldShowInvoiceWarning(\n    organizationBillingMetadata: OrganizationBillingMetadataResponse,\n  ): boolean {\n    if (\n      !organizationBillingMetadata.hasOpenInvoice ||\n      !organizationBillingMetadata.invoiceDueDate\n    ) {\n      return false;\n    }\n    const invoiceDueDate = new Date(organizationBillingMetadata.invoiceDueDate);\n    return invoiceDueDate > new Date();\n  }\n\n  private shouldShowPastDueWarning(\n    organizationBillingMetadata: OrganizationBillingMetadataResponse,\n  ): boolean {\n    if (\n      !organizationBillingMetadata.hasOpenInvoice ||\n      !organizationBillingMetadata.invoiceDueDate\n    ) {\n      return false;\n    }\n    const invoiceDueDate = new Date(organizationBillingMetadata.invoiceDueDate);\n    return invoiceDueDate <= new Date() && !organizationBillingMetadata.isSubscriptionUnpaid;\n  }\n\n  private getGracePeriodEndDate(dueDate: Date | null): Date | null {\n    if (!dueDate) {\n      return null;\n    }\n    const gracePeriodEnd = new Date(dueDate);\n    gracePeriodEnd.setDate(gracePeriodEnd.getDate() + this.GRACE_PERIOD_DAYS);\n    return gracePeriodEnd;\n  }\n\n  private formatDate(date: Date | null): string {\n    if (!date) {\n      return \"N/A\";\n    }\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      day: \"2-digit\",\n      year: \"numeric\",\n    });\n  }\n}\n", "<app-header [title]=\"title\" [icon]=\"icon\">\n  <bit-breadcrumbs *ngIf=\"showBreadcrumbs\" slot=\"breadcrumbs\">\n    <bit-breadcrumb\n      [route]=\"[]\"\n      [queryParams]=\"{ organizationId: organization.id, collectionId: null }\"\n      queryParamsHandling=\"merge\"\n    >\n      {{ organization.name }}\n      <span>\n        {{ \"collections\" | i18n | lowercase }}\n      </span>\n    </bit-breadcrumb>\n\n    <ng-container>\n      <bit-breadcrumb\n        *ngFor=\"let collection of collections\"\n        icon=\"bwi-collection\"\n        [route]=\"[]\"\n        [queryParams]=\"{ collectionId: collection.id }\"\n        queryParamsHandling=\"merge\"\n      >\n        {{ collection.name }}\n      </bit-breadcrumb>\n    </ng-container>\n  </bit-breadcrumbs>\n\n  <ng-container slot=\"title-suffix\">\n    <ng-container\n      *ngIf=\"\n        collection != null && (canEditCollection || canDeleteCollection || canViewCollectionInfo)\n      \"\n    >\n      <button\n        bitIconButton=\"bwi-angle-down\"\n        [bitMenuTriggerFor]=\"editCollectionMenu\"\n        size=\"small\"\n        type=\"button\"\n        aria-haspopup=\"true\"\n      ></button>\n      <bit-menu #editCollectionMenu>\n        <ng-container *ngIf=\"canEditCollection\">\n          <button\n            type=\"button\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Info, false)\"\n          >\n            <i class=\"bwi bwi-fw bwi-pencil-square\" aria-hidden=\"true\"></i>\n            {{ \"editInfo\" | i18n }}\n          </button>\n          <button\n            type=\"button\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Access, false)\"\n          >\n            <i class=\"bwi bwi-fw bwi-users\" aria-hidden=\"true\"></i>\n            {{ \"access\" | i18n }}\n          </button>\n        </ng-container>\n        <ng-container *ngIf=\"!canEditCollection && canViewCollectionInfo\">\n          <button\n            type=\"button\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Info, true)\"\n          >\n            <i class=\"bwi bwi-fw bwi-pencil-square\" aria-hidden=\"true\"></i>\n            {{ \"viewInfo\" | i18n }}\n          </button>\n          <button\n            type=\"button\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Access, true)\"\n          >\n            <i class=\"bwi bwi-fw bwi-users\" aria-hidden=\"true\"></i>\n            {{ \"viewAccess\" | i18n }}\n          </button>\n        </ng-container>\n        <button type=\"button\" *ngIf=\"canDeleteCollection\" bitMenuItem (click)=\"deleteCollection()\">\n          <span class=\"tw-text-danger\">\n            <i class=\"bwi bwi-fw bwi-trash\" aria-hidden=\"true\"></i>\n            {{ \"delete\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </ng-container>\n    <small *ngIf=\"loading\">\n      <i\n        class=\"bwi bwi-spinner bwi-spin text-muted\"\n        title=\"{{ 'loading' | i18n }}\"\n        aria-hidden=\"true\"\n      ></i>\n      <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n    </small>\n  </ng-container>\n\n  <bit-search\n    *ngIf=\"organization?.isProviderUser && !organization?.isMember\"\n    class=\"tw-grow\"\n    [ngModel]=\"searchText\"\n    (ngModelChange)=\"onSearchTextChanged($event)\"\n    [placeholder]=\"'searchCollection' | i18n\"\n  ></bit-search>\n\n  <div\n    *ngIf=\"filter.type !== 'trash' && filter.collectionId !== Unassigned && organization\"\n    class=\"tw-shrink-0\"\n  >\n    <!-- \"New\" menu is always shown for Extension Refresh unless the user cannot create a cipher -->\n    <ng-container *ngIf=\"extensionRefreshEnabled && canCreateCipher; else nonRefresh\">\n      <div appListDropdown>\n        <button\n          bitButton\n          buttonType=\"primary\"\n          type=\"button\"\n          [bitMenuTriggerFor]=\"addOptions\"\n          id=\"newItemDropdown\"\n          appA11yTitle=\"{{ 'new' | i18n }}\"\n        >\n          <i class=\"bwi bwi-plus-f\" aria-hidden=\"true\"></i>\n          {{ \"new\" | i18n }}<i class=\"bwi tw-ml-2\" aria-hidden=\"true\"></i>\n        </button>\n        <bit-menu #addOptions aria-labelledby=\"newItemDropdown\">\n          <button type=\"button\" bitMenuItem (click)=\"addCipher(CipherType.Login)\">\n            <i class=\"bwi bwi-globe\" slot=\"start\" aria-hidden=\"true\"></i>\n            {{ \"typeLogin\" | i18n }}\n          </button>\n          <button type=\"button\" bitMenuItem (click)=\"addCipher(CipherType.Card)\">\n            <i class=\"bwi bwi-credit-card\" slot=\"start\" aria-hidden=\"true\"></i>\n            {{ \"typeCard\" | i18n }}\n          </button>\n          <button type=\"button\" bitMenuItem (click)=\"addCipher(CipherType.Identity)\">\n            <i class=\"bwi bwi-id-card\" slot=\"start\" aria-hidden=\"true\"></i>\n            {{ \"typeIdentity\" | i18n }}\n          </button>\n          <button type=\"button\" bitMenuItem (click)=\"addCipher(CipherType.SecureNote)\">\n            <i class=\"bwi bwi-sticky-note\" slot=\"start\" aria-hidden=\"true\"></i>\n            {{ \"note\" | i18n }}\n          </button>\n          <ng-container *ngIf=\"canCreateCollection\">\n            <bit-menu-divider></bit-menu-divider>\n            <button type=\"button\" bitMenuItem (click)=\"addCollection()\">\n              <i class=\"bwi bwi-fw bwi-collection\" aria-hidden=\"true\"></i>\n              {{ \"collection\" | i18n }}\n            </button>\n          </ng-container>\n        </bit-menu>\n      </div>\n    </ng-container>\n\n    <ng-template #nonRefresh>\n      <!-- Show a menu when the user can create a cipher and collection -->\n      <div *ngIf=\"canCreateCipher && canCreateCollection\" appListDropdown>\n        <button\n          bitButton\n          buttonType=\"primary\"\n          type=\"button\"\n          [bitMenuTriggerFor]=\"addOptions\"\n          id=\"newItemDropdown\"\n          appA11yTitle=\"{{ 'new' | i18n }}\"\n        >\n          <i class=\"bwi bwi-plus-f\" aria-hidden=\"true\"></i>\n          {{ \"new\" | i18n }}<i class=\"bwi tw-ml-2\" aria-hidden=\"true\"></i>\n        </button>\n        <bit-menu #addOptions aria-labelledby=\"newItemDropdown\">\n          <button type=\"button\" bitMenuItem (click)=\"addCipher()\">\n            <i class=\"bwi bwi-fw bwi-globe\" aria-hidden=\"true\"></i>\n            {{ \"item\" | i18n }}\n          </button>\n          <button type=\"button\" bitMenuItem (click)=\"addCollection()\">\n            <i class=\"bwi bwi-fw bwi-collection\" aria-hidden=\"true\"></i>\n            {{ \"collection\" | i18n }}\n          </button>\n        </bit-menu>\n      </div>\n\n      <!-- Show a single button when the user can only create a cipher -->\n      <button\n        *ngIf=\"canCreateCipher && !canCreateCollection\"\n        type=\"button\"\n        bitButton\n        buttonType=\"primary\"\n        (click)=\"addCipher()\"\n      >\n        <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n        {{ \"newItem\" | i18n }}\n      </button>\n\n      <!-- Show a single button when the user can only create a collection -->\n      <button\n        *ngIf=\"canCreateCollection && !canCreateCipher\"\n        type=\"button\"\n        bitButton\n        buttonType=\"primary\"\n        (click)=\"addCollection()\"\n      >\n        <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n        {{ \"newCollection\" | i18n }}\n      </button>\n    </ng-template>\n  </div>\n</app-header>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { CommonModule } from \"@angular/common\";\nimport { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport {\n  CollectionAdminService,\n  CollectionAdminView,\n  Unassigned,\n} from \"@bitwarden/admin-console/common\";\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ProductTierType } from \"@bitwarden/common/billing/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\nimport {\n  BreadcrumbsModule,\n  DialogService,\n  MenuModule,\n  SearchModule,\n  SimpleDialogOptions,\n} from \"@bitwarden/components\";\n\nimport { HeaderModule } from \"../../../layouts/header/header.module\";\nimport { SharedModule } from \"../../../shared\";\nimport { CollectionDialogTabType } from \"../../components/collection-dialog\";\nimport {\n  All,\n  RoutedVaultFilterModel,\n} from \"../../individual-vault/vault-filter/shared/models/routed-vault-filter.model\";\n\n@Component({\n  standalone: true,\n  selector: \"app-org-vault-header\",\n  templateUrl: \"./vault-header.component.html\",\n  imports: [\n    CommonModule,\n    MenuModule,\n    SharedModule,\n    BreadcrumbsModule,\n    HeaderModule,\n    SearchModule,\n    JslibModule,\n  ],\n})\nexport class VaultHeaderComponent implements OnInit {\n  protected All = All;\n  protected Unassigned = Unassigned;\n\n  /**\n   * Boolean to determine the loading state of the header.\n   * Shows a loading spinner if set to true\n   */\n  @Input() loading: boolean;\n\n  /** Current active filter */\n  @Input() filter: RoutedVaultFilterModel;\n\n  /** The organization currently being viewed */\n  @Input() organization: Organization;\n\n  /** Currently selected collection */\n  @Input() collection?: TreeNode<CollectionAdminView>;\n\n  /** The current search text in the header */\n  @Input() searchText: string;\n\n  /** Emits an event when the new item button is clicked in the header */\n  @Output() onAddCipher = new EventEmitter<CipherType | undefined>();\n\n  /** Emits an event when the new collection button is clicked in the header */\n  @Output() onAddCollection = new EventEmitter<void>();\n\n  /** Emits an event when the edit collection button is clicked in the header */\n  @Output() onEditCollection = new EventEmitter<{\n    tab: CollectionDialogTabType;\n    readonly: boolean;\n  }>();\n\n  /** Emits an event when the delete collection button is clicked in the header */\n  @Output() onDeleteCollection = new EventEmitter<void>();\n\n  /** Emits an event when the search text changes in the header*/\n  @Output() searchTextChanged = new EventEmitter<string>();\n\n  protected CollectionDialogTabType = CollectionDialogTabType;\n  protected organizations$ = this.organizationService.organizations$;\n\n  /**\n   * Whether the extension refresh feature flag is enabled.\n   */\n  protected extensionRefreshEnabled = false;\n\n  /** The cipher type enum. */\n  protected CipherType = CipherType;\n\n  constructor(\n    private organizationService: OrganizationService,\n    private i18nService: I18nService,\n    private dialogService: DialogService,\n    private collectionAdminService: CollectionAdminService,\n    private router: Router,\n    private configService: ConfigService,\n  ) {}\n\n  async ngOnInit() {\n    this.extensionRefreshEnabled = await this.configService.getFeatureFlag(\n      FeatureFlag.ExtensionRefresh,\n    );\n  }\n\n  get title() {\n    const headerType = this.i18nService.t(\"collections\").toLowerCase();\n\n    if (this.collection != null) {\n      return this.collection.node.name;\n    }\n\n    if (this.filter.collectionId === Unassigned) {\n      return this.i18nService.t(\"unassigned\");\n    }\n\n    return this.organization?.name\n      ? `${this.organization?.name} ${headerType}`\n      : this.i18nService.t(\"collections\");\n  }\n\n  get icon() {\n    return this.filter.collectionId !== undefined ? \"bwi-collection\" : \"\";\n  }\n\n  protected get showBreadcrumbs() {\n    return this.filter.collectionId !== undefined && this.filter.collectionId !== All;\n  }\n\n  /**\n   * A list of collection filters that form a chain from the organization root to currently selected collection.\n   * Begins from the organization root and excludes the currently selected collection.\n   */\n  protected get collections() {\n    if (this.collection == undefined) {\n      return [];\n    }\n\n    const collections = [this.collection];\n    while (collections[collections.length - 1].parent != undefined) {\n      collections.push(collections[collections.length - 1].parent);\n    }\n\n    return collections\n      .slice(1)\n      .reverse()\n      .map((treeNode) => treeNode.node);\n  }\n\n  private showFreeOrgUpgradeDialog(): void {\n    const orgUpgradeSimpleDialogOpts: SimpleDialogOptions = {\n      title: this.i18nService.t(\"upgradeOrganization\"),\n      content: this.i18nService.t(\n        this.organization.canEditSubscription\n          ? \"freeOrgMaxCollectionReachedManageBilling\"\n          : \"freeOrgMaxCollectionReachedNoManageBilling\",\n        this.organization.maxCollections,\n      ),\n      type: \"primary\",\n    };\n\n    if (this.organization.canEditSubscription) {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"upgrade\");\n    } else {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"ok\");\n      orgUpgradeSimpleDialogOpts.cancelButtonText = null; // hide secondary btn\n    }\n\n    const simpleDialog = this.dialogService.openSimpleDialogRef(orgUpgradeSimpleDialogOpts);\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    firstValueFrom(simpleDialog.closed).then((result: boolean | undefined) => {\n      if (!result) {\n        return;\n      }\n\n      if (result && this.organization.canEditSubscription) {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.router.navigate([\"/organizations\", this.organization.id, \"billing\", \"subscription\"], {\n          queryParams: { upgrade: true },\n        });\n      }\n    });\n  }\n\n  get canEditCollection(): boolean {\n    // Only edit collections if not editing \"Unassigned\"\n    if (this.collection === undefined) {\n      return false;\n    }\n\n    // Otherwise, check if we can edit the specified collection\n    return this.collection.node.canEdit(this.organization);\n  }\n\n  addCipher(cipherType?: CipherType) {\n    this.onAddCipher.emit(cipherType);\n  }\n\n  async addCollection() {\n    if (this.organization.productTierType === ProductTierType.Free) {\n      const collections = await this.collectionAdminService.getAll(this.organization.id);\n      if (collections.length === this.organization.maxCollections) {\n        this.showFreeOrgUpgradeDialog();\n        return;\n      }\n    }\n\n    this.onAddCollection.emit();\n  }\n\n  async editCollection(tab: CollectionDialogTabType, readonly: boolean): Promise<void> {\n    this.onEditCollection.emit({ tab, readonly });\n  }\n\n  get canDeleteCollection(): boolean {\n    // Only delete collections if not deleting \"Unassigned\"\n    if (this.collection === undefined) {\n      return false;\n    }\n\n    // Otherwise, check if we can delete the specified collection\n    return this.collection.node.canDelete(this.organization);\n  }\n\n  get canViewCollectionInfo(): boolean {\n    return this.collection.node.canViewCollectionInfo(this.organization);\n  }\n\n  get canCreateCollection(): boolean {\n    return this.organization?.canCreateNewCollections;\n  }\n\n  get canCreateCipher(): boolean {\n    if (this.organization?.isProviderUser && !this.organization?.isMember) {\n      return false;\n    }\n    return true;\n  }\n\n  deleteCollection() {\n    this.onDeleteCollection.emit();\n  }\n\n  onSearchTextChanged(t: string) {\n    this.searchText = t;\n    this.searchTextChanged.emit(t);\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnDestroy } from \"@angular/core\";\nimport { FormBuilder } from \"@angular/forms\";\nimport { combineLatest, of, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport {\n  CollectionAdminService,\n  OrganizationUserApiService,\n  CollectionView,\n} from \"@bitwarden/admin-console/common\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { GroupApiService, GroupView } from \"../../../admin-console/organizations/core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  AccessSelectorModule,\n  convertToSelectionView,\n  mapGroupToAccessItemView,\n  mapUserToAccessItemView,\n  PermissionMode,\n} from \"../../../admin-console/organizations/shared/components/access-selector\";\nimport { SharedModule } from \"../../../shared\";\n\nexport interface BulkCollectionsDialogParams {\n  organizationId: string;\n  collections: CollectionView[];\n}\n\nexport enum BulkCollectionsDialogResult {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n}\n\n@Component({\n  imports: [SharedModule, AccessSelectorModule],\n  selector: \"app-bulk-collections-dialog\",\n  templateUrl: \"bulk-collections-dialog.component.html\",\n  standalone: true,\n})\nexport class BulkCollectionsDialogComponent implements OnDestroy {\n  protected readonly PermissionMode = PermissionMode;\n\n  protected formGroup = this.formBuilder.group({\n    access: [[] as AccessItemValue[]],\n  });\n  protected loading = true;\n  protected organization: Organization;\n  protected accessItems: AccessItemView[] = [];\n  protected numCollections: number;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    @Inject(DIALOG_DATA) private params: BulkCollectionsDialogParams,\n    private dialogRef: DialogRef<BulkCollectionsDialogResult>,\n    private formBuilder: FormBuilder,\n    private organizationService: OrganizationService,\n    private groupService: GroupApiService,\n    private organizationUserApiService: OrganizationUserApiService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private collectionAdminService: CollectionAdminService,\n  ) {\n    this.numCollections = this.params.collections.length;\n    const organization$ = this.organizationService.get$(this.params.organizationId);\n    const groups$ = organization$.pipe(\n      switchMap((organization) => {\n        if (!organization.useGroups) {\n          return of([] as GroupView[]);\n        }\n        return this.groupService.getAll(organization.id);\n      }),\n    );\n\n    combineLatest([\n      organization$,\n      groups$,\n      this.organizationUserApiService.getAllMiniUserDetails(this.params.organizationId),\n    ])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([organization, groups, users]) => {\n        this.organization = organization;\n\n        this.accessItems = [].concat(\n          groups.map(mapGroupToAccessItemView),\n          users.data.map(mapUserToAccessItemView),\n        );\n\n        this.loading = false;\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    const users = this.formGroup.controls.access.value\n      .filter((v) => v.type === AccessItemType.Member)\n      .map(convertToSelectionView);\n\n    const groups = this.formGroup.controls.access.value\n      .filter((v) => v.type === AccessItemType.Group)\n      .map(convertToSelectionView);\n\n    await this.collectionAdminService.bulkAssignAccess(\n      this.organization.id,\n      this.params.collections.map((c) => c.id),\n      users,\n      groups,\n    );\n\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"editedCollections\"));\n\n    this.dialogRef.close(BulkCollectionsDialogResult.Saved);\n  };\n\n  static open(dialogService: DialogService, config: DialogConfig<BulkCollectionsDialogParams>) {\n    return dialogService.open<BulkCollectionsDialogResult, BulkCollectionsDialogParams>(\n      BulkCollectionsDialogComponent,\n      config,\n    );\n  }\n}\n", "<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog [loading]=\"loading\" dialogSize=\"large\">\n    <span bitDialogTitle>\n      {{ \"assignCollectionAccess\" | i18n }}\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        {{ numCollections }} {{ (numCollections == 1 ? \"collection\" : \"collections\") | i18n }}\n      </span>\n    </span>\n\n    <div bitDialogContent>\n      <bit-access-selector\n        *ngIf=\"organization?.useGroups\"\n        [permissionMode]=\"PermissionMode.Edit\"\n        formControlName=\"access\"\n        [items]=\"accessItems\"\n        [columnHeader]=\"'groupSlashMemberColumnHeader' | i18n\"\n        [selectorLabelText]=\"'selectGroupsAndMembers' | i18n\"\n        [selectorHelpText]=\"'userPermissionOverrideHelperDesc' | i18n\"\n        [emptySelectionText]=\"'noMembersOrGroupsAdded' | i18n\"\n      ></bit-access-selector>\n      <bit-access-selector\n        *ngIf=\"!organization?.useGroups\"\n        [permissionMode]=\"PermissionMode.Edit\"\n        formControlName=\"access\"\n        [items]=\"accessItems\"\n        [columnHeader]=\"'memberColumnHeader' | i18n\"\n        [selectorLabelText]=\"'selectMembers' | i18n\"\n        [emptySelectionText]=\"'noMembersAdded' | i18n\"\n      ></bit-access-selector>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton bitFormButton buttonType=\"primary\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton bitFormButton buttonType=\"secondary\" bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n", "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\nimport { ButtonModule, NoItemsModule, svgIcon } from \"@bitwarden/components\";\n\nimport { SharedModule } from \"../../shared\";\nimport { CollectionDialogTabType } from \"../components/collection-dialog\";\n\nconst icon = svgIcon`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"10 -10 120 140\" fill=\"none\">\n  <rect class=\"tw-stroke-secondary-600\" width=\"134\" height=\"86\" x=\"3\" y=\"31.485\" stroke-width=\"6\" rx=\"11\"/>\n  <path class=\"tw-fill-secondary-600\" d=\"M123.987 20.15H14.779a3.114 3.114 0 0 1-2.083-.95 3.036 3.036 0 0 1 0-4.208 3.125 3.125 0 0 1 2.083-.951h109.208c.792.043 1.536.38 2.083.95a3.035 3.035 0 0 1 0 4.208 3.115 3.115 0 0 1-2.083.95Zm-6.649-14.041h-95.91a3.114 3.114 0 0 1-2.082-.95 3.036 3.036 0 0 1-.848-2.105c0-.782.306-1.538.848-2.104A3.125 3.125 0 0 1 21.43 0h95.909c.791.043 1.535.38 2.082.95.547.57.849 1.322.849 2.104a3.05 3.05 0 0 1-.849 2.104 3.115 3.115 0 0 1-2.082.95ZM95.132 74.407A42.317 42.317 0 0 0 83.59 65.43l8.799-8.657a1.59 1.59 0 0 0 .004-2.27 1.641 1.641 0 0 0-2.298-.004l-9.64 9.479a28.017 28.017 0 0 0-10.483-2.13c-14.323 0-24.814 12.342-25.298 12.89a2.431 2.431 0 0 0-.675 1.64c-.01.612.215 1.203.626 1.66a43.981 43.981 0 0 0 11.873 9.485l-8.806 8.658a1.601 1.601 0 0 0-.499 1.138 1.602 1.602 0 0 0 1.008 1.5 1.651 1.651 0 0 0 1.255-.009c.199-.085.379-.205.528-.359l9.634-9.443a27.16 27.16 0 0 0 10.359 2.158c14.323 0 24.753-12.086 25.23-12.63a2.983 2.983 0 0 0-.078-4.128h.002ZM49.204 77.82a1.82 1.82 0 0 1-.43-.6 1.767 1.767 0 0 1-.152-.72 1.778 1.778 0 0 1 .582-1.32c3.857-3.564 11.782-9.686 20.77-9.676 2.564.037 5.105.508 7.508 1.395l-3.291 3.235a7.793 7.793 0 0 0-5.02-1.226 7.746 7.746 0 0 0-4.676 2.18 7.528 7.528 0 0 0-1 9.563l-4.199 4.143a43.135 43.135 0 0 1-10.092-6.974Zm26.059-1.318a5.19 5.19 0 0 1-1.557 3.68 5.326 5.326 0 0 1-3.733 1.521c-.82-.005-1.63-.2-2.359-.57l7.067-6.952c.377.718.575 1.513.582 2.321Zm-10.58 0a5.136 5.136 0 0 1 .673-2.555 5.204 5.204 0 0 1 1.862-1.897 5.302 5.302 0 0 1 5.172-.146l-7.096 6.977a5.06 5.06 0 0 1-.61-2.379Zm26.053 1.331c-3.857 3.56-11.779 9.677-20.763 9.677a22.723 22.723 0 0 1-7.454-1.369l3.292-3.226a7.793 7.793 0 0 0 4.995 1.192 7.734 7.734 0 0 0 4.642-2.176 7.524 7.524 0 0 0 1.033-9.506l4.224-4.168a43.258 43.258 0 0 1 10.02 6.945 1.788 1.788 0 0 1 .585 1.313 1.788 1.788 0 0 1-.577 1.318h.003Z\"/>\n</svg>`;\n\n@Component({\n  selector: \"collection-access-restricted\",\n  standalone: true,\n  imports: [SharedModule, ButtonModule, NoItemsModule],\n  template: `<bit-no-items [icon]=\"icon\" class=\"tw-mt-2 tw-block\">\n    <span slot=\"title\" class=\"tw-mt-4 tw-block\">{{ \"youDoNotHavePermissions\" | i18n }}</span>\n    <button\n      *ngIf=\"canEditCollection\"\n      slot=\"button\"\n      bitButton\n      (click)=\"viewCollectionClicked.emit({ readonly: false, tab: collectionDialogTabType.Info })\"\n      buttonType=\"secondary\"\n      type=\"button\"\n    >\n      <i aria-hidden=\"true\" class=\"bwi bwi-pencil-square\"></i> {{ \"editCollection\" | i18n }}\n    </button>\n    <button\n      *ngIf=\"!canEditCollection && canViewCollectionInfo\"\n      slot=\"button\"\n      bitButton\n      (click)=\"viewCollectionClicked.emit({ readonly: true, tab: collectionDialogTabType.Access })\"\n      buttonType=\"secondary\"\n      type=\"button\"\n    >\n      <i aria-hidden=\"true\" class=\"bwi bwi-users\"></i> {{ \"viewAccess\" | i18n }}\n    </button>\n  </bit-no-items>`,\n})\nexport class CollectionAccessRestrictedComponent {\n  protected icon = icon;\n  protected collectionDialogTabType = CollectionDialogTabType;\n\n  @Input() canEditCollection = false;\n  @Input() canViewCollectionInfo = false;\n\n  @Output() viewCollectionClicked = new EventEmitter<{\n    readonly: boolean;\n    tab: CollectionDialogTabType;\n  }>();\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { inject, Injectable } from \"@angular/core\";\nimport { combineLatest, filter, firstValueFrom, map, switchMap } from \"rxjs\";\n\nimport { CollectionAdminService } from \"@bitwarden/admin-console/common\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { OrganizationUserStatusType, PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { CipherId } from \"@bitwarden/common/types/guid\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherData } from \"@bitwarden/common/vault/models/data/cipher.data\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\n\nimport {\n  CipherFormConfig,\n  CipherFormConfigService,\n  CipherFormMode,\n} from \"../../../../../../../libs/vault/src/cipher-form/abstractions/cipher-form-config.service\";\nimport { RoutedVaultFilterService } from \"../../individual-vault/vault-filter/services/routed-vault-filter.service\";\n\n/** Admin Console implementation of the `CipherFormConfigService`. */\n@Injectable()\nexport class AdminConsoleCipherFormConfigService implements CipherFormConfigService {\n  private policyService: PolicyService = inject(PolicyService);\n  private organizationService: OrganizationService = inject(OrganizationService);\n  private routedVaultFilterService: RoutedVaultFilterService = inject(RoutedVaultFilterService);\n  private collectionAdminService: CollectionAdminService = inject(CollectionAdminService);\n  private cipherService: CipherService = inject(CipherService);\n  private apiService: ApiService = inject(ApiService);\n\n  private allowPersonalOwnership$ = this.policyService\n    .policyAppliesToActiveUser$(PolicyType.PersonalOwnership)\n    .pipe(map((p) => !p));\n\n  private organizationId$ = this.routedVaultFilterService.filter$.pipe(\n    map((filter) => filter.organizationId),\n    filter((filter) => filter !== undefined),\n  );\n\n  private allOrganizations$ = this.organizationService.organizations$.pipe(\n    map((orgs) => {\n      return orgs.filter(\n        (o) => o.isMember && o.enabled && o.status === OrganizationUserStatusType.Confirmed,\n      );\n    }),\n  );\n\n  private organization$ = combineLatest([this.allOrganizations$, this.organizationId$]).pipe(\n    map(([orgs, orgId]) => orgs.find((o) => o.id === orgId)),\n  );\n\n  private allCollections$ = this.organization$.pipe(\n    switchMap(async (org) => await this.collectionAdminService.getAll(org.id)),\n  );\n\n  async buildConfig(\n    mode: CipherFormMode,\n    cipherId?: CipherId,\n    cipherType?: CipherType,\n  ): Promise<CipherFormConfig> {\n    const [organization, allowPersonalOwnership, allOrganizations, allCollections] =\n      await firstValueFrom(\n        combineLatest([\n          this.organization$,\n          this.allowPersonalOwnership$,\n          this.allOrganizations$,\n          this.allCollections$,\n        ]),\n      );\n\n    // When cloning from within the Admin Console, all organizations should be available.\n    // Otherwise only the one in context should be\n    const organizations = mode === \"clone\" ? allOrganizations : [organization];\n    // Only allow the user to assign to their personal vault when cloning and\n    // the policies are enabled for it.\n    const allowPersonalOwnershipOnlyForClone = mode === \"clone\" ? allowPersonalOwnership : false;\n    const cipher = await this.getCipher(cipherId, organization);\n    return {\n      mode,\n      cipherType: cipher?.type ?? cipherType ?? CipherType.Login,\n      admin: organization.canEditAllCiphers ?? false,\n      allowPersonalOwnership: allowPersonalOwnershipOnlyForClone,\n      originalCipher: cipher,\n      collections: allCollections,\n      organizations,\n      folders: [], // folders not applicable in the admin console\n      hideIndividualVaultFields: true,\n      isAdminConsole: true,\n    };\n  }\n\n  private async getCipher(id: CipherId | null, organization: Organization): Promise<Cipher | null> {\n    if (id == null) {\n      return null;\n    }\n\n    const localCipher = await this.cipherService.get(id);\n\n    // Fetch from the API because we don't need the permissions in local state OR the cipher was not found (e.g. unassigned)\n    if (organization.canEditAllCiphers || localCipher == null) {\n      return await this.getCipherFromAdminApi(id);\n    }\n\n    return localCipher;\n  }\n\n  private async getCipherFromAdminApi(id: CipherId): Promise<Cipher> {\n    const cipherResponse = await this.apiService.getCipherAdmin(id);\n    // Ensure admin response includes permissions that allow editing\n    cipherResponse.edit = true;\n    cipherResponse.viewPassword = true;\n\n    const cipherData = new CipherData(cipherResponse);\n    return new Cipher(cipherData);\n  }\n}\n", "import { Injectable, OnDestroy } from \"@angular/core\";\nimport { map, Observable, ReplaySubject, Subject } from \"rxjs\";\n\nimport { CollectionAdminView, CollectionService } from \"@bitwarden/admin-console/common\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\n\nimport { VaultFilterService as BaseVaultFilterService } from \"../../individual-vault/vault-filter/services/vault-filter.service\";\nimport { CollectionFilter } from \"../../individual-vault/vault-filter/shared/models/vault-filter.type\";\n\n@Injectable()\nexport class VaultFilterService extends BaseVaultFilterService implements OnDestroy {\n  private destroy$ = new Subject<void>();\n  private _collections = new ReplaySubject<CollectionAdminView[]>(1);\n\n  filteredCollections$: Observable<CollectionAdminView[]> = this._collections.asObservable();\n\n  collectionTree$: Observable<TreeNode<CollectionFilter>> = this.filteredCollections$.pipe(\n    map((collections) => this.buildCollectionTree(collections)),\n  );\n\n  constructor(\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    policyService: PolicyService,\n    i18nService: I18nService,\n    stateProvider: StateProvider,\n    collectionService: CollectionService,\n    accountService: AccountService,\n  ) {\n    super(\n      organizationService,\n      folderService,\n      cipherService,\n      policyService,\n      i18nService,\n      stateProvider,\n      collectionService,\n      accountService,\n    );\n  }\n\n  async reloadCollections(collections: CollectionAdminView[]) {\n    this._collections.next(collections);\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n", "import { NgModule } from \"@angular/core\";\n\nimport { SearchModule } from \"@bitwarden/components\";\n\nimport { VaultFilterService as VaultFilterServiceAbstraction } from \"../../individual-vault/vault-filter/services/abstractions/vault-filter.service\";\nimport { VaultFilterSharedModule } from \"../../individual-vault/vault-filter/shared/vault-filter-shared.module\";\n\nimport { VaultFilterComponent } from \"./vault-filter.component\";\nimport { VaultFilterService } from \"./vault-filter.service\";\n\n@NgModule({\n  imports: [VaultFilterSharedModule, SearchModule],\n  declarations: [VaultFilterComponent],\n  exports: [VaultFilterComponent],\n  providers: [\n    {\n      provide: VaultFilterServiceAbstraction,\n      useClass: VaultFilterService,\n    },\n  ],\n})\nexport class VaultFilterModule {}\n", "<div class=\"card vault-filters\">\n  <div class=\"container loading-spinner\" *ngIf=\"!isLoaded\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\" aria-hidden=\"true\"></i>\n  </div>\n  <div *ngIf=\"isLoaded\">\n    <div class=\"card-header d-flex\">\n      {{ \"filters\" | i18n }}\n      <a\n        class=\"ml-auto\"\n        href=\"https://bitwarden.com/help/searching-vault/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        appA11yTitle=\"{{ 'learnMoreAboutSearchingYourVault' | i18n }}\"\n      >\n        <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n      </a>\n    </div>\n    <div class=\"card-body\">\n      <div class=\"tw-mb-4\">\n        <bit-search\n          id=\"search\"\n          placeholder=\"{{ searchPlaceholder | i18n }}\"\n          [(ngModel)]=\"searchText\"\n          (ngModelChange)=\"onSearchTextChanged($event)\"\n          autocomplete=\"off\"\n          appAutofocus\n        />\n      </div>\n      <ng-container *ngFor=\"let f of filtersList\">\n        <div class=\"filter\">\n          <app-filter-section [activeFilter]=\"activeFilter\" [section]=\"f\"> </app-filter-section>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from \"@angular/core\";\nimport { firstValueFrom, Subject } from \"rxjs\";\n\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { BillingApiServiceAbstraction } from \"@bitwarden/common/billing/abstractions/billing-api.service.abstraction\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { VaultFilterComponent as BaseVaultFilterComponent } from \"../../individual-vault/vault-filter/components/vault-filter.component\"; //../../vault/vault-filter/components/vault-filter.component\";\nimport { VaultFilterService } from \"../../individual-vault/vault-filter/services/abstractions/vault-filter.service\";\nimport {\n  VaultFilterList,\n  VaultFilterSection,\n  VaultFilterType,\n} from \"../../individual-vault/vault-filter/shared/models/vault-filter-section.type\";\nimport { CollectionFilter } from \"../../individual-vault/vault-filter/shared/models/vault-filter.type\";\n\n@Component({\n  selector: \"app-organization-vault-filter\",\n  templateUrl: \"../../individual-vault/vault-filter/components/vault-filter.component.html\",\n})\nexport class VaultFilterComponent\n  extends BaseVaultFilterComponent\n  implements OnInit, OnDestroy, OnChanges\n{\n  @Input() set organization(value: Organization) {\n    if (value && value !== this._organization) {\n      this._organization = value;\n      this.vaultFilterService.setOrganizationFilter(this._organization);\n    }\n  }\n  _organization: Organization;\n  protected destroy$: Subject<void>;\n\n  constructor(\n    protected vaultFilterService: VaultFilterService,\n    protected policyService: PolicyService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected billingApiService: BillingApiServiceAbstraction,\n    protected dialogService: DialogService,\n    protected configService: ConfigService,\n  ) {\n    super(\n      vaultFilterService,\n      policyService,\n      i18nService,\n      platformUtilsService,\n      billingApiService,\n      dialogService,\n      configService,\n    );\n  }\n\n  async ngOnInit() {\n    this.filters = await this.buildAllFilters();\n    if (!this.activeFilter.selectedCipherTypeNode) {\n      this.activeFilter.resetFilter();\n      this.activeFilter.selectedCollectionNode =\n        (await this.getDefaultFilter()) as TreeNode<CollectionFilter>;\n    }\n    this.isLoaded = true;\n  }\n\n  async ngOnChanges(changes: SimpleChanges) {\n    if (changes.organization) {\n      this.filters = await this.buildAllFilters();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async removeCollapsibleCollection() {\n    const collapsedNodes = await firstValueFrom(this.vaultFilterService.collapsedFilterNodes$);\n\n    collapsedNodes.delete(\"AllCollections\");\n\n    await this.vaultFilterService.setCollapsedFilterNodes(collapsedNodes);\n  }\n\n  protected async addCollectionFilter(): Promise<VaultFilterSection> {\n    // Ensure the Collections filter is never collapsed for the org vault\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.removeCollapsibleCollection();\n\n    const collectionFilterSection: VaultFilterSection = {\n      data$: this.vaultFilterService.buildTypeTree(\n        {\n          id: \"AllCollections\",\n          name: \"collections\",\n          type: \"all\",\n          icon: \"bwi-collection\",\n        },\n        [\n          {\n            id: \"AllCollections\",\n            name: \"Collections\",\n            type: \"all\",\n            icon: \"bwi-collection\",\n          },\n        ],\n      ),\n      header: {\n        showHeader: false,\n        isSelectable: true,\n      },\n      action: this.applyCollectionFilter,\n    };\n    return collectionFilterSection;\n  }\n\n  async buildAllFilters(): Promise<VaultFilterList> {\n    const builderFilter = {} as VaultFilterList;\n    builderFilter.typeFilter = await this.addTypeFilter([\"favorites\"]);\n    builderFilter.collectionFilter = await this.addCollectionFilter();\n    builderFilter.trashFilter = await this.addTrashFilter();\n    return builderFilter;\n  }\n\n  async getDefaultFilter(): Promise<TreeNode<VaultFilterType>> {\n    return await firstValueFrom(this.filters?.collectionFilter.data$);\n  }\n}\n", "<ng-container *ngIf=\"freeTrial$ | async as freeTrial\">\n  <bit-banner\n    id=\"free-trial-banner\"\n    class=\"-tw-m-6 tw-flex tw-flex-col tw-pb-6\"\n    icon=\"bwi-billing\"\n    bannerType=\"premium\"\n    [showClose]=\"false\"\n    *ngIf=\"!refreshing && freeTrial.shownBanner\"\n  >\n    {{ freeTrial.message }}\n    <a\n      bitLink\n      linkType=\"secondary\"\n      (click)=\"navigateToPaymentMethod()\"\n      class=\"tw-cursor-pointer\"\n      rel=\"noreferrer noopener\"\n    >\n      {{ \"clickHereToAddPaymentMethod\" | i18n }}\n    </a>\n  </bit-banner>\n</ng-container>\n<ng-container *ngIf=\"resellerWarning$ | async as resellerWarning\">\n  <bit-banner\n    id=\"reseller-warning-banner\"\n    class=\"-tw-m-6 tw-flex tw-flex-col tw-pb-6\"\n    icon=\"bwi-billing\"\n    bannerType=\"info\"\n    [showClose]=\"false\"\n    *ngIf=\"!refreshing\"\n  >\n    {{ resellerWarning?.message }}\n  </bit-banner>\n</ng-container>\n\n<app-org-vault-header\n  [filter]=\"filter\"\n  [loading]=\"refreshing\"\n  [organization]=\"organization\"\n  [collection]=\"selectedCollection\"\n  [searchText]=\"currentSearchText$ | async\"\n  (onAddCipher)=\"addCipher($event)\"\n  (onAddCollection)=\"addCollection()\"\n  (onEditCollection)=\"editCollection(selectedCollection.node, $event.tab, $event.readonly)\"\n  (onDeleteCollection)=\"deleteCollection(selectedCollection.node)\"\n  (searchTextChanged)=\"filterSearchText($event)\"\n></app-org-vault-header>\n\n<div class=\"row\">\n  <div class=\"col-3\" *ngIf=\"!hideVaultFilters\">\n    <div class=\"groupings\">\n      <div class=\"content\">\n        <div class=\"inner-content\">\n          <app-organization-vault-filter\n            [organization]=\"organization\"\n            [activeFilter]=\"activeFilter\"\n            [searchText]=\"currentSearchText$ | async\"\n            (searchTextChanged)=\"filterSearchText($event)\"\n          ></app-organization-vault-filter>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div [class]=\"hideVaultFilters ? 'col-12' : 'col-9'\">\n    <bit-toggle-group\n      *ngIf=\"showAddAccessToggle && activeFilter.selectedCollectionNode\"\n      [selected]=\"addAccessStatus$ | async\"\n      (selectedChange)=\"addAccessToggle($event)\"\n      [attr.aria-label]=\"'addAccessFilter' | i18n\"\n    >\n      <bit-toggle [value]=\"0\">\n        {{ \"all\" | i18n }}\n      </bit-toggle>\n\n      <bit-toggle [value]=\"1\">\n        {{ \"addAccess\" | i18n }}\n      </bit-toggle>\n    </bit-toggle-group>\n    <bit-callout type=\"warning\" *ngIf=\"activeFilter.isDeleted\">\n      {{ trashCleanupWarning }}\n    </bit-callout>\n    <app-vault-items\n      [ciphers]=\"ciphers\"\n      [collections]=\"collections\"\n      [allCollections]=\"allCollections\"\n      [allOrganizations]=\"organization ? [organization] : []\"\n      [allGroups]=\"allGroups\"\n      [disabled]=\"loading\"\n      [showOwner]=\"false\"\n      [showPermissionsColumn]=\"true\"\n      [showCollections]=\"filter.type !== undefined\"\n      [showGroups]=\"\n        organization?.useGroups &&\n        ((filter.type === undefined && filter.collectionId === undefined) ||\n          filter.collectionId !== undefined)\n      \"\n      [showPremiumFeatures]=\"organization?.useTotp\"\n      [showBulkMove]=\"false\"\n      [showBulkTrashOptions]=\"filter.type === 'trash'\"\n      [useEvents]=\"organization?.canAccessEventLogs\"\n      [showAdminActions]=\"true\"\n      (onEvent)=\"onVaultItemsEvent($event)\"\n      [showBulkEditCollectionAccess]=\"true\"\n      [showBulkAddToCollections]=\"true\"\n      [viewingOrgVault]=\"true\"\n      [addAccessStatus]=\"addAccessStatus$ | async\"\n      [addAccessToggle]=\"showAddAccessToggle\"\n      [activeCollection]=\"selectedCollection?.node\"\n    >\n    </app-vault-items>\n    <ng-container *ngIf=\"!performingInitialLoad && isEmpty\">\n      <bit-no-items *ngIf=\"!showCollectionAccessRestricted\">\n        <span slot=\"title\" class=\"tw-mt-4 tw-block\">{{ \"noItemsInList\" | i18n }}</span>\n        <button\n          slot=\"button\"\n          bitButton\n          (click)=\"addCipher()\"\n          buttonType=\"primary\"\n          type=\"button\"\n          *ngIf=\"\n            filter.type !== 'trash' &&\n            filter.collectionId !== Unassigned &&\n            selectedCollection?.node?.canEditItems(organization)\n          \"\n        >\n          <i aria-hidden=\"true\" class=\"bwi bwi-plus\"></i> {{ \"newItem\" | i18n }}\n        </button>\n      </bit-no-items>\n      <collection-access-restricted\n        *ngIf=\"showCollectionAccessRestricted\"\n        [canEditCollection]=\"selectedCollection?.node?.canEdit(organization)\"\n        [canViewCollectionInfo]=\"selectedCollection?.node?.canViewCollectionInfo(organization)\"\n        (viewCollectionClicked)=\"\n          editCollection(selectedCollection.node, $event.tab, $event.readonly)\n        \"\n      >\n      </collection-access-restricted>\n    </ng-container>\n    <div\n      class=\"tw-mt-6 tw-flex tw-h-full tw-flex-col tw-items-center tw-justify-start\"\n      *ngIf=\"performingInitialLoad\"\n    >\n      <i\n        class=\"bwi bwi-spinner bwi-spin text-muted\"\n        title=\"{{ 'loading' | i18n }}\"\n        aria-hidden=\"true\"\n      ></i>\n      <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n    </div>\n  </div>\n</div>\n<ng-template #attachments></ng-template>\n<ng-template #cipherAddEdit></ng-template>\n<ng-template #collectionsModal></ng-template>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DialogRef } from \"@angular/cdk/dialog\";\nimport {\n  ChangeDetectorRef,\n  Component,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from \"@angular/core\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\nimport {\n  BehaviorSubject,\n  combineLatest,\n  firstValueFrom,\n  from,\n  lastValueFrom,\n  Observable,\n  of,\n  Subject,\n} from \"rxjs\";\nimport {\n  concatMap,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  shareReplay,\n  switchMap,\n  takeUntil,\n  tap,\n} from \"rxjs/operators\";\n\nimport {\n  CollectionAdminService,\n  CollectionAdminView,\n  CollectionService,\n  CollectionView,\n  Unassigned,\n} from \"@bitwarden/admin-console/common\";\nimport { SearchPipe } from \"@bitwarden/angular/pipes/search.pipe\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { SearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { OrganizationApiServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/organization/organization-api.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { OrganizationBillingServiceAbstraction } from \"@bitwarden/common/billing/abstractions\";\nimport { BillingApiServiceAbstraction } from \"@bitwarden/common/billing/abstractions/billing-api.service.abstraction\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { BroadcasterService } from \"@bitwarden/common/platform/abstractions/broadcaster.service\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { SyncService } from \"@bitwarden/common/platform/sync\";\nimport { CipherId, CollectionId, OrganizationId } from \"@bitwarden/common/types/guid\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { TotpService } from \"@bitwarden/common/vault/abstractions/totp.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { ServiceUtils } from \"@bitwarden/common/vault/service-utils\";\nimport {\n  BannerModule,\n  DialogService,\n  Icons,\n  NoItemsModule,\n  ToastService,\n} from \"@bitwarden/components\";\nimport {\n  CipherFormConfig,\n  CipherFormConfigService,\n  CollectionAssignmentResult,\n  DecryptionFailureDialogComponent,\n  PasswordRepromptService,\n} from \"@bitwarden/vault\";\n\nimport { GroupApiService, GroupView } from \"../../admin-console/organizations/core\";\nimport { openEntityEventsDialog } from \"../../admin-console/organizations/manage/entity-events.component\";\nimport {\n  ResellerWarning,\n  ResellerWarningService,\n} from \"../../billing/services/reseller-warning.service\";\nimport { TrialFlowService } from \"../../billing/services/trial-flow.service\";\nimport { FreeTrial } from \"../../core/types/free-trial\";\nimport { SharedModule } from \"../../shared\";\nimport { VaultFilterService } from \"../../vault/individual-vault/vault-filter/services/abstractions/vault-filter.service\";\nimport { VaultFilter } from \"../../vault/individual-vault/vault-filter/shared/models/vault-filter.model\";\nimport { AssignCollectionsWebComponent } from \"../components/assign-collections\";\nimport {\n  CollectionDialogAction,\n  CollectionDialogTabType,\n  openCollectionDialog,\n} from \"../components/collection-dialog\";\nimport {\n  VaultItemDialogComponent,\n  VaultItemDialogMode,\n  VaultItemDialogResult,\n} from \"../components/vault-item-dialog/vault-item-dialog.component\";\nimport { VaultItemEvent } from \"../components/vault-items/vault-item-event\";\nimport { VaultItemsModule } from \"../components/vault-items/vault-items.module\";\nimport {\n  AttachmentDialogResult,\n  AttachmentsV2Component,\n} from \"../individual-vault/attachments-v2.component\";\nimport {\n  BulkDeleteDialogResult,\n  openBulkDeleteDialog,\n} from \"../individual-vault/bulk-action-dialogs/bulk-delete-dialog/bulk-delete-dialog.component\";\nimport { RoutedVaultFilterBridgeService } from \"../individual-vault/vault-filter/services/routed-vault-filter-bridge.service\";\nimport { RoutedVaultFilterService } from \"../individual-vault/vault-filter/services/routed-vault-filter.service\";\nimport { createFilterFunction } from \"../individual-vault/vault-filter/shared/models/filter-function\";\nimport {\n  All,\n  RoutedVaultFilterModel,\n} from \"../individual-vault/vault-filter/shared/models/routed-vault-filter.model\";\nimport { VaultHeaderComponent } from \"../org-vault/vault-header/vault-header.component\";\nimport { getNestedCollectionTree } from \"../utils/collection-utils\";\n\nimport { AddEditComponent } from \"./add-edit.component\";\nimport {\n  BulkCollectionsDialogComponent,\n  BulkCollectionsDialogResult,\n} from \"./bulk-collections-dialog\";\nimport { CollectionAccessRestrictedComponent } from \"./collection-access-restricted.component\";\nimport { AdminConsoleCipherFormConfigService } from \"./services/admin-console-cipher-form-config.service\";\nimport { VaultFilterModule } from \"./vault-filter/vault-filter.module\";\n\nconst BroadcasterSubscriptionId = \"OrgVaultComponent\";\nconst SearchTextDebounceInterval = 200;\n\nenum AddAccessStatusType {\n  All = 0,\n  AddAccess = 1,\n}\n\n@Component({\n  standalone: true,\n  selector: \"app-org-vault\",\n  templateUrl: \"vault.component.html\",\n  imports: [\n    VaultHeaderComponent,\n    CollectionAccessRestrictedComponent,\n    VaultFilterModule,\n    VaultItemsModule,\n    SharedModule,\n    BannerModule,\n    NoItemsModule,\n  ],\n  providers: [\n    RoutedVaultFilterService,\n    RoutedVaultFilterBridgeService,\n    { provide: CipherFormConfigService, useClass: AdminConsoleCipherFormConfigService },\n  ],\n})\nexport class VaultComponent implements OnInit, OnDestroy {\n  protected Unassigned = Unassigned;\n\n  @ViewChild(\"attachments\", { read: ViewContainerRef, static: true })\n  attachmentsModalRef: ViewContainerRef;\n  @ViewChild(\"cipherAddEdit\", { read: ViewContainerRef, static: true })\n  cipherAddEditModalRef: ViewContainerRef;\n  @ViewChild(\"collectionsModal\", { read: ViewContainerRef, static: true })\n  collectionsModalRef: ViewContainerRef;\n\n  trashCleanupWarning: string = null;\n  activeFilter: VaultFilter = new VaultFilter();\n\n  protected showAddAccessToggle = false;\n  protected noItemIcon = Icons.Search;\n  protected performingInitialLoad = true;\n  protected refreshing = false;\n  protected processingEvent = false;\n  protected filter: RoutedVaultFilterModel = {};\n  protected organization: Organization;\n  protected allCollections: CollectionAdminView[];\n  protected allGroups: GroupView[];\n  protected ciphers: CipherView[];\n  protected collections: CollectionAdminView[];\n  protected selectedCollection: TreeNode<CollectionAdminView> | undefined;\n  protected isEmpty: boolean;\n  protected showCollectionAccessRestricted: boolean;\n  private hasSubscription$ = new BehaviorSubject<boolean>(false);\n  protected currentSearchText$: Observable<string>;\n  protected freeTrial$: Observable<FreeTrial>;\n  protected resellerWarning$: Observable<ResellerWarning | null>;\n  protected prevCipherId: string | null = null;\n  /**\n   * A list of collections that the user can assign items to and edit those items within.\n   * @protected\n   */\n  protected editableCollections$: Observable<CollectionAdminView[]>;\n  protected allCollectionsWithoutUnassigned$: Observable<CollectionAdminView[]>;\n\n  protected get hideVaultFilters(): boolean {\n    return this.organization?.isProviderUser && !this.organization?.isMember;\n  }\n\n  private searchText$ = new Subject<string>();\n  private refresh$ = new BehaviorSubject<void>(null);\n  private destroy$ = new Subject<void>();\n  protected addAccessStatus$ = new BehaviorSubject<AddAccessStatusType>(0);\n  private extensionRefreshEnabled: boolean;\n  private resellerManagedOrgAlert: boolean;\n  private vaultItemDialogRef?: DialogRef<VaultItemDialogResult> | undefined;\n\n  private readonly unpaidSubscriptionDialog$ = this.organizationService.organizations$.pipe(\n    filter((organizations) => organizations.length === 1),\n    map(([organization]) => organization),\n    switchMap((organization) =>\n      from(this.billingApiService.getOrganizationBillingMetadata(organization.id)).pipe(\n        tap((organizationMetaData) => {\n          this.hasSubscription$.next(organizationMetaData.hasSubscription);\n        }),\n        switchMap((organizationMetaData) =>\n          from(\n            this.trialFlowService.handleUnpaidSubscriptionDialog(\n              organization,\n              organizationMetaData,\n            ),\n          ),\n        ),\n      ),\n    ),\n  );\n\n  constructor(\n    private route: ActivatedRoute,\n    private organizationService: OrganizationService,\n    protected vaultFilterService: VaultFilterService,\n    private routedVaultFilterBridgeService: RoutedVaultFilterBridgeService,\n    private routedVaultFilterService: RoutedVaultFilterService,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private syncService: SyncService,\n    private i18nService: I18nService,\n    private modalService: ModalService,\n    private dialogService: DialogService,\n    private messagingService: MessagingService,\n    private broadcasterService: BroadcasterService,\n    private ngZone: NgZone,\n    private platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private passwordRepromptService: PasswordRepromptService,\n    private collectionAdminService: CollectionAdminService,\n    private searchService: SearchService,\n    private searchPipe: SearchPipe,\n    private groupService: GroupApiService,\n    private logService: LogService,\n    private eventCollectionService: EventCollectionService,\n    private totpService: TotpService,\n    private apiService: ApiService,\n    private collectionService: CollectionService,\n    private toastService: ToastService,\n    private configService: ConfigService,\n    private cipherFormConfigService: CipherFormConfigService,\n    private organizationApiService: OrganizationApiServiceAbstraction,\n    private trialFlowService: TrialFlowService,\n    protected billingApiService: BillingApiServiceAbstraction,\n    private organizationBillingService: OrganizationBillingServiceAbstraction,\n    private resellerWarningService: ResellerWarningService,\n  ) {}\n\n  async ngOnInit() {\n    this.extensionRefreshEnabled = await this.configService.getFeatureFlag(\n      FeatureFlag.ExtensionRefresh,\n    );\n\n    this.resellerManagedOrgAlert = await this.configService.getFeatureFlag(\n      FeatureFlag.ResellerManagedOrgAlert,\n    );\n\n    this.trashCleanupWarning = this.i18nService.t(\n      this.platformUtilsService.isSelfHost()\n        ? \"trashCleanupWarningSelfHosted\"\n        : \"trashCleanupWarning\",\n    );\n\n    const filter$ = this.routedVaultFilterService.filter$;\n    const organizationId$ = filter$.pipe(\n      map((filter) => filter.organizationId),\n      filter((filter) => filter !== undefined),\n      distinctUntilChanged(),\n    );\n\n    const organization$ = organizationId$.pipe(\n      switchMap((organizationId) => this.organizationService.get$(organizationId)),\n      takeUntil(this.destroy$),\n      shareReplay({ refCount: false, bufferSize: 1 }),\n    );\n\n    const firstSetup$ = combineLatest([organization$, this.route.queryParams]).pipe(\n      first(),\n      switchMap(async ([organization]) => {\n        this.organization = organization;\n\n        if (!organization.canEditAnyCollection) {\n          await this.syncService.fullSync(false);\n        }\n\n        return undefined;\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    this.broadcasterService.subscribe(BroadcasterSubscriptionId, (message: any) => {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.ngZone.run(async () => {\n        switch (message.command) {\n          case \"syncCompleted\":\n            if (message.successfully) {\n              this.refresh();\n              this.changeDetectorRef.detectChanges();\n            }\n            break;\n        }\n      });\n    });\n\n    this.routedVaultFilterBridgeService.activeFilter$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((activeFilter) => {\n        this.activeFilter = activeFilter;\n\n        // watch the active filters. Only show toggle when viewing the collections filter\n        if (!this.activeFilter.collectionId) {\n          this.showAddAccessToggle = false;\n        }\n      });\n\n    this.searchText$\n      .pipe(debounceTime(SearchTextDebounceInterval), takeUntil(this.destroy$))\n      .subscribe((searchText) =>\n        this.router.navigate([], {\n          queryParams: { search: Utils.isNullOrEmpty(searchText) ? null : searchText },\n          queryParamsHandling: \"merge\",\n          replaceUrl: true,\n        }),\n      );\n\n    this.currentSearchText$ = this.route.queryParams.pipe(map((queryParams) => queryParams.search));\n\n    this.allCollectionsWithoutUnassigned$ = this.refresh$.pipe(\n      switchMap(() => organizationId$),\n      switchMap((orgId) => this.collectionAdminService.getAll(orgId)),\n      shareReplay({ refCount: false, bufferSize: 1 }),\n    );\n\n    this.editableCollections$ = this.allCollectionsWithoutUnassigned$.pipe(\n      map((collections) => {\n        // Users that can edit all ciphers can implicitly add to / edit within any collection\n        if (this.organization.canEditAllCiphers) {\n          return collections;\n        }\n        // The user is only allowed to add/edit items to assigned collections that are not readonly\n        return collections.filter((c) => c.assigned && !c.readOnly);\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const allCollections$ = combineLatest([\n      organizationId$,\n      this.allCollectionsWithoutUnassigned$,\n    ]).pipe(\n      map(([organizationId, allCollections]) => {\n        const noneCollection = new CollectionAdminView();\n        noneCollection.name = this.i18nService.t(\"unassigned\");\n        noneCollection.id = Unassigned;\n        noneCollection.organizationId = organizationId;\n        return allCollections.concat(noneCollection);\n      }),\n    );\n\n    const allGroups$ = organizationId$.pipe(\n      switchMap((organizationId) => this.groupService.getAll(organizationId)),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const allCiphers$ = combineLatest([organization$, this.refresh$]).pipe(\n      switchMap(async ([organization]) => {\n        // If user swaps organization reset the addAccessToggle\n        if (!this.showAddAccessToggle || organization) {\n          this.addAccessToggle(0);\n        }\n        let ciphers;\n\n        // Restricted providers (who are not members) do not have access org cipher endpoint below\n        // Return early to avoid 404 response\n        if (!organization.isMember && organization.isProviderUser) {\n          return [];\n        }\n\n        // If the user can edit all ciphers for the organization then fetch them ALL.\n        if (organization.canEditAllCiphers) {\n          ciphers = await this.cipherService.getAllFromApiForOrganization(organization.id);\n          ciphers?.forEach((c) => (c.edit = true));\n        } else {\n          // Otherwise, only fetch ciphers they have access to (includes unassigned for admins).\n          ciphers = await this.cipherService.getManyFromApiForOrganization(organization.id);\n        }\n\n        await this.searchService.indexCiphers(ciphers, organization.id);\n        return ciphers;\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const allCipherMap$ = allCiphers$.pipe(\n      map((ciphers) => {\n        return Object.fromEntries(ciphers.map((c) => [c.id, c]));\n      }),\n    );\n\n    const nestedCollections$ = allCollections$.pipe(\n      map((collections) => getNestedCollectionTree(collections)),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const collections$ = combineLatest([\n      nestedCollections$,\n      filter$,\n      this.currentSearchText$,\n      this.addAccessStatus$,\n    ]).pipe(\n      filter(([collections, filter]) => collections != undefined && filter != undefined),\n      concatMap(async ([collections, filter, searchText, addAccessStatus]) => {\n        if (\n          filter.collectionId === Unassigned ||\n          (filter.collectionId === undefined && filter.type !== undefined)\n        ) {\n          return [];\n        }\n\n        this.showAddAccessToggle = false;\n        let collectionsToReturn = [];\n        if (filter.collectionId === undefined || filter.collectionId === All) {\n          collectionsToReturn = collections.map((c) => c.node);\n        } else {\n          const selectedCollection = ServiceUtils.getTreeNodeObjectFromList(\n            collections,\n            filter.collectionId,\n          );\n          collectionsToReturn = selectedCollection?.children.map((c) => c.node) ?? [];\n        }\n\n        if (await this.searchService.isSearchable(searchText)) {\n          collectionsToReturn = this.searchPipe.transform(\n            collectionsToReturn,\n            searchText,\n            (collection: CollectionAdminView) => collection.name,\n            (collection: CollectionAdminView) => collection.id,\n          );\n        }\n\n        // Add access toggle is only shown if allowAdminAccessToAllCollectionItems is false and there are unmanaged collections the user can edit\n        this.showAddAccessToggle =\n          !this.organization.allowAdminAccessToAllCollectionItems &&\n          this.organization.canEditUnmanagedCollections &&\n          collectionsToReturn.some((c) => c.unmanaged);\n\n        if (addAccessStatus === 1 && this.showAddAccessToggle) {\n          collectionsToReturn = collectionsToReturn.filter((c) => c.unmanaged);\n        }\n        return collectionsToReturn;\n      }),\n      takeUntil(this.destroy$),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const selectedCollection$ = combineLatest([nestedCollections$, filter$]).pipe(\n      filter(([collections, filter]) => collections != undefined && filter != undefined),\n      map(([collections, filter]) => {\n        if (\n          filter.collectionId === undefined ||\n          filter.collectionId === All ||\n          filter.collectionId === Unassigned\n        ) {\n          return undefined;\n        }\n\n        return ServiceUtils.getTreeNodeObjectFromList(collections, filter.collectionId);\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const showCollectionAccessRestricted$ = combineLatest([\n      filter$,\n      selectedCollection$,\n      organization$,\n    ]).pipe(\n      map(([filter, collection, organization]) => {\n        return (\n          (filter.collectionId === Unassigned && !organization.canEditUnassignedCiphers) ||\n          (!organization.canEditAllCiphers && collection != undefined && !collection.node.assigned)\n        );\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const ciphers$ = combineLatest([\n      allCiphers$,\n      filter$,\n      this.currentSearchText$,\n      showCollectionAccessRestricted$,\n    ]).pipe(\n      filter(([ciphers, filter]) => ciphers != undefined && filter != undefined),\n      concatMap(async ([ciphers, filter, searchText, showCollectionAccessRestricted]) => {\n        if (filter.collectionId === undefined && filter.type === undefined) {\n          return [];\n        }\n\n        if (showCollectionAccessRestricted) {\n          // Do not show ciphers for restricted collections\n          // Ciphers belonging to multiple collections may still be present in $allCiphers and shouldn't be visible\n          return [];\n        }\n\n        const filterFunction = createFilterFunction(filter);\n\n        if (await this.searchService.isSearchable(searchText)) {\n          return await this.searchService.searchCiphers(searchText, [filterFunction], ciphers);\n        }\n\n        return ciphers.filter(filterFunction);\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    firstSetup$\n      .pipe(\n        switchMap(() => combineLatest([this.route.queryParams, allCipherMap$])),\n        filter(() => this.vaultItemDialogRef == undefined || !this.extensionRefreshEnabled),\n        switchMap(async ([qParams, allCiphersMap]) => {\n          const cipherId = getCipherIdFromParams(qParams);\n\n          if (!cipherId) {\n            this.prevCipherId = null;\n            return;\n          }\n\n          if (cipherId === this.prevCipherId) {\n            return;\n          }\n\n          this.prevCipherId = cipherId;\n\n          const cipher = allCiphersMap[cipherId];\n          if (cipher) {\n            let action = qParams.action;\n\n            if (action == \"showFailedToDecrypt\") {\n              DecryptionFailureDialogComponent.open(this.dialogService, {\n                cipherIds: [cipherId as CipherId],\n              });\n              await this.router.navigate([], {\n                queryParams: { itemId: null, cipherId: null, action: null },\n                queryParamsHandling: \"merge\",\n                replaceUrl: true,\n              });\n              return;\n            }\n\n            // Default to \"view\" if extension refresh is enabled\n            if (action == null && this.extensionRefreshEnabled) {\n              action = \"view\";\n            }\n\n            if (action === \"view\") {\n              await this.viewCipherById(cipher);\n            } else {\n              await this.editCipherId(cipher, false);\n            }\n          } else {\n            this.toastService.showToast({\n              variant: \"error\",\n              title: null,\n              message: this.i18nService.t(\"unknownCipher\"),\n            });\n            await this.router.navigate([], {\n              queryParams: { cipherId: null, itemId: null },\n              queryParamsHandling: \"merge\",\n            });\n          }\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe();\n\n    firstSetup$\n      .pipe(\n        switchMap(() => combineLatest([this.route.queryParams, organization$, allCiphers$])),\n        switchMap(async ([qParams, organization, allCiphers$]) => {\n          const cipherId = qParams.viewEvents;\n          if (!cipherId) {\n            return;\n          }\n          const cipher = allCiphers$.find((c) => c.id === cipherId);\n          if (organization.useEvents && cipher != undefined) {\n            await this.viewEvents(cipher);\n          } else {\n            this.toastService.showToast({\n              variant: \"error\",\n              title: null,\n              message: this.i18nService.t(\"unknownCipher\"),\n            });\n            await this.router.navigate([], {\n              queryParams: { viewEvents: null },\n              queryParamsHandling: \"merge\",\n            });\n          }\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe();\n\n    this.unpaidSubscriptionDialog$.pipe(takeUntil(this.destroy$)).subscribe();\n\n    this.freeTrial$ = combineLatest([\n      organization$,\n      this.hasSubscription$.pipe(filter((hasSubscription) => hasSubscription !== null)),\n    ]).pipe(\n      filter(\n        ([org, hasSubscription]) => org.isOwner && hasSubscription && org.canViewBillingHistory,\n      ),\n      switchMap(([org]) =>\n        combineLatest([\n          of(org),\n          this.organizationApiService.getSubscription(org.id),\n          this.organizationBillingService.getPaymentSource(org.id),\n        ]),\n      ),\n      map(([org, sub, paymentSource]) => {\n        return this.trialFlowService.checkForOrgsWithUpcomingPaymentIssues(org, sub, paymentSource);\n      }),\n    );\n\n    this.resellerWarning$ = organization$.pipe(\n      filter((org) => org.isOwner && this.resellerManagedOrgAlert),\n      switchMap((org) =>\n        from(this.billingApiService.getOrganizationBillingMetadata(org.id)).pipe(\n          map((metadata) => ({ org, metadata })),\n        ),\n      ),\n      map(({ org, metadata }) => this.resellerWarningService.getWarning(org, metadata)),\n    );\n\n    firstSetup$\n      .pipe(\n        switchMap(() => this.refresh$),\n        tap(() => (this.refreshing = true)),\n        switchMap(() =>\n          combineLatest([\n            organization$,\n            filter$,\n            allCollections$,\n            allGroups$,\n            ciphers$,\n            collections$,\n            selectedCollection$,\n            showCollectionAccessRestricted$,\n          ]),\n        ),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(\n        ([\n          organization,\n          filter,\n          allCollections,\n          allGroups,\n          ciphers,\n          collections,\n          selectedCollection,\n          showCollectionAccessRestricted,\n        ]) => {\n          this.organization = organization;\n          this.filter = filter;\n          this.allCollections = allCollections;\n          this.allGroups = allGroups;\n          this.ciphers = ciphers;\n          this.collections = collections;\n          this.selectedCollection = selectedCollection;\n          this.showCollectionAccessRestricted = showCollectionAccessRestricted;\n\n          this.isEmpty = collections?.length === 0 && ciphers?.length === 0;\n\n          // This is a temporary fix to avoid double fetching collections.\n          // TODO: Remove when implementing new VVR menu\n          this.vaultFilterService.reloadCollections(allCollections);\n\n          this.refreshing = false;\n          this.performingInitialLoad = false;\n        },\n      );\n  }\n\n  async navigateToPaymentMethod() {\n    await this.router.navigate(\n      [\"organizations\", `${this.organization?.id}`, \"billing\", \"payment-method\"],\n      { state: { launchPaymentModalAutomatically: true } },\n    );\n  }\n\n  addAccessToggle(e: AddAccessStatusType) {\n    this.addAccessStatus$.next(e);\n  }\n\n  get loading() {\n    return this.refreshing || this.processingEvent;\n  }\n\n  ngOnDestroy() {\n    this.broadcasterService.unsubscribe(BroadcasterSubscriptionId);\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async onVaultItemsEvent(event: VaultItemEvent) {\n    this.processingEvent = true;\n\n    try {\n      switch (event.type) {\n        case \"viewAttachments\":\n          await this.editCipherAttachments(event.item);\n          break;\n        case \"clone\":\n          await this.cloneCipher(event.item);\n          break;\n        case \"restore\":\n          if (event.items.length === 1) {\n            await this.restore(event.items[0]);\n          } else {\n            await this.bulkRestore(event.items);\n          }\n          break;\n        case \"delete\": {\n          const ciphers = event.items\n            .filter((i) => i.collection === undefined)\n            .map((i) => i.cipher);\n          const collections = event.items\n            .filter((i) => i.cipher === undefined)\n            .map((i) => i.collection);\n          if (ciphers.length === 1 && collections.length === 0) {\n            await this.deleteCipher(ciphers[0]);\n          } else if (ciphers.length === 0 && collections.length === 1) {\n            await this.deleteCollection(collections[0] as CollectionAdminView);\n          } else {\n            await this.bulkDelete(ciphers, collections, this.organization);\n          }\n          break;\n        }\n        case \"copyField\":\n          await this.copy(event.item, event.field);\n          break;\n        case \"editCollection\":\n          await this.editCollection(\n            event.item as CollectionAdminView,\n            CollectionDialogTabType.Info,\n            event.readonly,\n          );\n          break;\n        case \"viewCollectionAccess\":\n          await this.editCollection(\n            event.item as CollectionAdminView,\n            CollectionDialogTabType.Access,\n            event.readonly,\n          );\n          break;\n        case \"bulkEditCollectionAccess\":\n          await this.bulkEditCollectionAccess(event.items, this.organization);\n          break;\n        case \"assignToCollections\":\n          await this.bulkAssignToCollections(event.items);\n          break;\n        case \"viewEvents\":\n          await this.viewEvents(event.item);\n          break;\n      }\n    } finally {\n      this.processingEvent = false;\n    }\n  }\n\n  filterSearchText(searchText: string) {\n    this.searchText$.next(searchText);\n  }\n\n  async editCipherAttachments(cipher: CipherView) {\n    if (cipher?.reprompt !== 0 && !(await this.passwordRepromptService.showPasswordPrompt())) {\n      this.go({ cipherId: null, itemId: null });\n      return;\n    }\n\n    if (this.organization.maxStorageGb == null || this.organization.maxStorageGb === 0) {\n      this.messagingService.send(\"upgradeOrganization\", { organizationId: cipher.organizationId });\n      return;\n    }\n\n    const dialogRef = AttachmentsV2Component.open(this.dialogService, {\n      cipherId: cipher.id as CipherId,\n    });\n\n    const result = await firstValueFrom(dialogRef.closed);\n\n    if (\n      result.action === AttachmentDialogResult.Removed ||\n      result.action === AttachmentDialogResult.Uploaded\n    ) {\n      this.refresh();\n    }\n  }\n\n  async addCipher(cipherType?: CipherType) {\n    if (this.extensionRefreshEnabled) {\n      return this.addCipherV2(cipherType);\n    }\n\n    let collections: CollectionView[] = [];\n\n    // Admins limited to only adding items to collections they have access to.\n    collections = await firstValueFrom(this.editableCollections$);\n\n    await this.editCipher(null, false, (comp) => {\n      comp.type = cipherType || this.activeFilter.cipherType;\n      comp.collections = collections;\n      if (this.activeFilter.collectionId) {\n        comp.collectionIds = [this.activeFilter.collectionId];\n      }\n    });\n  }\n\n  /** Opens the Add/Edit Dialog. Only to be used when the BrowserExtension feature flag is active */\n  async addCipherV2(cipherType?: CipherType) {\n    const cipherFormConfig = await this.cipherFormConfigService.buildConfig(\n      \"add\",\n      null,\n      cipherType,\n    );\n\n    const collectionId: CollectionId | undefined = this.activeFilter.collectionId as CollectionId;\n\n    cipherFormConfig.initialValues = {\n      organizationId: this.organization.id as OrganizationId,\n      collectionIds: collectionId ? [collectionId] : [],\n    };\n\n    await this.openVaultItemDialog(\"form\", cipherFormConfig);\n  }\n\n  /**\n   * Edit the given cipher or add a new cipher\n   * @param cipherView - When set, the cipher to be edited\n   * @param cloneCipher - `true` when the cipher should be cloned.\n   * Used in place of the `additionalComponentParameters`, as\n   * the `editCipherIdV2` method has a differing implementation.\n   * @param defaultComponentParameters - A method that takes in an instance of\n   * the `AddEditComponent` to edit methods directly.\n   */\n  async editCipher(\n    cipher: CipherView | null,\n    cloneCipher: boolean,\n    additionalComponentParameters?: (comp: AddEditComponent) => void,\n  ) {\n    return this.editCipherId(cipher, cloneCipher, additionalComponentParameters);\n  }\n\n  async editCipherId(\n    cipher: CipherView | null,\n    cloneCipher: boolean,\n    additionalComponentParameters?: (comp: AddEditComponent) => void,\n  ) {\n    if (\n      cipher &&\n      cipher.reprompt !== 0 &&\n      !(await this.passwordRepromptService.showPasswordPrompt())\n    ) {\n      // didn't pass password prompt, so don't open add / edit modal\n      this.go({ cipherId: null, itemId: null });\n      return;\n    }\n\n    if (this.extensionRefreshEnabled) {\n      await this.editCipherIdV2(cipher, cloneCipher);\n      return;\n    }\n\n    const defaultComponentParameters = (comp: AddEditComponent) => {\n      comp.organization = this.organization;\n      comp.organizationId = this.organization.id;\n      comp.cipherId = cipher?.id;\n      comp.collectionId = this.activeFilter.collectionId;\n      comp.onSavedCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n      comp.onDeletedCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n      comp.onRestoredCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n    };\n\n    const [modal, childComponent] = await this.modalService.openViewRef(\n      AddEditComponent,\n      this.cipherAddEditModalRef,\n      additionalComponentParameters == null\n        ? defaultComponentParameters\n        : (comp) => {\n            defaultComponentParameters(comp);\n            additionalComponentParameters(comp);\n          },\n    );\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    modal.onClosedPromise().then(() => {\n      this.go({ cipherId: null, itemId: null, action: null });\n    });\n\n    return childComponent;\n  }\n\n  /**\n   * Edit a cipher using the new AddEditCipherDialogV2 component.\n   * Only to be used behind the ExtensionRefresh feature flag.\n   */\n  private async editCipherIdV2(cipher: CipherView | null, cloneCipher: boolean) {\n    const cipherFormConfig = await this.cipherFormConfigService.buildConfig(\n      cloneCipher ? \"clone\" : \"edit\",\n      cipher?.id as CipherId | null,\n    );\n\n    await this.openVaultItemDialog(\"form\", cipherFormConfig, cipher);\n  }\n\n  /** Opens the view dialog for the given cipher unless password reprompt fails */\n  async viewCipherById(cipher: CipherView) {\n    if (!cipher) {\n      return;\n    }\n\n    if (\n      cipher &&\n      cipher.reprompt !== 0 &&\n      !(await this.passwordRepromptService.showPasswordPrompt())\n    ) {\n      // Didn't pass password prompt, so don't open add / edit modal.\n      await this.go({ cipherId: null, itemId: null, action: null });\n      return;\n    }\n\n    const cipherFormConfig = await this.cipherFormConfigService.buildConfig(\n      \"edit\",\n      cipher.id as CipherId,\n      cipher.type,\n    );\n\n    await this.openVaultItemDialog(\n      \"view\",\n      cipherFormConfig,\n      cipher,\n      this.activeFilter.collectionId as CollectionId,\n    );\n  }\n\n  /**\n   * Open the combined view / edit dialog for a cipher.\n   */\n  async openVaultItemDialog(\n    mode: VaultItemDialogMode,\n    formConfig: CipherFormConfig,\n    cipher?: CipherView,\n    activeCollectionId?: CollectionId,\n  ) {\n    const disableForm = cipher ? !cipher.edit && !this.organization.canEditAllCiphers : false;\n    // If the form is disabled, force the mode into `view`\n    const dialogMode = disableForm ? \"view\" : mode;\n    this.vaultItemDialogRef = VaultItemDialogComponent.open(this.dialogService, {\n      mode: dialogMode,\n      formConfig,\n      disableForm,\n      activeCollectionId,\n      isAdminConsoleAction: true,\n    });\n\n    const result = await lastValueFrom(this.vaultItemDialogRef.closed);\n    this.vaultItemDialogRef = undefined;\n\n    // If the dialog was closed by deleting the cipher, refresh the vault.\n    if (result === VaultItemDialogResult.Deleted || result === VaultItemDialogResult.Saved) {\n      this.refresh();\n    }\n\n    // Clear the query params when the dialog closes\n    await this.go({ cipherId: null, itemId: null, action: null });\n  }\n\n  async cloneCipher(cipher: CipherView) {\n    if (cipher.login?.hasFido2Credentials) {\n      const confirmed = await this.dialogService.openSimpleDialog({\n        title: { key: \"passkeyNotCopied\" },\n        content: { key: \"passkeyNotCopiedAlert\" },\n        type: \"info\",\n      });\n\n      if (!confirmed) {\n        return false;\n      }\n    }\n\n    let collections: CollectionView[] = [];\n\n    // Admins limited to only adding items to collections they have access to.\n    collections = await firstValueFrom(this.editableCollections$);\n\n    await this.editCipher(cipher, true, (comp) => {\n      comp.cloneMode = true;\n      comp.collections = collections;\n      comp.collectionIds = cipher.collectionIds;\n    });\n  }\n\n  async restore(c: CipherView): Promise<boolean> {\n    if (!c.isDeleted) {\n      return;\n    }\n\n    if (\n      !this.organization.permissions.editAnyCollection &&\n      !c.edit &&\n      !this.organization.allowAdminAccessToAllCollectionItems\n    ) {\n      this.showMissingPermissionsError();\n      return;\n    }\n\n    if (!(await this.repromptCipher([c]))) {\n      return;\n    }\n\n    // Allow restore of an Unassigned Item\n    try {\n      const asAdmin = this.organization?.canEditAnyCollection || c.isUnassigned;\n      await this.cipherService.restoreWithServer(c.id, asAdmin);\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(\"restoredItem\"),\n      });\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async bulkRestore(ciphers: CipherView[]) {\n    if (\n      !this.organization.permissions.editAnyCollection &&\n      ciphers.some((c) => !c.edit && !this.organization.allowAdminAccessToAllCollectionItems)\n    ) {\n      this.showMissingPermissionsError();\n      return;\n    }\n\n    if (!(await this.repromptCipher(ciphers))) {\n      return;\n    }\n\n    // assess if there are unassigned ciphers and/or editable ciphers selected in bulk for restore\n    const editAccessCiphers: string[] = [];\n    const unassignedCiphers: string[] = [];\n\n    // If user has edit all Access no need to check for unassigned ciphers\n    if (this.organization.canEditAllCiphers) {\n      ciphers.map((cipher) => {\n        editAccessCiphers.push(cipher.id);\n      });\n    } else {\n      ciphers.map((cipher) => {\n        if (cipher.collectionIds.length === 0) {\n          unassignedCiphers.push(cipher.id);\n        } else if (cipher.edit) {\n          editAccessCiphers.push(cipher.id);\n        }\n      });\n    }\n\n    if (unassignedCiphers.length === 0 && editAccessCiphers.length === 0) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: this.i18nService.t(\"errorOccurred\"),\n        message: this.i18nService.t(\"nothingSelected\"),\n      });\n      return;\n    }\n\n    if (unassignedCiphers.length > 0 || editAccessCiphers.length > 0) {\n      await this.cipherService.restoreManyWithServer(\n        [...unassignedCiphers, ...editAccessCiphers],\n        this.organization.id,\n      );\n    }\n\n    this.toastService.showToast({\n      variant: \"success\",\n      title: null,\n      message: this.i18nService.t(\"restoredItems\"),\n    });\n    this.refresh();\n  }\n\n  async deleteCipher(c: CipherView): Promise<boolean> {\n    if (!c.edit && !this.organization.canEditAllCiphers) {\n      this.showMissingPermissionsError();\n      return;\n    }\n\n    if (!(await this.repromptCipher([c]))) {\n      return;\n    }\n\n    const permanent = c.isDeleted;\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: permanent ? \"permanentlyDeleteItem\" : \"deleteItem\" },\n      content: { key: permanent ? \"permanentlyDeleteItemConfirmation\" : \"deleteItemConfirmation\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.deleteCipherWithServer(c.id, permanent, c.isUnassigned);\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(permanent ? \"permanentlyDeletedItem\" : \"deletedItem\"),\n      });\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async deleteCollection(collection: CollectionAdminView): Promise<void> {\n    if (!collection.canDelete(this.organization)) {\n      this.showMissingPermissionsError();\n      return;\n    }\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: collection.name,\n      content: { key: \"deleteCollectionConfirmation\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return;\n    }\n    try {\n      await this.apiService.deleteCollection(this.organization?.id, collection.id);\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(\"deletedCollectionId\", collection.name),\n      });\n\n      // Navigate away if we deleted the collection we were viewing\n      if (this.selectedCollection?.node.id === collection.id) {\n        // Clear the cipher cache to clear the deleted collection from the cipher state\n        await this.cipherService.clear();\n        void this.router.navigate([], {\n          queryParams: { collectionId: this.selectedCollection.parent?.node.id ?? null },\n          queryParamsHandling: \"merge\",\n          replaceUrl: true,\n        });\n      }\n\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async bulkDelete(\n    ciphers: CipherView[],\n    collections: CollectionView[],\n    organization: Organization,\n  ) {\n    if (!(await this.repromptCipher(ciphers))) {\n      return;\n    }\n\n    // Allow bulk deleting of Unassigned Items\n    const unassignedCiphers: string[] = [];\n    const assignedCiphers: string[] = [];\n\n    ciphers.map((c) => {\n      if (c.isUnassigned) {\n        unassignedCiphers.push(c.id);\n      } else {\n        assignedCiphers.push(c.id);\n      }\n    });\n\n    if (ciphers.length === 0 && collections.length === 0) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: null,\n        message: this.i18nService.t(\"nothingSelected\"),\n      });\n      return;\n    }\n\n    const canDeleteCollections =\n      collections == null || collections.every((c) => c.canDelete(organization));\n    const canDeleteCiphers =\n      ciphers == null || ciphers.every((c) => c.edit) || this.organization.canEditAllCiphers;\n\n    if (!canDeleteCiphers || !canDeleteCollections) {\n      this.showMissingPermissionsError();\n      return;\n    }\n\n    const dialog = openBulkDeleteDialog(this.dialogService, {\n      data: {\n        permanent: this.filter.type === \"trash\",\n        cipherIds: assignedCiphers,\n        collections: collections,\n        organization,\n        unassignedCiphers,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === BulkDeleteDialogResult.Deleted) {\n      this.refresh();\n    }\n  }\n\n  async copy(cipher: CipherView, field: \"username\" | \"password\" | \"totp\") {\n    let aType;\n    let value;\n    let typeI18nKey;\n\n    if (field === \"username\") {\n      aType = \"Username\";\n      value = cipher.login.username;\n      typeI18nKey = \"username\";\n    } else if (field === \"password\") {\n      aType = \"Password\";\n      value = cipher.login.password;\n      typeI18nKey = \"password\";\n    } else if (field === \"totp\") {\n      aType = \"TOTP\";\n      value = await this.totpService.getCode(cipher.login.totp);\n      typeI18nKey = \"verificationCodeTotp\";\n    } else {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: null,\n        message: this.i18nService.t(\"unexpectedError\"),\n      });\n      return;\n    }\n\n    if (\n      this.passwordRepromptService.protectedFields().includes(aType) &&\n      !(await this.repromptCipher([cipher]))\n    ) {\n      return;\n    }\n\n    if (!cipher.viewPassword) {\n      return;\n    }\n\n    this.platformUtilsService.copyToClipboard(value, { window: window });\n    this.toastService.showToast({\n      variant: \"info\",\n      title: null,\n      message: this.i18nService.t(\"valueCopied\", this.i18nService.t(typeI18nKey)),\n    });\n\n    if (field === \"password\") {\n      await this.eventCollectionService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n    } else if (field === \"totp\") {\n      await this.eventCollectionService.collect(\n        EventType.Cipher_ClientCopiedHiddenField,\n        cipher.id,\n      );\n    }\n  }\n\n  async addCollection(): Promise<void> {\n    const dialog = openCollectionDialog(this.dialogService, {\n      data: {\n        organizationId: this.organization?.id,\n        parentCollectionId: this.selectedCollection?.node.id,\n        limitNestedCollections: !this.organization.canEditAnyCollection,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (\n      result.action === CollectionDialogAction.Saved ||\n      result.action === CollectionDialogAction.Deleted\n    ) {\n      this.refresh();\n    }\n  }\n\n  async editCollection(\n    c: CollectionAdminView,\n    tab: CollectionDialogTabType,\n    readonly: boolean,\n  ): Promise<void> {\n    const dialog = openCollectionDialog(this.dialogService, {\n      data: {\n        collectionId: c?.id,\n        organizationId: this.organization?.id,\n        initialTab: tab,\n        readonly: readonly,\n        isAddAccessCollection: c.unmanaged,\n        limitNestedCollections: !this.organization.canEditAnyCollection,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (\n      result.action === CollectionDialogAction.Saved ||\n      result.action === CollectionDialogAction.Deleted\n    ) {\n      this.refresh();\n\n      // If we deleted the selected collection, navigate up/away\n      if (\n        result.action === CollectionDialogAction.Deleted &&\n        this.selectedCollection?.node.id === c?.id\n      ) {\n        void this.router.navigate([], {\n          queryParams: { collectionId: this.selectedCollection.parent?.node.id ?? null },\n          queryParamsHandling: \"merge\",\n          replaceUrl: true,\n        });\n      }\n    }\n  }\n\n  async bulkEditCollectionAccess(\n    collections: CollectionView[],\n    organization: Organization,\n  ): Promise<void> {\n    if (collections.length === 0) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: null,\n        message: this.i18nService.t(\"noCollectionsSelected\"),\n      });\n      return;\n    }\n\n    if (collections.some((c) => !c.canEdit(organization))) {\n      this.showMissingPermissionsError();\n      return;\n    }\n\n    const dialog = BulkCollectionsDialogComponent.open(this.dialogService, {\n      data: {\n        collections,\n        organizationId: this.organization?.id,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === BulkCollectionsDialogResult.Saved) {\n      this.refresh();\n    }\n  }\n\n  async bulkAssignToCollections(items: CipherView[]) {\n    if (items.length === 0) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: null,\n        message: this.i18nService.t(\"nothingSelected\"),\n      });\n      return;\n    }\n\n    const availableCollections = await firstValueFrom(this.editableCollections$);\n\n    const dialog = AssignCollectionsWebComponent.open(this.dialogService, {\n      data: {\n        ciphers: items,\n        organizationId: this.organization?.id as OrganizationId,\n        availableCollections,\n        activeCollection: this.activeFilter?.selectedCollectionNode?.node,\n        isSingleCipherAdmin:\n          items.length === 1 && (this.organization?.canEditAllCiphers || items[0].isUnassigned),\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === CollectionAssignmentResult.Saved) {\n      this.refresh();\n    }\n  }\n\n  async viewEvents(cipher: CipherView) {\n    await openEntityEventsDialog(this.dialogService, {\n      data: {\n        name: cipher.name,\n        organizationId: this.organization.id,\n        entityId: cipher.id,\n        showUser: true,\n        entity: \"cipher\",\n      },\n    });\n  }\n\n  protected deleteCipherWithServer(id: string, permanent: boolean, isUnassigned: boolean) {\n    const asAdmin = this.organization?.canEditAllCiphers || isUnassigned;\n    return permanent\n      ? this.cipherService.deleteWithServer(id, asAdmin)\n      : this.cipherService.softDeleteWithServer(id, asAdmin);\n  }\n\n  protected async repromptCipher(ciphers: CipherView[]) {\n    const notProtected = !ciphers.find((cipher) => cipher.reprompt !== CipherRepromptType.None);\n\n    return notProtected || (await this.passwordRepromptService.showPasswordPrompt());\n  }\n\n  private refresh() {\n    this.refresh$.next();\n  }\n\n  private go(queryParams: any = null) {\n    if (queryParams == null) {\n      queryParams = {\n        type: this.activeFilter.cipherType,\n        collectionId: this.activeFilter.collectionId,\n        deleted: this.activeFilter.isDeleted || null,\n      };\n    }\n\n    void this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: queryParams,\n      queryParamsHandling: \"merge\",\n      replaceUrl: true,\n    });\n  }\n\n  protected readonly CollectionDialogTabType = CollectionDialogTabType;\n\n  private showMissingPermissionsError() {\n    this.toastService.showToast({\n      variant: \"error\",\n      title: null,\n      message: this.i18nService.t(\"missingPermissions\"),\n    });\n  }\n}\n\n/**\n * Allows backwards compatibility with\n * old links that used the original `cipherId` param\n */\nconst getCipherIdFromParams = (params: Params): string => {\n  return params[\"itemId\"] || params[\"cipherId\"];\n};\n", "import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { canAccessVaultTab } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\nimport { organizationPermissionsGuard } from \"../../admin-console/organizations/guards/org-permissions.guard\";\n\nimport { VaultComponent } from \"./vault.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: VaultComponent,\n    canActivate: [organizationPermissionsGuard(canAccessVaultTab)],\n    data: { titleId: \"vaults\" },\n  },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class VaultRoutingModule {}\n", "import { NgModule } from \"@angular/core\";\n\nimport { LooseComponentsModule } from \"../../shared/loose-components.module\";\nimport { SharedModule } from \"../../shared/shared.module\";\nimport { OrganizationBadgeModule } from \"../../vault/individual-vault/organization-badge/organization-badge.module\";\nimport { CollectionDialogModule } from \"../components/collection-dialog\";\nimport { ViewComponent } from \"../individual-vault/view.component\";\n\nimport { CollectionBadgeModule } from \"./collection-badge/collection-badge.module\";\nimport { GroupBadgeModule } from \"./group-badge/group-badge.module\";\nimport { VaultRoutingModule } from \"./vault-routing.module\";\nimport { VaultComponent } from \"./vault.component\";\n\n@NgModule({\n  imports: [\n    VaultRoutingModule,\n    SharedModule,\n    LooseComponentsModule,\n    GroupBadgeModule,\n    CollectionBadgeModule,\n    OrganizationBadgeModule,\n    CollectionDialogModule,\n    VaultComponent,\n    ViewComponent,\n  ],\n})\nexport class VaultModule {}\n", "<div\n  class=\"tw-block tw-h-full tw-overflow-hidden tw-rounded tw-border tw-border-solid tw-border-secondary-600 tw-relative tw-transition-all hover:tw-scale-105 focus-within:tw-outline-none focus-within:tw-ring focus-within:tw-ring-primary-700 focus-within:tw-ring-offset-2\"\n>\n  <div class=\"tw-flex tw-bg-secondary-100 tw-items-center tw-justify-end tw-pt-4 tw-pr-4\">\n    <i class=\"bwi bwi-external-link\"></i>\n  </div>\n  <div\n    class=\"tw-flex tw-h-32 tw-bg-secondary-100 tw-items-center tw-justify-center tw-pb-2 tw-px-6 lg:tw-pb-4 lg:tw-px-12\"\n  >\n    <div class=\"tw-flex tw-items-center tw-justify-center tw-h-28 tw-w-28 lg:tw-w-40\">\n      <img\n        #imageEle\n        [src]=\"image\"\n        alt=\"\"\n        class=\"tw-block tw-mx-auto tw-h-auto tw-max-w-full tw-max-h-full\"\n      />\n    </div>\n  </div>\n  <div class=\"tw-p-5\">\n    <h3 class=\"tw-text-main tw-text-lg tw-font-semibold\">{{ name }}</h3>\n    <a\n      class=\"tw-block tw-mb-0 tw-font-bold hover:tw-no-underline focus:tw-outline-none after:tw-content-[''] after:tw-block after:tw-absolute after:tw-w-full after:tw-h-full after:tw-left-0 after:tw-top-0\"\n      [href]=\"linkURL\"\n      rel=\"noopener noreferrer\"\n      target=\"_blank\"\n    >\n    </a>\n    <span *ngIf=\"showNewBadge()\" bitBadge class=\"tw-mt-3\" variant=\"secondary\">\n      {{ \"new\" | i18n }}\n    </span>\n  </div>\n</div>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  OnDestroy,\n  ViewChild,\n} from \"@angular/core\";\nimport { Observable, Subject, combineLatest, takeUntil } from \"rxjs\";\n\nimport { SYSTEM_THEME_OBSERVABLE } from \"@bitwarden/angular/services/injection-tokens\";\nimport { ThemeType } from \"@bitwarden/common/platform/enums\";\nimport { ThemeStateService } from \"@bitwarden/common/platform/theming/theme-state.service\";\n\nimport { SharedModule } from \"../../../../../../shared/shared.module\";\n\n@Component({\n  selector: \"app-integration-card\",\n  templateUrl: \"./integration-card.component.html\",\n  standalone: true,\n  imports: [SharedModule],\n})\nexport class IntegrationCardComponent implements AfterViewInit, OnDestroy {\n  private destroyed$: Subject<void> = new Subject();\n  @ViewChild(\"imageEle\") imageEle: ElementRef<HTMLImageElement>;\n\n  @Input() name: string;\n  @Input() image: string;\n  @Input() imageDarkMode?: string;\n  @Input() linkURL: string;\n\n  /** Adds relevant `rel` attribute to external links */\n  @Input() externalURL?: boolean;\n\n  /**\n   * Date of when the new badge should be hidden.\n   * When omitted, the new badge is never shown.\n   *\n   * @example \"2024-12-31\"\n   */\n  @Input() newBadgeExpiration?: string;\n\n  constructor(\n    private themeStateService: ThemeStateService,\n    @Inject(SYSTEM_THEME_OBSERVABLE)\n    private systemTheme$: Observable<ThemeType>,\n  ) {}\n\n  ngAfterViewInit() {\n    combineLatest([this.themeStateService.selectedTheme$, this.systemTheme$])\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(([theme, systemTheme]) => {\n        // When the card doesn't have a dark mode image, exit early\n        if (!this.imageDarkMode) {\n          return;\n        }\n\n        if (theme === ThemeType.System) {\n          // When the user's preference is the system theme,\n          // use the system theme to determine the image\n          const prefersDarkMode =\n            systemTheme === ThemeType.Dark || systemTheme === ThemeType.SolarizedDark;\n\n          this.imageEle.nativeElement.src = prefersDarkMode ? this.imageDarkMode : this.image;\n        } else if (theme === ThemeType.Dark || theme === ThemeType.SolarizedDark) {\n          // When the user's preference is dark mode, use the dark mode image\n          this.imageEle.nativeElement.src = this.imageDarkMode;\n        } else {\n          // Otherwise use the light mode image\n          this.imageEle.nativeElement.src = this.image;\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /** Show the \"new\" badge when expiration is in the future */\n  showNewBadge() {\n    if (!this.newBadgeExpiration) {\n      return false;\n    }\n\n    const expirationDate = new Date(this.newBadgeExpiration);\n\n    // Do not show the new badge for invalid dates\n    if (isNaN(expirationDate.getTime())) {\n      return false;\n    }\n\n    return expirationDate > new Date();\n  }\n}\n", "<ul\n  class=\"tw-inline-grid tw-grid-cols-3 tw-gap-6 tw-m-0 tw-p-0 tw-w-full tw-auto-cols-auto tw-list-none lg:tw-grid-cols-4 lg:tw-gap-10 lg:tw-w-auto\"\n>\n  <li\n    *ngFor=\"let integration of integrations\"\n    [title]=\"tooltipI18nKey | i18n: integration.name\"\n    [attr.aria-label]=\"ariaI18nKey | i18n: integration.name\"\n  >\n    <app-integration-card\n      [name]=\"integration.name\"\n      [linkURL]=\"integration.linkURL\"\n      [image]=\"integration.image\"\n      [imageDarkMode]=\"integration.imageDarkMode\"\n      [externalURL]=\"integration.type === IntegrationType.SDK\"\n      [newBadgeExpiration]=\"integration.newBadgeExpiration\"\n    ></app-integration-card>\n  </li>\n</ul>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component, Input } from \"@angular/core\";\n\nimport { IntegrationType } from \"@bitwarden/common/enums\";\n\nimport { SharedModule } from \"../../../../../../shared/shared.module\";\nimport { IntegrationCardComponent } from \"../integration-card/integration-card.component\";\nimport { Integration } from \"../models\";\n\n@Component({\n  selector: \"app-integration-grid\",\n  templateUrl: \"./integration-grid.component.html\",\n  standalone: true,\n  imports: [IntegrationCardComponent, SharedModule],\n})\nexport class IntegrationGridComponent {\n  @Input() integrations: Integration[];\n\n  @Input() ariaI18nKey: string = \"integrationCardAriaLabel\";\n  @Input() tooltipI18nKey: string = \"integrationCardTooltip\";\n\n  protected IntegrationType = IntegrationType;\n}\n", "import { Pipe, PipeTransform } from \"@angular/core\";\n\nimport { IntegrationType } from \"@bitwarden/common/enums\";\n\nimport { Integration } from \"../../../shared/components/integrations/models\";\n\n@Pipe({\n  name: \"filterIntegrations\",\n  standalone: true,\n})\nexport class FilterIntegrationsPipe implements PipeTransform {\n  transform(integrations: Integration[], type: IntegrationType): Integration[] {\n    return integrations.filter((integration) => integration.type === type);\n  }\n}\n", "<app-header> </app-header>\n\n<bit-tab-group [(selectedIndex)]=\"tabIndex\" *ngIf=\"organization$ | async as organization\">\n  <bit-tab [label]=\"'singleSignOn' | i18n\" *ngIf=\"organization.useSso\">\n    <section class=\"tw-mb-9\">\n      <h2 bitTypography=\"h2\">{{ \"singleSignOn\" | i18n }}</h2>\n      <p bitTypography=\"body1\">\n        {{ \"ssoDescStart\" | i18n }}\n        <a bitLink routerLink=\"../settings/sso\" class=\"tw-lowercase\">{{ \"singleSignOn\" | i18n }}</a>\n        {{ \"ssoDescEnd\" | i18n }}\n      </p>\n      <app-integration-grid\n        [integrations]=\"integrationsList | filterIntegrations: IntegrationType.SSO\"\n      ></app-integration-grid>\n    </section>\n  </bit-tab>\n\n  <bit-tab\n    [label]=\"'userProvisioning' | i18n\"\n    *ngIf=\"organization.useScim || organization.useDirectory\"\n  >\n    <section class=\"tw-mb-9\" *ngIf=\"organization.useScim\">\n      <h2 bitTypography=\"h2\">\n        {{ \"scimIntegration\" | i18n }}\n      </h2>\n      <p bitTypography=\"body1\">\n        {{ \"scimIntegrationDescStart\" | i18n }}\n        <a bitLink routerLink=\"../settings/scim\">{{ \"scimIntegration\" | i18n }}</a>\n        {{ \"scimIntegrationDescEnd\" | i18n }}\n      </p>\n      <app-integration-grid\n        [integrations]=\"integrationsList | filterIntegrations: IntegrationType.SCIM\"\n      ></app-integration-grid>\n    </section>\n    <section class=\"tw-mb-9\" *ngIf=\"organization.useDirectory\">\n      <h2 bitTypography=\"h2\">\n        {{ \"bwdc\" | i18n }}\n      </h2>\n      <p bitTypography=\"body1\">{{ \"bwdcDesc\" | i18n }}</p>\n      <app-integration-grid\n        [integrations]=\"integrationsList | filterIntegrations: IntegrationType.BWDC\"\n      ></app-integration-grid>\n    </section>\n  </bit-tab>\n\n  <bit-tab [label]=\"'eventManagement' | i18n\" *ngIf=\"organization.useEvents\">\n    <section class=\"tw-mb-9\">\n      <h2 bitTypography=\"h2\">\n        {{ \"eventManagement\" | i18n }}\n      </h2>\n      <p bitTypography=\"body1\">{{ \"eventManagementDesc\" | i18n }}</p>\n      <app-integration-grid\n        [integrations]=\"integrationsList | filterIntegrations: IntegrationType.EVENT\"\n      ></app-integration-grid>\n    </section>\n  </bit-tab>\n\n  <bit-tab [label]=\"'deviceManagement' | i18n\">\n    <section class=\"tw-mb-9\">\n      <h2 bitTypography=\"h2\">\n        {{ \"deviceManagement\" | i18n }}\n      </h2>\n      <p bitTypography=\"body1\">{{ \"deviceManagementDesc\" | i18n }}</p>\n      <app-integration-grid\n        [integrations]=\"integrationsList | filterIntegrations: IntegrationType.DEVICE\"\n      ></app-integration-grid>\n    </section>\n  </bit-tab>\n</bit-tab-group>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Observable, switchMap } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { IntegrationType } from \"@bitwarden/common/enums\";\n\nimport { HeaderModule } from \"../../../layouts/header/header.module\";\nimport { SharedModule } from \"../../../shared/shared.module\";\nimport { SharedOrganizationModule } from \"../shared\";\nimport { IntegrationGridComponent } from \"../shared/components/integrations/integration-grid/integration-grid.component\";\nimport { FilterIntegrationsPipe } from \"../shared/components/integrations/integrations.pipe\";\nimport { Integration } from \"../shared/components/integrations/models\";\n\n@Component({\n  selector: \"ac-integrations\",\n  templateUrl: \"./integrations.component.html\",\n  standalone: true,\n  imports: [\n    SharedModule,\n    SharedOrganizationModule,\n    IntegrationGridComponent,\n    HeaderModule,\n    FilterIntegrationsPipe,\n  ],\n})\nexport class AdminConsoleIntegrationsComponent implements OnInit {\n  integrationsList: Integration[] = [];\n  tabIndex: number;\n  organization$: Observable<Organization>;\n\n  ngOnInit(): void {\n    this.organization$ = this.route.params.pipe(\n      switchMap((params) => this.organizationService.get$(params.organizationId)),\n    );\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private organizationService: OrganizationService,\n  ) {\n    this.integrationsList = [\n      {\n        name: \"AD FS\",\n        linkURL: \"https://bitwarden.com/help/saml-adfs/\",\n        image: \"../../../../../../../images/integrations/azure-active-directory.svg\",\n        type: IntegrationType.SSO,\n      },\n      {\n        name: \"Auth0\",\n        linkURL: \"https://bitwarden.com/help/saml-auth0/\",\n        image: \"../../../../../../../images/integrations/logo-auth0-badge-color.svg\",\n        type: IntegrationType.SSO,\n      },\n      {\n        name: \"AWS\",\n        linkURL: \"https://bitwarden.com/help/saml-aws/\",\n        image: \"../../../../../../../images/integrations/aws-color.svg\",\n        imageDarkMode: \"../../../../../../../images/integrations/aws-darkmode.svg\",\n        type: IntegrationType.SSO,\n      },\n      {\n        name: \"Microsoft Entra ID\",\n        linkURL: \"https://bitwarden.com/help/saml-azure/\",\n        image: \"../../../../../../../images/integrations/logo-microsoft-entra-id-color.svg\",\n        type: IntegrationType.SSO,\n      },\n      {\n        name: \"Duo\",\n        linkURL: \"https://bitwarden.com/help/saml-duo/\",\n        image: \"../../../../../../../images/integrations/logo-duo-color.svg\",\n        type: IntegrationType.SSO,\n      },\n      {\n        name: \"Google\",\n        linkURL: \"https://bitwarden.com/help/saml-google/\",\n        image: \"../../../../../../../images/integrations/logo-google-badge-color.svg\",\n        type: IntegrationType.SSO,\n      },\n      {\n        name: \"JumpCloud\",\n        linkURL: \"https://bitwarden.com/help/saml-jumpcloud/\",\n        image: \"../../../../../../../images/integrations/logo-jumpcloud-badge-color.svg\",\n        imageDarkMode: \"../../../../../../../images/integrations/jumpcloud-darkmode.svg\",\n        type: IntegrationType.SSO,\n      },\n      {\n        name: \"KeyCloak\",\n        linkURL: \"https://bitwarden.com/help/saml-keycloak/\",\n        image: \"../../../../../../../images/integrations/logo-keycloak-icon.svg\",\n        type: IntegrationType.SSO,\n      },\n      {\n        name: \"Okta\",\n        linkURL: \"https://bitwarden.com/help/saml-okta/\",\n        image: \"../../../../../../../images/integrations/logo-okta-symbol-black.svg\",\n        imageDarkMode: \"../../../../../../../images/integrations/okta-darkmode.svg\",\n        type: IntegrationType.SSO,\n      },\n      {\n        name: \"OneLogin\",\n        linkURL: \"https://bitwarden.com/help/saml-onelogin/\",\n        image: \"../../../../../../../images/integrations/logo-onelogin-badge-color.svg\",\n        imageDarkMode: \"../../../../../../../images/integrations/onelogin-darkmode.svg\",\n        type: IntegrationType.SSO,\n      },\n      {\n        name: \"PingFederate\",\n        linkURL: \"https://bitwarden.com/help/saml-pingfederate/\",\n        image: \"../../../../../../../images/integrations/logo-ping-identity-badge-color.svg\",\n        type: IntegrationType.SSO,\n      },\n      {\n        name: \"Microsoft Entra ID\",\n        linkURL: \"https://bitwarden.com/help/microsoft-entra-id-scim-integration/\",\n        image: \"../../../../../../../images/integrations/logo-microsoft-entra-id-color.svg\",\n        type: IntegrationType.SCIM,\n      },\n      {\n        name: \"Okta\",\n        linkURL: \"https://bitwarden.com/help/okta-scim-integration/\",\n        image: \"../../../../../../../images/integrations/logo-okta-symbol-black.svg\",\n        imageDarkMode: \"../../../../../../../images/integrations/okta-darkmode.svg\",\n        type: IntegrationType.SCIM,\n      },\n      {\n        name: \"OneLogin\",\n        linkURL: \"https://bitwarden.com/help/onelogin-scim-integration/\",\n        image: \"../../../../../../../images/integrations/logo-onelogin-badge-color.svg\",\n        imageDarkMode: \"../../../../../../../images/integrations/onelogin-darkmode.svg\",\n        type: IntegrationType.SCIM,\n      },\n      {\n        name: \"JumpCloud\",\n        linkURL: \"https://bitwarden.com/help/jumpcloud-scim-integration/\",\n        image: \"../../../../../../../images/integrations/logo-jumpcloud-badge-color.svg\",\n        imageDarkMode: \"../../../../../../../images/integrations/jumpcloud-darkmode.svg\",\n        type: IntegrationType.SCIM,\n      },\n      {\n        name: \"Ping Identity\",\n        linkURL: \"https://bitwarden.com/help/ping-identity-scim-integration/\",\n        image: \"../../../../../../../images/integrations/logo-ping-identity-badge-color.svg\",\n        type: IntegrationType.SCIM,\n      },\n      {\n        name: \"Active Directory\",\n        linkURL: \"https://bitwarden.com/help/ldap-directory/\",\n        image: \"../../../../../../../images/integrations/azure-active-directory.svg\",\n        type: IntegrationType.BWDC,\n      },\n      {\n        name: \"Microsoft Entra ID\",\n        linkURL: \"https://bitwarden.com/help/microsoft-entra-id/\",\n        image: \"../../../../../../../images/integrations/logo-microsoft-entra-id-color.svg\",\n        type: IntegrationType.BWDC,\n      },\n      {\n        name: \"Google Workspace\",\n        linkURL: \"https://bitwarden.com/help/workspace-directory/\",\n        image: \"../../../../../../../images/integrations/logo-google-badge-color.svg\",\n        type: IntegrationType.BWDC,\n      },\n      {\n        name: \"Okta\",\n        linkURL: \"https://bitwarden.com/help/okta-directory/\",\n        image: \"../../../../../../../images/integrations/logo-okta-symbol-black.svg\",\n        imageDarkMode: \"../../../../../../../images/integrations/okta-darkmode.svg\",\n        type: IntegrationType.BWDC,\n      },\n      {\n        name: \"OneLogin\",\n        linkURL: \"https://bitwarden.com/help/onelogin-directory/\",\n        image: \"../../../../../../../images/integrations/logo-onelogin-badge-color.svg\",\n        imageDarkMode: \"../../../../../../../images/integrations/onelogin-darkmode.svg\",\n        type: IntegrationType.BWDC,\n      },\n      {\n        name: \"Splunk\",\n        linkURL: \"https://bitwarden.com/help/splunk-siem/\",\n        image: \"../../../../../../../images/integrations/logo-splunk-black.svg\",\n        imageDarkMode: \"../../../../../../../images/integrations/splunk-darkmode.svg\",\n        type: IntegrationType.EVENT,\n      },\n      {\n        name: \"Microsoft Sentinel\",\n        linkURL: \"https://bitwarden.com/help/microsoft-sentinel-siem/\",\n        image: \"../../../../../../../images/integrations/logo-microsoft-sentinel-color.svg\",\n        type: IntegrationType.EVENT,\n      },\n      {\n        name: \"Rapid7\",\n        linkURL: \"https://bitwarden.com/help/rapid7-siem/\",\n        image: \"../../../../../../../images/integrations/logo-rapid7-black.svg\",\n        imageDarkMode: \"../../../../../../../images/integrations/rapid7-darkmode.svg\",\n        type: IntegrationType.EVENT,\n      },\n      {\n        name: \"Elastic\",\n        linkURL: \"https://bitwarden.com/help/elastic-siem/\",\n        image: \"../../../../../../../images/integrations/logo-elastic-badge-color.svg\",\n        type: IntegrationType.EVENT,\n      },\n      {\n        name: \"Panther\",\n        linkURL: \"https://bitwarden.com/help/panther-siem/\",\n        image: \"../../../../../../../images/integrations/logo-panther-round-color.svg\",\n        type: IntegrationType.EVENT,\n      },\n      {\n        name: \"Microsoft Intune\",\n        linkURL: \"https://bitwarden.com/help/deploy-browser-extensions-with-intune/\",\n        image: \"../../../../../../../images/integrations/logo-microsoft-intune-color.svg\",\n        type: IntegrationType.DEVICE,\n      },\n    ];\n  }\n\n  get IntegrationType(): typeof IntegrationType {\n    return IntegrationType;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { ChangeDetectorRef, Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport {\n  catchError,\n  combineLatest,\n  concatMap,\n  from,\n  map,\n  Observable,\n  of,\n  shareReplay,\n  Subject,\n  takeUntil,\n} from \"rxjs\";\n\nimport {\n  CollectionAdminService,\n  CollectionAdminView,\n  OrganizationUserApiService,\n} from \"@bitwarden/admin-console/common\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport { DialogService, ToastService } from \"@bitwarden/components\";\n\nimport { InternalGroupApiService as GroupService } from \"../core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  convertToPermission,\n  convertToSelectionView,\n  PermissionMode,\n} from \"../shared/components/access-selector\";\n\nimport { AddEditGroupDetail } from \"./../core/views/add-edit-group-detail\";\n\n/**\n * Indices for the available tabs in the dialog\n */\nexport enum GroupAddEditTabType {\n  Info = 0,\n  Members = 1,\n  Collections = 2,\n}\n\nexport interface GroupAddEditDialogParams {\n  /**\n   * ID of the organization the group belongs to\n   */\n  organizationId: string;\n\n  /**\n   * Optional ID of the group being modified\n   */\n  groupId?: string;\n\n  /**\n   * Tab to open when the dialog is open.\n   * Defaults to Group Info\n   */\n  initialTab?: GroupAddEditTabType;\n}\n\nexport enum GroupAddEditDialogResultType {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n  Deleted = \"deleted\",\n}\n\n/**\n * Strongly typed helper to open a groupAddEditDialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Configuration for the dialog\n */\nexport const openGroupAddEditDialog = (\n  dialogService: DialogService,\n  config: DialogConfig<GroupAddEditDialogParams>,\n) => {\n  return dialogService.open<GroupAddEditDialogResultType, GroupAddEditDialogParams>(\n    GroupAddEditComponent,\n    config,\n  );\n};\n\n@Component({\n  selector: \"app-group-add-edit\",\n  templateUrl: \"group-add-edit.component.html\",\n})\nexport class GroupAddEditComponent implements OnInit, OnDestroy {\n  private organization$ = this.organizationService\n    .get$(this.organizationId)\n    .pipe(shareReplay({ refCount: true }));\n\n  protected PermissionMode = PermissionMode;\n  protected ResultType = GroupAddEditDialogResultType;\n\n  tabIndex: GroupAddEditTabType;\n  loading = true;\n  title: string;\n  collections: AccessItemView[] = [];\n  members: Array<AccessItemView & { userId: UserId }> = [];\n  group: AddEditGroupDetail;\n\n  groupForm = this.formBuilder.group({\n    name: [\"\", [Validators.required, Validators.maxLength(100)]],\n    externalId: this.formBuilder.control({ value: \"\", disabled: true }),\n    members: [[] as AccessItemValue[]],\n    collections: [[] as AccessItemValue[]],\n  });\n\n  get groupId(): string | undefined {\n    return this.params.groupId;\n  }\n\n  get organizationId(): string {\n    return this.params.organizationId;\n  }\n\n  protected get editMode(): boolean {\n    return this.groupId != null;\n  }\n\n  private destroy$ = new Subject<void>();\n\n  private orgCollections$ = from(this.collectionAdminService.getAll(this.organizationId)).pipe(\n    shareReplay({ refCount: true, bufferSize: 1 }),\n  );\n\n  private get orgMembers$(): Observable<Array<AccessItemView & { userId: UserId }>> {\n    return from(this.organizationUserApiService.getAllMiniUserDetails(this.organizationId)).pipe(\n      map((response) =>\n        response.data.map((m) => ({\n          id: m.id,\n          type: AccessItemType.Member,\n          email: m.email,\n          role: m.type,\n          listName: m.name?.length > 0 ? `${m.name} (${m.email})` : m.email,\n          labelName: m.name || m.email,\n          status: m.status,\n          userId: m.userId as UserId,\n        })),\n      ),\n    );\n  }\n\n  private groupDetails$: Observable<AddEditGroupDetail | undefined> = of(this.editMode).pipe(\n    concatMap((editMode) => {\n      if (!editMode) {\n        return of(undefined);\n      }\n\n      return combineLatest([\n        this.groupService.get(this.organizationId, this.groupId),\n        this.apiService.getGroupUsers(this.organizationId, this.groupId),\n      ]).pipe(\n        map(([groupView, users]): AddEditGroupDetail => {\n          return {\n            ...groupView,\n            members: users,\n          };\n        }),\n        catchError((e: unknown) => {\n          if (e instanceof ErrorResponse) {\n            this.logService.error(e.message);\n          } else {\n            this.logService.error(e.toString());\n          }\n          return of(undefined);\n        }),\n      );\n    }),\n    shareReplay({ refCount: true, bufferSize: 1 }),\n  );\n\n  protected allowAdminAccessToAllCollectionItems$ = this.organization$.pipe(\n    map((organization) => {\n      return organization.allowAdminAccessToAllCollectionItems;\n    }),\n  );\n\n  protected canAssignAccessToAnyCollection$ = combineLatest([\n    this.organization$,\n    this.allowAdminAccessToAllCollectionItems$,\n  ]).pipe(\n    map(\n      ([org, allowAdminAccessToAllCollectionItems]) =>\n        org.canEditAnyCollection ||\n        // Manage Groups custom permission cannot edit any collection but they can assign access from this dialog\n        // if permitted by collection management settings\n        (org.permissions.manageGroups && allowAdminAccessToAllCollectionItems),\n    ),\n  );\n\n  protected cannotAddSelfToGroup$ = combineLatest([\n    this.allowAdminAccessToAllCollectionItems$,\n    this.groupDetails$,\n  ]).pipe(map(([allowAdminAccess, groupDetails]) => !allowAdminAccess && groupDetails != null));\n\n  constructor(\n    @Inject(DIALOG_DATA) private params: GroupAddEditDialogParams,\n    private dialogRef: DialogRef<GroupAddEditDialogResultType>,\n    private apiService: ApiService,\n    private organizationUserApiService: OrganizationUserApiService,\n    private groupService: GroupService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private logService: LogService,\n    private formBuilder: FormBuilder,\n    private changeDetectorRef: ChangeDetectorRef,\n    private dialogService: DialogService,\n    private organizationService: OrganizationService,\n    private accountService: AccountService,\n    private collectionAdminService: CollectionAdminService,\n    private toastService: ToastService,\n  ) {\n    this.tabIndex = params.initialTab ?? GroupAddEditTabType.Info;\n  }\n\n  ngOnInit() {\n    this.loading = true;\n    this.title = this.i18nService.t(this.editMode ? \"editGroup\" : \"newGroup\");\n\n    combineLatest([\n      this.orgCollections$,\n      this.orgMembers$,\n      this.groupDetails$,\n      this.cannotAddSelfToGroup$,\n      this.accountService.activeAccount$,\n      this.organization$,\n    ])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        ([collections, members, group, restrictGroupAccess, activeAccount, organization]) => {\n          this.members = members;\n          this.group = group;\n          this.collections = mapToAccessItemViews(collections, organization, group);\n\n          if (this.group != undefined) {\n            // Must detect changes so that AccessSelector @Inputs() are aware of the latest\n            // collections/members set above, otherwise no selected values will be patched below\n            this.changeDetectorRef.detectChanges();\n\n            this.groupForm.patchValue({\n              name: this.group.name,\n              externalId: this.group.externalId,\n              members: this.group.members.map((m) => ({\n                id: m,\n                type: AccessItemType.Member,\n              })),\n              collections: mapToAccessSelections(group, this.collections),\n            });\n          }\n\n          // If the current user is not already in the group and cannot add themselves, remove them from the list\n          if (restrictGroupAccess) {\n            // organizationUserId may be null if accessing via a provider\n            const organizationUserId = this.members.find((m) => m.userId === activeAccount.id)?.id;\n            const isAlreadyInGroup = this.groupForm.value.members.some(\n              (m) => m.id === organizationUserId,\n            );\n\n            if (organizationUserId != null && !isAlreadyInGroup) {\n              this.members = this.members.filter((m) => m.id !== organizationUserId);\n            }\n          }\n\n          this.loading = false;\n        },\n      );\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.groupForm.markAllAsTouched();\n\n    if (this.groupForm.invalid) {\n      if (this.tabIndex !== GroupAddEditTabType.Info) {\n        this.toastService.showToast({\n          variant: \"error\",\n          title: null,\n          message: this.i18nService.t(\n            \"fieldOnTabRequiresAttention\",\n            this.i18nService.t(\"groupInfo\"),\n          ),\n        });\n      }\n      return;\n    }\n\n    const formValue = this.groupForm.value;\n\n    const groupView: AddEditGroupDetail = {\n      id: this.groupId,\n      organizationId: this.organizationId,\n      name: formValue.name,\n      members: formValue.members?.map((m) => m.id) ?? [],\n      collections: formValue.collections.map((c) => convertToSelectionView(c)),\n      externalId: formValue.externalId,\n    };\n\n    await this.groupService.save(groupView);\n\n    this.toastService.showToast({\n      variant: \"success\",\n      title: null,\n      message: this.i18nService.t(\n        this.editMode ? \"editedGroupId\" : \"createdGroupId\",\n        formValue.name,\n      ),\n    });\n\n    this.dialogRef.close(GroupAddEditDialogResultType.Saved);\n  };\n\n  delete = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: this.group.name,\n      content: { key: \"deleteGroupConfirmation\" },\n      type: \"warning\",\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    await this.groupService.delete(this.organizationId, this.groupId);\n\n    this.toastService.showToast({\n      variant: \"success\",\n      title: null,\n      message: this.i18nService.t(\"deletedGroupId\", this.group.name),\n    });\n    this.dialogRef.close(GroupAddEditDialogResultType.Deleted);\n  };\n}\n\n/**\n * Maps the group's current collection access to AccessItemValues to populate the access-selector's FormControl\n */\nfunction mapToAccessSelections(\n  group: AddEditGroupDetail,\n  items: AccessItemView[],\n): AccessItemValue[] {\n  return (\n    group.collections\n      // The FormControl value only represents editable collection access - exclude readonly access selections\n      .filter((selection) => !items.find((item) => item.id == selection.id).readonly)\n      .map((gc) => ({\n        id: gc.id,\n        type: AccessItemType.Collection,\n        permission: convertToPermission(gc),\n      }))\n  );\n}\n\n/**\n * Maps the organization's collections to AccessItemViews to populate the access-selector's multi-select\n */\nfunction mapToAccessItemViews(\n  collections: CollectionAdminView[],\n  organization: Organization,\n  group?: AddEditGroupDetail,\n): AccessItemView[] {\n  return (\n    collections\n      .map<AccessItemView>((c) => {\n        const accessSelection = group?.collections.find((access) => access.id == c.id) ?? undefined;\n        return {\n          id: c.id,\n          type: AccessItemType.Collection,\n          labelName: c.name,\n          listName: c.name,\n          readonly: !c.canEditGroupAccess(organization),\n          readonlyPermission: accessSelection ? convertToPermission(accessSelection) : undefined,\n        };\n      })\n      // Remove any collection views that are not already assigned and that we don't have permissions to assign access to\n      .filter((item) => !item.readonly || group?.collections.some((access) => access.id == item.id))\n  );\n}\n", "<form [formGroup]=\"groupForm\" [bitSubmit]=\"submit\">\n  <bit-dialog [disablePadding]=\"!loading\" dialogSize=\"large\">\n    <span bitDialogTitle>\n      {{ title }}\n      <span *ngIf=\"editMode\" class=\"tw-text-sm tw-normal-case tw-text-muted\">{{\n        group?.name\n      }}</span>\n    </span>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\">\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n      </div>\n\n      <bit-tab-group *ngIf=\"!loading\" [(selectedIndex)]=\"tabIndex\">\n        <bit-tab label=\"{{ 'groupInfo' | i18n }}\">\n          <bit-form-field>\n            <bit-label>{{ \"name\" | i18n }}</bit-label>\n            <input bitInput appAutofocus type=\"text\" formControlName=\"name\" />\n            <bit-hint>{{ \"characterMaximum\" | i18n: 100 }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"externalId\" | i18n }}</bit-label>\n            <input bitInput type=\"text\" formControlName=\"externalId\" />\n            <bit-hint>{{ \"externalIdDesc\" | i18n }}</bit-hint>\n          </bit-form-field>\n        </bit-tab>\n\n        <bit-tab label=\"{{ 'members' | i18n }}\">\n          <p>\n            {{ \"editGroupMembersDesc\" | i18n }}\n            <span *ngIf=\"cannotAddSelfToGroup$ | async\">\n              {{ \"restrictedGroupAccessDesc\" | i18n }}\n            </span>\n          </p>\n          <bit-access-selector\n            formControlName=\"members\"\n            [items]=\"members\"\n            [showMemberRoles]=\"true\"\n            [permissionMode]=\"PermissionMode.Hidden\"\n            [columnHeader]=\"'member' | i18n\"\n            [selectorLabelText]=\"'selectMembers' | i18n\"\n            [emptySelectionText]=\"'noMembersAdded' | i18n\"\n          ></bit-access-selector>\n        </bit-tab>\n\n        <bit-tab label=\"{{ 'collections' | i18n }}\">\n          <p>\n            {{ \"editGroupCollectionsDesc\" | i18n }}\n            <span *ngIf=\"!(canAssignAccessToAnyCollection$ | async)\">\n              {{ \"restrictedCollectionAssignmentDesc\" | i18n }}\n            </span>\n          </p>\n          <bit-access-selector\n            formControlName=\"collections\"\n            [items]=\"collections\"\n            [permissionMode]=\"PermissionMode.Edit\"\n            [columnHeader]=\"'collection' | i18n\"\n            [selectorLabelText]=\"'selectCollections' | i18n\"\n            [emptySelectionText]=\"'noCollectionsAdded' | i18n\"\n          ></bit-access-selector>\n        </bit-tab>\n      </bit-tab-group>\n    </div>\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" bitFormButton type=\"submit\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button bitButton buttonType=\"secondary\" type=\"button\" [bitDialogClose]=\"ResultType.Canceled\">\n        {{ \"cancel\" | i18n }}\n      </button>\n      <button\n        class=\"tw-ml-auto\"\n        type=\"button\"\n        buttonType=\"danger\"\n        bitIconButton=\"bwi-trash\"\n        bitFormButton\n        [bitAction]=\"delete\"\n        [appA11yTitle]=\"'delete' | i18n\"\n      ></button>\n    </ng-container>\n  </bit-dialog>\n</form>\n", "<app-header>\n  <bit-search\n    [placeholder]=\"'searchGroups' | i18n\"\n    [formControl]=\"searchControl\"\n    class=\"tw-w-80\"\n  ></bit-search>\n  <button bitButton type=\"button\" buttonType=\"primary\" (click)=\"add()\">\n    <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n    {{ \"newGroup\" | i18n }}\n  </button>\n</app-header>\n\n<ng-container *ngIf=\"loading\">\n  <i\n    class=\"bwi bwi-spinner bwi-spin text-muted\"\n    title=\"{{ 'loading' | i18n }}\"\n    aria-hidden=\"true\"\n  ></i>\n  <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n</ng-container>\n<ng-container *ngIf=\"!loading\">\n  <p *ngIf=\"!dataSource.filteredData.length\">{{ \"noGroupsInList\" | i18n }}</p>\n  <!-- The padding on the bottom of the cdk-virtual-scroll-viewport element is required to prevent table row content\n  from overflowing the <main> element. -->\n  <cdk-virtual-scroll-viewport scrollWindow [itemSize]=\"rowHeight\" class=\"tw-pb-8\">\n    <bit-table *ngIf=\"dataSource.filteredData.length\" [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell class=\"tw-w-20\">\n            <input\n              type=\"checkbox\"\n              bitCheckbox\n              class=\"tw-mr-2\"\n              (change)=\"toggleAllVisible($event)\"\n              id=\"selectAll\"\n            />\n            <label class=\"tw-mb-0 !tw-font-bold !tw-text-muted\" for=\"selectAll\">{{\n              \"all\" | i18n\n            }}</label>\n          </th>\n          <th bitCell bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"collections\" | i18n }}</th>\n          <th bitCell class=\"tw-w-10\">\n            <button\n              [bitMenuTriggerFor]=\"headerMenu\"\n              type=\"button\"\n              bitIconButton=\"bwi-ellipsis-v\"\n              size=\"small\"\n              appA11yTitle=\"{{ 'options' | i18n }}\"\n            ></button>\n\n            <bit-menu #headerMenu>\n              <button type=\"button\" bitMenuItem (click)=\"deleteAllSelected()\">\n                <span class=\"tw-text-danger\"\n                  ><i aria-hidden=\"true\" class=\"bwi bwi-trash\"></i> {{ \"delete\" | i18n }}</span\n                >\n              </button>\n            </bit-menu>\n          </th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *cdkVirtualFor=\"let g of rows$\" [ngClass]=\"rowHeightClass\">\n          <td bitCell (click)=\"check(g)\" class=\"tw-cursor-pointer\">\n            <input type=\"checkbox\" bitCheckbox [(ngModel)]=\"g.checked\" />\n          </td>\n          <td bitCell class=\"tw-cursor-pointer tw-font-bold\" (click)=\"edit(g)\">\n            <button type=\"button\" bitLink>\n              {{ g.details.name }}\n            </button>\n          </td>\n          <td bitCell (click)=\"edit(g, ModalTabType.Collections)\" class=\"tw-cursor-pointer\">\n            <bit-badge-list\n              [items]=\"g.collectionNames\"\n              [maxItems]=\"3\"\n              variant=\"secondary\"\n            ></bit-badge-list>\n          </td>\n          <td bitCell>\n            <button\n              [bitMenuTriggerFor]=\"rowMenu\"\n              type=\"button\"\n              bitIconButton=\"bwi-ellipsis-v\"\n              size=\"small\"\n              appA11yTitle=\"{{ 'options' | i18n }}\"\n            ></button>\n\n            <bit-menu #rowMenu>\n              <button type=\"button\" bitMenuItem (click)=\"edit(g)\">\n                <i aria-hidden=\"true\" class=\"bwi bwi-pencil-square\"></i> {{ \"editInfo\" | i18n }}\n              </button>\n              <button type=\"button\" bitMenuItem (click)=\"edit(g, ModalTabType.Members)\">\n                <i aria-hidden=\"true\" class=\"bwi bwi-user\"></i> {{ \"members\" | i18n }}\n              </button>\n              <button type=\"button\" bitMenuItem (click)=\"edit(g, ModalTabType.Collections)\">\n                <i aria-hidden=\"true\" class=\"bwi bwi-collection\"></i> {{ \"collections\" | i18n }}\n              </button>\n              <button type=\"button\" bitMenuItem (click)=\"delete(g)\">\n                <span class=\"tw-text-danger\"\n                  ><i aria-hidden=\"true\" class=\"bwi bwi-trash\"></i> {{ \"delete\" | i18n }}</span\n                >\n              </button>\n            </bit-menu>\n          </td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </cdk-virtual-scroll-viewport>\n</ng-container>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component } from \"@angular/core\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FormControl } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concatMap,\n  from,\n  lastValueFrom,\n  map,\n  switchMap,\n  tap,\n} from \"rxjs\";\nimport { debounceTime, first } from \"rxjs/operators\";\n\nimport {\n  CollectionService,\n  CollectionData,\n  Collection,\n  CollectionDetailsResponse,\n  CollectionResponse,\n  CollectionView,\n} from \"@bitwarden/admin-console/common\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { DialogService, TableDataSource, ToastService } from \"@bitwarden/components\";\n\nimport { GroupDetailsView, InternalGroupApiService as GroupService } from \"../core\";\n\nimport {\n  GroupAddEditDialogResultType,\n  GroupAddEditTabType,\n  openGroupAddEditDialog,\n} from \"./group-add-edit.component\";\n\ntype GroupDetailsRow = {\n  /**\n   * Details used for displaying group information\n   */\n  details: GroupDetailsView;\n\n  /**\n   * True if the group is selected in the table\n   */\n  checked?: boolean;\n\n  /**\n   * A list of collection names the group has access to\n   */\n  collectionNames?: string[];\n};\n\n/**\n * Custom filter predicate that filters the groups table by id and name only.\n * This is required because the default implementation searches by all properties, which can unintentionally match\n * with members' names (who are assigned to the group) or collection names (which the group has access to).\n */\nconst groupsFilter = (filter: string) => {\n  filter ??= \"\";\n  const transformedFilter = filter.trim().toLowerCase();\n  return (data: GroupDetailsRow) => {\n    const group = data.details;\n\n    return (\n      group.id.toLowerCase().indexOf(transformedFilter) != -1 ||\n      group.name.toLowerCase().indexOf(transformedFilter) != -1\n    );\n  };\n};\n\n@Component({\n  templateUrl: \"groups.component.html\",\n})\nexport class GroupsComponent {\n  loading = true;\n  organizationId: string;\n\n  protected dataSource = new TableDataSource<GroupDetailsRow>();\n  protected searchControl = new FormControl(\"\");\n\n  // Fixed sizes used for cdkVirtualScroll\n  protected rowHeight = 52;\n  protected rowHeightClass = `tw-h-[52px]`;\n\n  protected ModalTabType = GroupAddEditTabType;\n  private refreshGroups$ = new BehaviorSubject<void>(null);\n\n  constructor(\n    private apiService: ApiService,\n    private groupService: GroupService,\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private dialogService: DialogService,\n    private logService: LogService,\n    private collectionService: CollectionService,\n    private toastService: ToastService,\n  ) {\n    this.route.params\n      .pipe(\n        tap((params) => (this.organizationId = params.organizationId)),\n        switchMap(() =>\n          combineLatest([\n            // collectionMap\n            from(this.apiService.getCollections(this.organizationId)).pipe(\n              concatMap((response) => this.toCollectionMap(response)),\n            ),\n            // groups\n            this.refreshGroups$.pipe(\n              switchMap(() => this.groupService.getAllDetails(this.organizationId)),\n            ),\n          ]),\n        ),\n        map(([collectionMap, groups]) => {\n          return groups.map<GroupDetailsRow>((g) => ({\n            id: g.id,\n            name: g.name,\n            details: g,\n            checked: false,\n            collectionNames: g.collections\n              .map((c) => collectionMap[c.id]?.name)\n              .sort(this.i18nService.collator?.compare),\n          }));\n        }),\n        takeUntilDestroyed(),\n      )\n      .subscribe((groups) => {\n        this.dataSource.data = groups;\n        this.loading = false;\n      });\n\n    // Connect the search input to the table dataSource filter input\n    this.searchControl.valueChanges\n      .pipe(debounceTime(200), takeUntilDestroyed())\n      .subscribe((v) => (this.dataSource.filter = groupsFilter(v)));\n\n    this.route.queryParams.pipe(first(), takeUntilDestroyed()).subscribe((qParams) => {\n      this.searchControl.setValue(qParams.search);\n    });\n  }\n\n  async edit(\n    group: GroupDetailsRow,\n    startingTabIndex: GroupAddEditTabType = GroupAddEditTabType.Info,\n  ) {\n    const dialogRef = openGroupAddEditDialog(this.dialogService, {\n      data: {\n        initialTab: startingTabIndex,\n        organizationId: this.organizationId,\n        groupId: group != null ? group.details.id : null,\n      },\n    });\n\n    const result = await lastValueFrom(dialogRef.closed);\n\n    if (result == GroupAddEditDialogResultType.Saved) {\n      this.refreshGroups$.next();\n    } else if (result == GroupAddEditDialogResultType.Deleted) {\n      this.removeGroup(group);\n    }\n  }\n\n  async add() {\n    await this.edit(null);\n  }\n\n  async delete(groupRow: GroupDetailsRow) {\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: groupRow.details.name,\n      content: { key: \"deleteGroupConfirmation\" },\n      type: \"warning\",\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.groupService.delete(this.organizationId, groupRow.details.id);\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(\"deletedGroupId\", groupRow.details.name),\n      });\n      this.removeGroup(groupRow);\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async deleteAllSelected() {\n    const groupsToDelete = this.dataSource.data.filter((g) => g.checked);\n\n    if (groupsToDelete.length == 0) {\n      return;\n    }\n\n    const deleteMessage = groupsToDelete.map((g) => g.details.name).join(\", \");\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: {\n        key: \"deleteMultipleGroupsConfirmation\",\n        placeholders: [groupsToDelete.length.toString()],\n      },\n      content: deleteMessage,\n      type: \"warning\",\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.groupService.deleteMany(\n        this.organizationId,\n        groupsToDelete.map((g) => g.details.id),\n      );\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(\"deletedManyGroups\", groupsToDelete.length.toString()),\n      });\n\n      groupsToDelete.forEach((g) => this.removeGroup(g));\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  check(groupRow: GroupDetailsRow) {\n    groupRow.checked = !groupRow.checked;\n  }\n\n  toggleAllVisible(event: Event) {\n    this.dataSource.filteredData.forEach(\n      (g) => (g.checked = (event.target as HTMLInputElement).checked),\n    );\n  }\n\n  private removeGroup(groupRow: GroupDetailsRow) {\n    // Assign a new array to dataSource.data to trigger the setters and update the table\n    this.dataSource.data = this.dataSource.data.filter((g) => g !== groupRow);\n  }\n\n  private async toCollectionMap(response: ListResponse<CollectionResponse>) {\n    const collections = response.data.map(\n      (r) => new Collection(new CollectionData(r as CollectionDetailsResponse)),\n    );\n    const decryptedCollections = await this.collectionService.decryptMany(collections);\n\n    // Convert to an object using collection Ids as keys for faster name lookups\n    const collectionMap: Record<string, CollectionView> = {};\n    decryptedCollections.forEach((c) => (collectionMap[c.id] = c));\n\n    return collectionMap;\n  }\n}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { authGuard } from \"@bitwarden/angular/auth/guards\";\nimport { canAccessFeature } from \"@bitwarden/angular/platform/guard/feature-flag.guard\";\nimport {\n  canAccessOrgAdmin,\n  canAccessGroupsTab,\n  canAccessMembersTab,\n  canAccessVaultTab,\n  canAccessReportingTab,\n  canAccessSettingsTab,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\n\nimport { organizationPermissionsGuard } from \"../../admin-console/organizations/guards/org-permissions.guard\";\nimport { organizationRedirectGuard } from \"../../admin-console/organizations/guards/org-redirect.guard\";\nimport { OrganizationLayoutComponent } from \"../../admin-console/organizations/layouts/organization-layout.component\";\nimport { deepLinkGuard } from \"../../auth/guards/deep-link.guard\";\nimport { VaultModule } from \"../../vault/org-vault/vault.module\";\n\nimport { isEnterpriseOrgGuard } from \"./guards/is-enterprise-org.guard\";\nimport { AdminConsoleIntegrationsComponent } from \"./integrations/integrations.component\";\nimport { GroupsComponent } from \"./manage/groups.component\";\n\nconst routes: Routes = [\n  {\n    path: \":organizationId\",\n    component: OrganizationLayoutComponent,\n    canActivate: [deepLinkGuard(), authGuard, organizationPermissionsGuard(canAccessOrgAdmin)],\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        canActivate: [organizationRedirectGuard(getOrganizationRoute)],\n        children: [], // This is required to make the auto redirect work, },\n      },\n      {\n        path: \"vault\",\n        loadChildren: () => VaultModule,\n      },\n      {\n        path: \"integrations\",\n        canActivate: [\n          canAccessFeature(FeatureFlag.PM14505AdminConsoleIntegrationPage),\n          isEnterpriseOrgGuard(false),\n          organizationPermissionsGuard(canAccessIntegrations),\n        ],\n        component: AdminConsoleIntegrationsComponent,\n        data: {\n          titleId: \"integrations\",\n        },\n      },\n      {\n        path: \"settings\",\n        loadChildren: () =>\n          import(\"./settings/organization-settings.module\").then(\n            (m) => m.OrganizationSettingsModule,\n          ),\n      },\n      {\n        path: \"members\",\n        loadChildren: () => import(\"./members\").then((m) => m.MembersModule),\n      },\n      {\n        component: GroupsComponent,\n        path: \"groups\",\n        canActivate: [organizationPermissionsGuard(canAccessGroupsTab)],\n        data: {\n          titleId: \"groups\",\n        },\n      },\n      {\n        path: \"reporting\",\n        loadChildren: () =>\n          import(\"../organizations/reporting/organization-reporting.module\").then(\n            (m) => m.OrganizationReportingModule,\n          ),\n      },\n      {\n        path: \"billing\",\n        loadChildren: () =>\n          import(\"../../billing/organizations/organization-billing.module\").then(\n            (m) => m.OrganizationBillingModule,\n          ),\n      },\n    ],\n  },\n];\n\nfunction getOrganizationRoute(organization: Organization): string {\n  if (canAccessVaultTab(organization)) {\n    return \"vault\";\n  }\n  if (canAccessMembersTab(organization)) {\n    return \"members\";\n  }\n  if (canAccessGroupsTab(organization)) {\n    return \"groups\";\n  }\n  if (canAccessReportingTab(organization)) {\n    return \"reporting\";\n  }\n  if (canAccessSettingsTab(organization)) {\n    return \"settings\";\n  }\n  return undefined;\n}\n\nfunction canAccessIntegrations(organization: Organization) {\n  return organization.canAccessIntegrations;\n}\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OrganizationsRoutingModule {}\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { inject } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n} from \"@angular/router\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { ProductTierType } from \"@bitwarden/common/billing/enums\";\nimport { DialogService } from \"@bitwarden/components\";\n\n/**\n * `CanActivateFn` that checks if the organization matching the id in the URL\n * parameters is of enterprise type. If the organization is not enterprise instructions are\n * provided on how to upgrade into an enterprise organization, and the user is redirected\n * if they have access to upgrade the organization. If the organization is\n * enterprise routing proceeds.\"\n */\nexport function isEnterpriseOrgGuard(showError: boolean = true): CanActivateFn {\n  return async (route: ActivatedRouteSnapshot, _state: RouterStateSnapshot) => {\n    const router = inject(Router);\n    const organizationService = inject(OrganizationService);\n    const dialogService = inject(DialogService);\n\n    const org = await organizationService.get(route.params.organizationId);\n\n    if (org == null) {\n      return router.createUrlTree([\"/\"]);\n    }\n\n    if (org.productTierType != ProductTierType.Enterprise && showError) {\n      // Users without billing permission can't access billing\n      if (!org.canEditSubscription) {\n        await dialogService.openSimpleDialog({\n          title: { key: \"upgradeOrganizationEnterprise\" },\n          content: { key: \"onlyAvailableForEnterpriseOrganization\" },\n          acceptButtonText: { key: \"ok\" },\n          cancelButtonText: null,\n          type: \"info\",\n        });\n        return false;\n      } else {\n        const upgradeConfirmed = await dialogService.openSimpleDialog({\n          title: { key: \"upgradeOrganizationEnterprise\" },\n          content: { key: \"onlyAvailableForEnterpriseOrganization\" },\n          acceptButtonText: { key: \"upgradeOrganization\" },\n          type: \"info\",\n          icon: \"bwi-arrow-circle-up\",\n        });\n        if (upgradeConfirmed) {\n          await router.navigate([\"organizations\", org.id, \"billing\", \"subscription\"], {\n            queryParams: { upgrade: true, productTierType: ProductTierType.Enterprise },\n          });\n        }\n      }\n    }\n\n    return org.productTierType == ProductTierType.Enterprise;\n  };\n}\n", "import { ScrollingModule } from \"@angular/cdk/scrolling\";\nimport { NgModule } from \"@angular/core\";\n\nimport { LooseComponentsModule } from \"../../shared\";\n\nimport { CoreOrganizationModule } from \"./core\";\nimport { GroupAddEditComponent } from \"./manage/group-add-edit.component\";\nimport { GroupsComponent } from \"./manage/groups.component\";\nimport { OrganizationsRoutingModule } from \"./organization-routing.module\";\nimport { SharedOrganizationModule } from \"./shared\";\nimport { AccessSelectorModule } from \"./shared/components/access-selector\";\n\n@NgModule({\n  imports: [\n    SharedOrganizationModule,\n    AccessSelectorModule,\n    CoreOrganizationModule,\n    OrganizationsRoutingModule,\n    LooseComponentsModule,\n    ScrollingModule,\n  ],\n  declarations: [GroupsComponent, GroupAddEditComponent],\n})\nexport class OrganizationModule {}\n", "import { NgModule } from \"@angular/core\";\n\nimport { SearchModule } from \"@bitwarden/components\";\n\nimport { SharedModule } from \"../../../shared/shared.module\";\n\nimport { AccessSelectorModule } from \"./components/access-selector/access-selector.module\";\n\n@NgModule({\n  imports: [SharedModule, AccessSelectorModule, SearchModule],\n  declarations: [],\n  exports: [SharedModule, AccessSelectorModule, SearchModule],\n})\nexport class SharedOrganizationModule {}\n", "import { EventSystemUser, EventType } from \"../../enums\";\n\nexport class EventView {\n  message: string;\n  humanReadableMessage: string;\n  appIcon: string;\n  appName: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  date: string;\n  ip: string;\n  type: EventType;\n  installationId: string;\n  systemUser: EventSystemUser;\n  serviceAccountId: string;\n\n  constructor(data: Required<EventView>) {\n    this.message = data.message;\n    this.humanReadableMessage = data.humanReadableMessage;\n    this.appIcon = data.appIcon;\n    this.appName = data.appName;\n    this.userId = data.userId;\n    this.userName = data.userName;\n    this.userEmail = data.userEmail;\n    this.date = data.date;\n    this.ip = data.ip;\n    this.type = data.type;\n    this.installationId = data.installationId;\n    this.systemUser = data.systemUser;\n    this.serviceAccountId = data.serviceAccountId;\n  }\n}\n"],
	"names": ["organizationPermissionsGuard", "permissionsCallback", "route", "state", "router", "organizationService", "toastService", "i18nService", "syncService", "getLastSync", "fullSync", "org", "get", "params", "organizationId", "createUrlTree", "isOwner", "enabled", "showToast", "variant", "title", "message", "t", "cipherId", "root", "queryParamMap", "queryParams", "itemId", "id", "organizationRedirectGuard", "customRedirect", "redirectPath", "url", "EntityEventsComponent", "name", "this", "showUser", "constructor", "apiService", "eventService", "platformUtilsService", "userNamePipe", "logService", "organizationUserApiService", "formBuilder", "validationService", "loading", "dataSource", "filterFormGroup", "group", "start", "end", "orgUsersUserIdMap", "Map", "orgUsersIdMap", "loadMoreEvents", "loadEvents", "refreshEvents", "ngOnInit", "defaultDates", "getDefaultDateFilters", "setValue", "load", "getAllMiniUserDetails", "data", "forEach", "u", "transform", "set", "email", "userId", "e", "error", "showError", "clearExisting", "response", "dates", "formatDateFilters", "value", "entity", "providerId", "getEventsProviderUser", "entityId", "continuationToken", "getEventsOrganizationUser", "getEventsCipher", "events", "Promise", "all", "map", "r", "actingUserId", "eventInfo", "getEventInfo", "user", "has", "humanReadableMessage", "appIcon", "appName", "userName", "userEmail", "date", "ip", "ipAddress", "type", "installationId", "systemUser", "serviceAccountId", "length", "concat", "openEntityEventsDialog", "dialogService", "config", "open", "ResellerWarningService", "RENEWAL_WARNING_DAYS", "GRACE_PERIOD_DAYS", "getWarning", "organization", "organizationBillingMetadata", "hasReseller", "shouldShowPastDueWarning", "gracePeriodEnd", "getGracePeriodEndDate", "invoiceDueDate", "providerName", "formatDate", "shouldShowInvoiceWarning", "invoiceCreatedDate", "shouldShowRenewalWarning", "subPeriodEndDate", "hasSubscription", "renewalDate", "Date", "Math", "ceil", "getTime", "now", "hasOpenInvoice", "isSubscriptionUnpaid", "dueDate", "setDate", "getDate", "toLocaleDateString", "month", "day", "year", "editCollection", "deleteCollection", "onSearchTextChanged", "addCollection", "addCipher", "VaultHeaderComponent", "collectionAdminService", "configService", "All", "Unassigned", "onAddCipher", "onAddCollection", "onEditCollection", "onDeleteCollection", "searchTextChanged", "CollectionDialogTabType", "organizations$", "extensionRefreshEnabled", "CipherType", "getFeatureFlag", "ExtensionRefresh", "headerType", "toLowerCase", "collection", "node", "filter", "collectionId", "icon", "undefined", "showBreadcrumbs", "collections", "parent", "push", "slice", "reverse", "treeNode", "showFreeOrgUpgradeDialog", "orgUpgradeSimpleDialogOpts", "content", "canEditSubscription", "maxCollections", "acceptButtonText", "cancelButtonText", "simpleDialog", "openSimpleDialogRef", "firstValueFrom", "closed", "then", "result", "navigate", "upgrade", "canEditCollection", "canEdit", "cipherType", "emit", "productTierType", "Free", "getAll", "tab", "readonly", "canDeleteCollection", "canDelete", "canViewCollectionInfo", "canCreateCollection", "canCreateNewCollections", "canCreateCipher", "isProviderUser", "isMember", "searchText", "M", "BulkCollectionsDialogResult", "BulkCollectionsDialogComponent", "dialogRef", "groupService", "PermissionMode", "formGroup", "access", "accessItems", "destroy$", "Subject", "submit", "users", "controls", "v", "Member", "groups", "Group", "bulkAssignAccess", "c", "close", "Saved", "numCollections", "organization$", "get$", "groups$", "pipe", "switchMap", "useGroups", "of", "combineLatest", "takeUntil", "subscribe", "ngOnDestroy", "next", "complete", "viewCollectionClicked", "CollectionAccessRestrictedComponent", "collectionDialogTabType", "AdminConsoleCipherFormConfigService", "policyService", "routedVaultFilterService", "cipherService", "allowPersonalOwnership$", "policyAppliesToActiveUser$", "PersonalOwnership", "p", "organizationId$", "filter$", "allOrganizations$", "orgs", "o", "status", "Confirmed", "orgId", "find", "allCollections$", "buildConfig", "mode", "allowPersonalOwnership", "allOrganizations", "allCollections", "organizations", "allowPersonalOwnershipOnlyForClone", "cipher", "getCipher", "Login", "admin", "canEditAllCiphers", "originalCipher", "folders", "hideIndividualVaultFields", "isAdminConsole", "localCipher", "getCipherFromAdminApi", "cipherResponse", "getCipherAdmin", "edit", "viewPassword", "cipherData", "VaultFilterService", "folderService", "stateProvider", "collectionService", "accountService", "super", "_collections", "ReplaySubject", "filteredCollections$", "asObservable", "collectionTree$", "buildCollectionTree", "reloadCollections", "VaultFilterModule", "provide", "useClass", "VaultFilterComponent", "_organization", "vaultFilterService", "setOrganizationFilter", "billingApiService", "filters", "buildAllFilters", "activeFilter", "selectedCipherTypeNode", "resetFilter", "selectedCollectionNode", "getDefaultFilter", "isLoaded", "ngOnChanges", "changes", "removeCollapsibleCollection", "collapsedNodes", "collapsedFilterNodes$", "delete", "setCollapsedFilterNodes", "addCollectionFilter", "data$", "buildTypeTree", "header", "showHeader", "isSelectable", "action", "applyCollectionFilter", "builderFilter", "typeFilter", "addTypeFilter", "collectionFilter", "trashFilter", "addTrashFilter", "navigateToPaymentMethod", "filterSearchText", "addAccessToggle", "BroadcasterSubscriptionId", "AddAccessStatusType", "VaultComponent", "hideVaultFilters", "routedVaultFilterBridgeService", "changeDetectorRef", "modalService", "messagingService", "broadcasterService", "ngZone", "passwordRepromptService", "searchService", "searchPipe", "eventCollectionService", "totpService", "cipherFormConfigService", "organizationApiService", "trialFlowService", "organizationBillingService", "resellerWarningService", "trashCleanupWarning", "showAddAccessToggle", "noItemIcon", "performingInitialLoad", "refreshing", "processingEvent", "hasSubscription$", "BehaviorSubject", "prevCipherId", "searchText$", "refresh$", "addAccessStatus$", "unpaidSubscriptionDialog$", "from", "getOrganizationBillingMetadata", "tap", "organizationMetaData", "handleUnpaidSubscriptionDialog", "resellerManagedOrgAlert", "ResellerManagedOrgAlert", "isSelfHost", "distinctUntilChanged", "shareReplay", "refCount", "bufferSize", "firstSetup$", "first", "canEditAnyCollection", "run", "command", "successfully", "refresh", "detectChanges", "activeFilter$", "debounceTime", "search", "isNullOrEmpty", "queryParamsHandling", "replaceUrl", "currentSearchText$", "allCollectionsWithoutUnassigned$", "editableCollections$", "assigned", "readOnly", "noneCollection", "allGroups$", "allCiphers$", "ciphers", "getAllFromApiForOrganization", "getManyFromApiForOrganization", "indexCiphers", "allCipherMap$", "Object", "fromEntries", "nestedCollections$", "collections$", "concatMap", "addAccessStatus", "collectionsToReturn", "selectedCollection", "getTreeNodeObjectFromList", "children", "isSearchable", "allowAdminAccessToAllCollectionItems", "canEditUnmanagedCollections", "some", "unmanaged", "selectedCollection$", "showCollectionAccessRestricted$", "canEditUnassignedCiphers", "ciphers$", "showCollectionAccessRestricted", "filterFunction", "searchCiphers", "vaultItemDialogRef", "qParams", "allCiphersMap", "getCipherIdFromParams", "cipherIds", "viewCipherById", "editCipherId", "viewEvents", "useEvents", "freeTrial$", "canViewBillingHistory", "getSubscription", "getPaymentSource", "sub", "paymentSource", "checkForOrgsWithUpcomingPaymentIssues", "resellerWarning$", "metadata", "allGroups", "isEmpty", "launchPaymentModalAutomatically", "unsubscribe", "onVaultItemsEvent", "event", "editCipherAttachments", "item", "cloneCipher", "items", "restore", "bulkRestore", "i", "deleteCipher", "bulkDelete", "copy", "field", "Info", "Access", "bulkEditCollectionAccess", "bulkAssignToCollections", "reprompt", "showPasswordPrompt", "go", "maxStorageGb", "send", "Removed", "Uploaded", "addCipherV2", "editCipher", "comp", "collectionIds", "cipherFormConfig", "initialValues", "openVaultItemDialog", "additionalComponentParameters", "editCipherIdV2", "defaultComponentParameters", "onSavedCipher", "modal", "onDeletedCipher", "onRestoredCipher", "childComponent", "openViewRef", "cipherAddEditModalRef", "onClosedPromise", "formConfig", "activeCollectionId", "disableForm", "dialogMode", "V", "isAdminConsoleAction", "lastValueFrom", "Deleted", "login", "hasFido2Credentials", "openSimpleDialog", "key", "cloneMode", "isDeleted", "permissions", "editAnyCollection", "repromptCipher", "asAdmin", "isUnassigned", "restoreWithServer", "showMissingPermissionsError", "editAccessCiphers", "unassignedCiphers", "restoreManyWithServer", "permanent", "deleteCipherWithServer", "clear", "assignedCiphers", "canDeleteCollections", "every", "dialog", "aType", "typeI18nKey", "username", "password", "getCode", "totp", "protectedFields", "includes", "copyToClipboard", "window", "collect", "Cipher_ClientCopiedPassword", "Cipher_ClientCopiedHiddenField", "parentCollectionId", "limitNestedCollections", "initialTab", "isAddAccessCollection", "availableCollections", "activeCollection", "isSingleCipherAdmin", "deleteWithServer", "softDeleteWithServer", "notProtected", "None", "deleted", "relativeTo", "routes", "path", "component", "canActivate", "titleId", "VaultRoutingModule", "forChild", "VaultModule", "IntegrationCardComponent", "themeStateService", "systemTheme$", "destroyed$", "ngAfterViewInit", "selectedTheme$", "theme", "systemTheme", "imageDarkMode", "System", "prefersDarkMode", "Dark", "SolarizedDark", "imageEle", "nativeElement", "src", "image", "showNewBadge", "newBadgeExpiration", "expirationDate", "isNaN", "IntegrationGridComponent", "ariaI18nKey", "tooltipI18nKey", "IntegrationType", "FilterIntegrationsPipe", "integrations", "integration", "AdminConsoleIntegrationsComponent", "integrationsList", "linkURL", "SSO", "SCIM", "BWDC", "EVENT", "DEVICE", "GroupAddEditTabType", "GroupAddEditDialogResultType", "GroupAddEditComponent", "groupId", "editMode", "orgMembers$", "m", "role", "listName", "labelName", "ResultType", "members", "groupForm", "required", "maxLength", "externalId", "control", "disabled", "orgCollections$", "groupDetails$", "getGroupUsers", "groupView", "catchError", "toString", "allowAdminAccessToAllCollectionItems$", "canAssignAccessToAnyCollection$", "manageGroups", "cannotAddSelfToGroup$", "allowAdminAccess", "groupDetails", "markAllAsTouched", "invalid", "tabIndex", "formValue", "save", "activeAccount$", "restrictGroupAccess", "activeAccount", "accessSelection", "Collection", "canEditGroupAccess", "readonlyPermission", "mapToAccessItemViews", "patchValue", "mapToAccessSelections", "organizationUserId", "isAlreadyInGroup", "selection", "gc", "permission", "check", "toggleAllVisible", "deleteAllSelected", "GroupsComponent", "searchControl", "rowHeight", "rowHeightClass", "ModalTabType", "refreshGroups$", "getCollections", "toCollectionMap", "getAllDetails", "collectionMap", "g", "details", "checked", "collectionNames", "sort", "collator", "compare", "valueChanges", "transformedFilter", "trim", "indexOf", "groupsFilter", "startingTabIndex", "removeGroup", "add", "groupRow", "groupsToDelete", "deleteMessage", "join", "placeholders", "deleteMany", "filteredData", "target", "decryptedCollections", "decryptMany", "pathMatch", "loadChildren", "PM14505AdminConsoleIntegrationPage", "_state", "Enterprise", "isEnterpriseOrgGuard", "canAccessIntegrations", "OrganizationSettingsModule", "MembersModule", "OrganizationReportingModule", "OrganizationBillingModule", "OrganizationsRoutingModule", "OrganizationModule", "SharedOrganizationModule", "EventView"],
	"sourceRoot": ""
}