{
	"version": 3,
	"file": "505.6ef417c6186ca430555b.js",
	"mappings": "qxBA0BO,MAAMA,EAKX,WAAAC,CACUC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GATA,KAAAT,eAAAA,EACA,KAAAC,mBAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,WAAAA,EACA,KAAAC,iBAAAA,EACA,KAAAC,WAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,iBAAAA,EAdA,KAAAC,UAAY,IAAI,KAAU,CAClCC,eAAgB,IAAI,KAAY,GAAI,CAAC,KAAWC,aAgBlD,KAAAC,OAAS,IAAY,EAAD,gCAGlB,GAFAC,KAAKJ,UAAUK,gBAEXD,KAAKJ,UAAUM,QACjB,OAGF,MAAMC,QAAmB,OAAeH,KAAKd,eAAekB,gBAG5D,SADyBJ,KAAKX,WAAWgB,WAAWF,EAAWG,IAG7D,MADAN,KAAKV,iBAAiBiB,KAAK,UACrB,IAAIC,MAAM,8DAGlB,MAAMX,EAAiBG,KAAKJ,UAAUa,MAAMZ,eAE5C,UACQG,KAAKR,YAAYkB,UAAS,GAAO,SAEjCV,KAAKb,mBAAmBwB,8BAA8Bd,EAAgBM,GAE5EH,KAAKP,aAAamB,UAAU,CAC1BC,QAAS,UACTC,MAAOd,KAAKZ,YAAY2B,EAAE,cAC1BC,QAAShB,KAAKZ,YAAY2B,EAAE,sBAC5BE,QAAS,OAEXjB,KAAKV,iBAAiBiB,KAAK,SAC7B,CAAE,MAAOW,GAEP,GAAkB,2DAAdA,EAAEF,QAAsE,CAS1E,SAR4BhB,KAAKN,cAAcyB,iBAAiB,CAC9DC,KAAM,UACNN,MAAO,CAAEO,IAAK,oCACdC,QAAS,CAAED,IAAK,0BAChBE,iBAAkB,CAAEF,IAAK,MACzBG,iBAAkB,CAAEH,IAAK,YAOzB,aAHMrB,KAAKL,iBAAiB8B,UAAUtB,EAAWG,UAC3CN,KAAKR,YAAYkB,UAAS,GAAM,cAChCV,KAAKD,SAGf,CAEA,MADAC,KAAKT,WAAWmC,MAAMR,GAChBA,CACR,CACF,GApDG,E,iCAhBQlC,GAAoC,kH,mBAApCA,EAAoC,sxBC1BjD,kBACE,iCACE,mCACE,oCAAsD,S,gBAAkC,QACxF,sCAGE,qCACE,U,iBACA,gBAIG,U,iBAAwB,QAE7B,+BACA,iDAA4B,U,iBAAyC,QAErE,oDACE,+CAAW,U,iBAAyB,QACpC,6CAOA,8CACF,+BACA,4CACE,U,iBACF,QACF,6BACF,2BACF,yBACF,uBACA,gB,MApC8B,+BAAD,sBAG+B,iDAKlD,wFAKG,yCAGuB,0DAGf,0CAWX,+E,gBDPE,IAAc,uFAAqB,iB",
	"sources": ["webpack://@bitwarden/web-vault/./src/app/key-management/migrate-encryption/migrate-legacy-encryption.component.ts", "webpack://@bitwarden/web-vault/./src/app/key-management/migrate-encryption/migrate-legacy-encryption.component.html"],
	"sourcesContent": ["// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { Component } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { FolderApiServiceAbstraction } from \"@bitwarden/common/vault/abstractions/folder/folder-api.service.abstraction\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { DialogService, ToastService } from \"@bitwarden/components\";\nimport { KeyService } from \"@bitwarden/key-management\";\n\nimport { SharedModule } from \"../../shared\";\nimport { UserKeyRotationModule } from \"../key-rotation/user-key-rotation.module\";\nimport { UserKeyRotationService } from \"../key-rotation/user-key-rotation.service\";\n\n// The master key was originally used to encrypt user data, before the user key was introduced.\n// This component is used to migrate from the old encryption scheme to the new one.\n@Component({\n  standalone: true,\n  imports: [SharedModule, UserKeyRotationModule],\n  templateUrl: \"migrate-legacy-encryption.component.html\",\n})\nexport class MigrateFromLegacyEncryptionComponent {\n  protected formGroup = new FormGroup({\n    masterPassword: new FormControl(\"\", [Validators.required]),\n  });\n\n  constructor(\n    private accountService: AccountService,\n    private keyRotationService: UserKeyRotationService,\n    private i18nService: I18nService,\n    private keyService: KeyService,\n    private messagingService: MessagingService,\n    private logService: LogService,\n    private syncService: SyncService,\n    private toastService: ToastService,\n    private dialogService: DialogService,\n    private folderApiService: FolderApiServiceAbstraction,\n  ) {}\n\n  submit = async () => {\n    this.formGroup.markAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const activeUser = await firstValueFrom(this.accountService.activeAccount$);\n\n    const hasUserKey = await this.keyService.hasUserKey(activeUser.id);\n    if (hasUserKey) {\n      this.messagingService.send(\"logout\");\n      throw new Error(\"User key already exists, cannot migrate legacy encryption.\");\n    }\n\n    const masterPassword = this.formGroup.value.masterPassword;\n\n    try {\n      await this.syncService.fullSync(false, true);\n\n      await this.keyRotationService.rotateUserKeyAndEncryptedData(masterPassword, activeUser);\n\n      this.toastService.showToast({\n        variant: \"success\",\n        title: this.i18nService.t(\"keyUpdated\"),\n        message: this.i18nService.t(\"logBackInOthersToo\"),\n        timeout: 15000,\n      });\n      this.messagingService.send(\"logout\");\n    } catch (e) {\n      // If the error is due to missing folders, we can delete all folders and try again\n      if (e.message === \"All existing folders must be included in the rotation.\") {\n        const deleteFolders = await this.dialogService.openSimpleDialog({\n          type: \"warning\",\n          title: { key: \"encryptionKeyUpdateCannotProceed\" },\n          content: { key: \"keyUpdateFoldersFailed\" },\n          acceptButtonText: { key: \"ok\" },\n          cancelButtonText: { key: \"cancel\" },\n        });\n\n        if (deleteFolders) {\n          await this.folderApiService.deleteAll(activeUser.id);\n          await this.syncService.fullSync(true, true);\n          await this.submit();\n          return;\n        }\n      }\n      this.logService.error(e);\n      throw e;\n    }\n  };\n}\n", "<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <div class=\"tw-mt-12 tw-flex tw-justify-center\">\n    <div class=\"tw-max-w-xl\">\n      <h1 bitTypography=\"h1\" class=\"tw-mb-4 tw-text-center\">{{ \"updateEncryptionKey\" | i18n }}</h1>\n      <div\n        class=\"tw-block tw-rounded tw-border tw-border-solid tw-border-secondary-300 tw-bg-background tw-p-8\"\n      >\n        <p>\n          {{ \"updateEncryptionSchemeDesc\" | i18n }}\n          <a\n            href=\"https://bitwarden.com/help/account-encryption-key/#rotate-your-encryption-key\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            >{{ \"learnMore\" | i18n }}</a\n          >\n        </p>\n        <bit-callout type=\"warning\">{{ \"updateEncryptionKeyWarning\" | i18n }}</bit-callout>\n\n        <bit-form-field>\n          <bit-label>{{ \"masterPass\" | i18n }}</bit-label>\n          <input\n            id=\"masterPassword\"\n            bitInput\n            type=\"password\"\n            formControlName=\"masterPassword\"\n            appAutofocus\n          />\n          <button type=\"button\" bitIconButton bitSuffix bitPasswordInputToggle></button>\n        </bit-form-field>\n        <button type=\"submit\" bitButton bitFormButton buttonType=\"primary\" block>\n          {{ \"updateEncryptionKey\" | i18n }}\n        </button>\n      </div>\n    </div>\n  </div>\n</form>\n"],
	"names": ["MigrateFromLegacyEncryptionComponent", "constructor", "accountService", "keyRotationService", "i18nService", "keyService", "messagingService", "logService", "syncService", "toastService", "dialogService", "folderApiService", "formGroup", "masterPassword", "required", "submit", "this", "markAsTouched", "invalid", "activeUser", "activeAccount$", "hasUserKey", "id", "send", "Error", "value", "fullSync", "rotateUserKeyAndEncryptedData", "showToast", "variant", "title", "t", "message", "timeout", "e", "openSimpleDialog", "type", "key", "content", "acceptButtonText", "cancelButtonText", "deleteAll", "error"],
	"sourceRoot": ""
}