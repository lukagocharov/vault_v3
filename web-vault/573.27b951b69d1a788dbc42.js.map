{
	"version": 3,
	"file": "573.27b951b69d1a788dbc42.js",
	"mappings": "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",
	"sources": ["webpack://@bitwarden/web-vault/../../libs/tools/export/vault-export/vault-export-ui/src/enums/encrypted-export-type.enum.ts", "webpack://@bitwarden/web-vault/../../libs/tools/export/vault-export/vault-export-ui/src/components/export-scope-callout.component.html", "webpack://@bitwarden/web-vault/../../libs/tools/export/vault-export/vault-export-ui/src/components/export-scope-callout.component.ts", "webpack://@bitwarden/web-vault/../../libs/tools/export/vault-export/vault-export-ui/src/components/export.component.html", "webpack://@bitwarden/web-vault/../../libs/tools/export/vault-export/vault-export-ui/src/components/export.component.ts"],
	"sourcesContent": ["export enum EncryptedExportType {\n  AccountEncrypted = 0,\n  FileEncrypted = 1,\n}\n", "<ng-container *ngIf=\"show\">\n  <bit-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n: scopeConfig.scopeIdentifier }}\n  </bit-callout>\n</ng-container>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { CommonModule } from \"@angular/common\";\nimport { Component, Input, OnInit } from \"@angular/core\";\nimport { firstValueFrom, map } from \"rxjs\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { CalloutModule } from \"@bitwarden/components\";\n\n@Component({\n  selector: \"tools-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n  standalone: true,\n  imports: [CommonModule, JslibModule, CalloutModule],\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  private _organizationId: string;\n\n  get organizationId(): string {\n    return this._organizationId;\n  }\n\n  @Input() set organizationId(value: string) {\n    this._organizationId = value;\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.getScopeMessage(this._organizationId);\n  }\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected accountService: AccountService,\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!(await this.organizationService.hasOrganizations())) {\n      return;\n    }\n\n    await this.getScopeMessage(this.organizationId);\n    this.show = true;\n  }\n\n  private async getScopeMessage(organizationId: string) {\n    this.scopeConfig =\n      organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDesc\",\n            scopeIdentifier: (await this.organizationService.get(organizationId)).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingIndividualVaultDescription\",\n            scopeIdentifier: await firstValueFrom(\n              this.accountService.activeAccount$.pipe(map((a) => a?.email)),\n            ),\n          };\n  }\n}\n", "<bit-callout type=\"danger\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n  {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n</bit-callout>\n<tools-export-scope-callout\n  [organizationId]=\"organizationId\"\n  *ngIf=\"!disabledByPolicy\"\n></tools-export-scope-callout>\n\n<form [formGroup]=\"exportForm\" [bitSubmit]=\"submit\" id=\"export_form_exportForm\">\n  <ng-container *ngIf=\"organizations$ | async as organizations\">\n    <bit-form-field *ngIf=\"organizations.length > 0\">\n      <bit-label>{{ \"exportFrom\" | i18n }}</bit-label>\n      <bit-select formControlName=\"vaultSelector\">\n        <bit-option [label]=\"'myVault' | i18n\" value=\"myVault\" icon=\"bwi-user\" />\n        <bit-option\n          *ngFor=\"let o of organizations$ | async\"\n          [value]=\"o.id\"\n          [label]=\"o.name\"\n          icon=\"bwi-business\"\n        />\n      </bit-select>\n    </bit-form-field>\n  </ng-container>\n\n  <bit-form-field>\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <bit-select formControlName=\"format\">\n      <bit-option *ngFor=\"let f of formatOptions\" [value]=\"f.value\" [label]=\"f.name\" />\n    </bit-select>\n  </bit-form-field>\n\n  <ng-container *ngIf=\"format === 'encrypted_json'\">\n    <bit-radio-group formControlName=\"fileEncryptionType\" aria-label=\"exportTypeHeading\">\n      <bit-label>{{ \"exportTypeHeading\" | i18n }}</bit-label>\n\n      <bit-radio-button\n        id=\"AccountEncrypted\"\n        name=\"fileEncryptionType\"\n        class=\"tw-block\"\n        [value]=\"encryptedExportType.AccountEncrypted\"\n        checked=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n      >\n        <bit-label>{{ \"accountRestricted\" | i18n }}</bit-label>\n        <bit-hint>{{ \"accountRestrictedOptionDescription\" | i18n }}</bit-hint>\n      </bit-radio-button>\n\n      <bit-radio-button\n        id=\"FileEncrypted\"\n        name=\"fileEncryptionType\"\n        class=\"tw-block\"\n        [value]=\"encryptedExportType.FileEncrypted\"\n        checked=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n      >\n        <bit-label>{{ \"passwordProtected\" | i18n }}</bit-label>\n        <bit-hint>{{ \"passwordProtectedOptionDescription\" | i18n }}</bit-hint>\n      </bit-radio-button>\n    </bit-radio-group>\n\n    <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n      <div class=\"tw-mb-3\">\n        <bit-form-field>\n          <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n          <input\n            bitInput\n            type=\"password\"\n            id=\"filePassword\"\n            formControlName=\"filePassword\"\n            name=\"password\"\n          />\n          <button\n            type=\"button\"\n            bitSuffix\n            bitIconButton\n            bitPasswordInputToggle\n            [(toggled)]=\"showFilePassword\"\n          ></button>\n          <button\n            type=\"button\"\n            bitIconButton=\"bwi-generate\"\n            appStopClick\n            bitSuffix\n            (click)=\"generatePassword()\"\n          ></button>\n          <button\n            type=\"button\"\n            bitIconButton=\"bwi-clone\"\n            [disabled]=\"!filePassword\"\n            appStopClick\n            bitSuffix\n            [appCopyClick]=\"filePassword\"\n            [valueLabel]=\"'password' | i18n\"\n            showToast\n          ></button>\n          <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n        </bit-form-field>\n        <tools-password-strength [password]=\"filePassword\" [showText]=\"true\">\n        </tools-password-strength>\n      </div>\n      <bit-form-field>\n        <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n        <input\n          bitInput\n          type=\"password\"\n          id=\"confirmFilePassword\"\n          formControlName=\"confirmFilePassword\"\n          name=\"confirmFilePassword\"\n        />\n        <button\n          type=\"button\"\n          bitSuffix\n          bitIconButton\n          bitPasswordInputToggle\n          [(toggled)]=\"showFilePassword\"\n        ></button>\n      </bit-form-field>\n    </ng-container>\n  </ng-container>\n</form>\n", "// FIXME: Update this file to be type safe and remove this and next line\n// @ts-strict-ignore\nimport { CommonModule } from \"@angular/common\";\nimport {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from \"@angular/core\";\nimport { ReactiveFormsModule, UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { combineLatest, map, merge, Observable, startWith, Subject, takeUntil } from \"rxjs\";\n\nimport { CollectionService } from \"@bitwarden/admin-console/common\";\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { PasswordStrengthV2Component } from \"@bitwarden/angular/tools/password-strength/password-strength-v2.component\";\nimport { UserVerificationDialogComponent } from \"@bitwarden/auth/angular\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport {\n  AsyncActionsModule,\n  BitSubmitDirective,\n  ButtonModule,\n  CalloutModule,\n  DialogService,\n  FormFieldModule,\n  IconButtonModule,\n  RadioButtonModule,\n  SelectModule,\n  ToastService,\n} from \"@bitwarden/components\";\nimport { PasswordGenerationServiceAbstraction } from \"@bitwarden/generator-legacy\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/vault-export-core\";\n\nimport { EncryptedExportType } from \"../enums/encrypted-export-type.enum\";\n\nimport { ExportScopeCalloutComponent } from \"./export-scope-callout.component\";\n\n@Component({\n  selector: \"tools-export\",\n  templateUrl: \"export.component.html\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    JslibModule,\n    FormFieldModule,\n    AsyncActionsModule,\n    ButtonModule,\n    IconButtonModule,\n    SelectModule,\n    CalloutModule,\n    RadioButtonModule,\n    ExportScopeCalloutComponent,\n    UserVerificationDialogComponent,\n    PasswordStrengthV2Component,\n  ],\n})\nexport class ExportComponent implements OnInit, OnDestroy, AfterViewInit {\n  private _organizationId: string;\n\n  get organizationId(): string {\n    return this._organizationId;\n  }\n\n  /**\n   * Enables the hosting control to pass in an organizationId\n   * If a organizationId is provided, the organization selection is disabled.\n   */\n  @Input() set organizationId(value: string) {\n    this._organizationId = value;\n    this.organizationService\n      .get$(this._organizationId)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((organization) => {\n        this._organizationId = organization?.id;\n      });\n  }\n\n  /**\n   * The hosting control also needs a bitSubmitDirective (on the Submit button) which calls this components {@link submit}-method.\n   * This components formState (loading/disabled) is emitted back up to the hosting component so for example the Submit button can be enabled/disabled and show loading state.\n   */\n  @ViewChild(BitSubmitDirective)\n  private bitSubmit: BitSubmitDirective;\n\n  /**\n   * Emits true when the BitSubmitDirective({@link bitSubmit} is executing {@link submit} and false when execution has completed.\n   * Example: Used to show the loading state of the submit button present on the hosting component\n   * */\n  @Output()\n  formLoading = new EventEmitter<boolean>();\n\n  /**\n   * Emits true when this form gets disabled and false when enabled.\n   * Example: Used to disable the submit button, which is present on the hosting component\n   * */\n  @Output()\n  formDisabled = new EventEmitter<boolean>();\n\n  /**\n   * Emits when the creation and download of the export-file have succeeded\n   * - Emits an null/empty string when exporting from an individual vault\n   * - Emits the organizationId when exporting from an organizationl vault\n   * */\n  @Output()\n  onSuccessfulExport = new EventEmitter<string>();\n\n  @ViewChild(PasswordStrengthV2Component) passwordStrengthComponent: PasswordStrengthV2Component;\n\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  private _disabledByPolicy = false;\n\n  organizations$: Observable<Organization[]>;\n\n  protected get disabledByPolicy(): boolean {\n    return this._disabledByPolicy;\n  }\n\n  exportForm = this.formBuilder.group({\n    vaultSelector: [\n      \"myVault\",\n      {\n        nonNullable: true,\n        validators: [Validators.required],\n      },\n    ],\n    format: [\"json\", Validators.required],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n  private onlyManagedCollections = true;\n\n  constructor(\n    protected i18nService: I18nService,\n    protected toastService: ToastService,\n    protected exportService: VaultExportServiceAbstraction,\n    protected eventCollectionService: EventCollectionService,\n    protected passwordGenerationService: PasswordGenerationServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private policyService: PolicyService,\n    private logService: LogService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService,\n    protected dialogService: DialogService,\n    protected organizationService: OrganizationService,\n    private collectionService: CollectionService,\n  ) {}\n\n  async ngOnInit() {\n    // Setup subscription to emit when this form is enabled/disabled\n    this.exportForm.statusChanges.pipe(takeUntil(this.destroy$)).subscribe((c) => {\n      this.formDisabled.emit(c === \"DISABLED\");\n    });\n\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._disabledByPolicy = policyAppliesToActiveUser;\n        if (this.disabledByPolicy) {\n          this.exportForm.disable();\n        }\n      });\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges,\n    )\n      .pipe(startWith(0), takeUntil(this.destroy$))\n      .subscribe(() => this.adjustValidators());\n\n    if (this.organizationId) {\n      this.organizations$ = this.organizationService.memberOrganizations$.pipe(\n        map((orgs) => orgs.filter((org) => org.id == this.organizationId)),\n      );\n      this.exportForm.controls.vaultSelector.patchValue(this.organizationId);\n      this.exportForm.controls.vaultSelector.disable();\n\n      this.onlyManagedCollections = false;\n      return;\n    }\n\n    this.organizations$ = combineLatest({\n      collections: this.collectionService.decryptedCollections$,\n      memberOrganizations: this.organizationService.memberOrganizations$,\n    }).pipe(\n      map(({ collections, memberOrganizations }) => {\n        const managedCollectionsOrgIds = new Set(\n          collections.filter((c) => c.manage).map((c) => c.organizationId),\n        );\n        // Filter organizations that exist in managedCollectionsOrgIds\n        const filteredOrgs = memberOrganizations.filter((org) =>\n          managedCollectionsOrgIds.has(org.id),\n        );\n        // Sort the filtered organizations based on the name\n        return filteredOrgs.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n      }),\n    );\n\n    this.exportForm.controls.vaultSelector.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.organizationId = value != \"myVault\" ? value : undefined;\n      });\n\n    this.exportForm.controls.vaultSelector.setValue(\"myVault\");\n  }\n\n  ngAfterViewInit(): void {\n    this.bitSubmit.loading$.pipe(takeUntil(this.destroy$)).subscribe((loading) => {\n      this.formLoading.emit(loading);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n\n  protected async doExport() {\n    try {\n      const data = await this.getExportData();\n      this.downloadFile(data);\n      this.toastService.showToast({\n        variant: \"success\",\n        title: null,\n        message: this.i18nService.t(\"exportSuccess\"),\n      });\n      this.onSuccessfulExport.emit(this.organizationId);\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  generatePassword = async () => {\n    const [options] = await this.passwordGenerationService.getOptions();\n    const generatedPassword = await this.passwordGenerationService.generatePassword(options);\n    this.exportForm.get(\"filePassword\").setValue(generatedPassword);\n    this.exportForm.get(\"confirmFilePassword\").setValue(generatedPassword);\n  };\n\n  submit = async () => {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: this.i18nService.t(\"errorOccurred\"),\n        message: this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\"),\n      });\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (this.exportForm.invalid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: null,\n        message: this.i18nService.t(\"personalVaultExportPolicyInEffect\"),\n      });\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    await this.doExport();\n  };\n\n  private async verifyUser(): Promise<boolean> {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const result = await UserVerificationDialogComponent.open(this.dialogService, {\n      title: \"confirmVaultExport\",\n      bodyText: confirmDescription,\n      confirmButtonOptions: {\n        text: \"exportVault\",\n        type: \"primary\",\n      },\n    });\n\n    // Handle the result of the dialog based on user action and verification success\n    if (result.userAction === \"cancel\") {\n      // User cancelled the dialog\n      return false;\n    }\n\n    // User confirmed the dialog so check verification success\n    if (!result.verificationSuccess) {\n      if (result.noAvailableClientVerificationMethods) {\n        // No client-side verification methods are available\n        // Could send user to configure a verification method like PIN or biometrics\n      }\n      return false;\n    }\n    return true;\n  }\n\n  protected async getExportData(): Promise<string> {\n    return Utils.isNullOrWhitespace(this.organizationId)\n      ? this.exportService.getExport(this.format, this.filePassword)\n      : this.exportService.getOrganizationExport(\n          this.organizationId,\n          this.format,\n          this.filePassword,\n          this.onlyManagedCollections,\n        );\n  }\n\n  protected getFileName(prefix?: string) {\n    if (this.organizationId) {\n      prefix = \"org\";\n    }\n\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    if (this.organizationId) {\n      return await this.eventCollectionService.collect(\n        EventType.Organization_ClientExportedVault,\n        null,\n        false,\n        this.organizationId,\n      );\n    }\n    return await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n"],
	"names": ["EncryptedExportType", "title", "ExportScopeCalloutComponent", "organizationId", "this", "_organizationId", "value", "getScopeMessage", "constructor", "organizationService", "accountService", "show", "ngOnInit", "hasOrganizations", "scopeConfig", "description", "scopeIdentifier", "get", "name", "firstValueFrom", "activeAccount$", "pipe", "map", "a", "email", "generatePassword", "ExportComponent", "get$", "takeUntil", "destroy$", "subscribe", "organization", "id", "disabledByPolicy", "_disabledByPolicy", "i18nService", "toastService", "exportService", "eventCollectionService", "passwordGenerationService", "platformUtilsService", "policyService", "logService", "formBuilder", "fileDownloadService", "dialogService", "collectionService", "formLoading", "formDisabled", "onSuccessfulExport", "encryptedExportType", "exportForm", "group", "vaultSelector", "nonNullable", "validators", "required", "format", "secret", "filePassword", "confirmFilePassword", "fileEncryptionType", "AccountEncrypted", "formatOptions", "Subject", "onlyManagedCollections", "options", "getOptions", "generatedPassword", "setValue", "submit", "isFileEncryptedExport", "showToast", "variant", "t", "message", "markAllAsTouched", "invalid", "verifyUser", "doExport", "statusChanges", "c", "emit", "policyAppliesToActiveUser$", "DisablePersonalVaultExport", "policyAppliesToActiveUser", "disable", "merge", "valueChanges", "startWith", "adjustValidators", "organizations$", "memberOrganizations$", "orgs", "filter", "org", "controls", "patchValue", "combineLatest", "collections", "decryptedCollections$", "memberOrganizations", "managedCollectionsOrgIds", "Set", "manage", "has", "sort", "getSortFunction", "undefined", "ngAfterViewInit", "bitSubmit", "loading$", "loading", "ngOnDestroy", "next", "encryptedFormat", "FileEncrypted", "isAccountEncryptedExport", "data", "getExportData", "downloadFile", "collectEvent", "clearValidators", "e", "error", "confirmDescription", "result", "open", "bodyText", "confirmButtonOptions", "text", "type", "userAction", "verificationSuccess", "noAvailableClientVerificationMethods", "isNullOrWhitespace", "getExport", "getOrganizationExport", "getFileName", "prefix", "extension", "collect", "Organization_ClientExportedVault", "User_ClientExportedVault", "reset", "enable", "csv", "fileName", "download", "blobData", "blobOptions"],
	"sourceRoot": ""
}